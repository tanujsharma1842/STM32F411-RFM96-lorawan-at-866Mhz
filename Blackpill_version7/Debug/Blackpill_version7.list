
Blackpill_version7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000909c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001610  08009234  08009234  00019234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a844  0800a844  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800a844  0800a844  0001a844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a84c  0800a84c  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a84c  0800a84c  0001a84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a850  0800a850  0001a850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800a854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000054  0800a8a8  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  0800a8a8  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001571a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccc  00000000  00000000  0003579e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00038470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  000397e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017522  00000000  00000000  0003aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016461  00000000  00000000  00051fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920e0  00000000  00000000  0006841b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa4fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ec  00000000  00000000  000fa54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000054 	.word	0x20000054
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800921c 	.word	0x0800921c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000058 	.word	0x20000058
 80001d4:	0800921c 	.word	0x0800921c

080001d8 <__aeabi_ldivmod>:
 80001d8:	b97b      	cbnz	r3, 80001fa <__aeabi_ldivmod+0x22>
 80001da:	b972      	cbnz	r2, 80001fa <__aeabi_ldivmod+0x22>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bfbe      	ittt	lt
 80001e0:	2000      	movlt	r0, #0
 80001e2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001e6:	e006      	blt.n	80001f6 <__aeabi_ldivmod+0x1e>
 80001e8:	bf08      	it	eq
 80001ea:	2800      	cmpeq	r0, #0
 80001ec:	bf1c      	itt	ne
 80001ee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001f2:	f04f 30ff 	movne.w	r0, #4294967295
 80001f6:	f000 b9bf 	b.w	8000578 <__aeabi_idiv0>
 80001fa:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000202:	2900      	cmp	r1, #0
 8000204:	db09      	blt.n	800021a <__aeabi_ldivmod+0x42>
 8000206:	2b00      	cmp	r3, #0
 8000208:	db1a      	blt.n	8000240 <__aeabi_ldivmod+0x68>
 800020a:	f000 f84d 	bl	80002a8 <__udivmoddi4>
 800020e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000216:	b004      	add	sp, #16
 8000218:	4770      	bx	lr
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	2b00      	cmp	r3, #0
 8000222:	db1b      	blt.n	800025c <__aeabi_ldivmod+0x84>
 8000224:	f000 f840 	bl	80002a8 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4240      	negs	r0, r0
 8000234:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000238:	4252      	negs	r2, r2
 800023a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023e:	4770      	bx	lr
 8000240:	4252      	negs	r2, r2
 8000242:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000246:	f000 f82f 	bl	80002a8 <__udivmoddi4>
 800024a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000252:	b004      	add	sp, #16
 8000254:	4240      	negs	r0, r0
 8000256:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025a:	4770      	bx	lr
 800025c:	4252      	negs	r2, r2
 800025e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000262:	f000 f821 	bl	80002a8 <__udivmoddi4>
 8000266:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026e:	b004      	add	sp, #16
 8000270:	4252      	negs	r2, r2
 8000272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000276:	4770      	bx	lr

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b974 	b.w	8000578 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ac:	9d08      	ldr	r5, [sp, #32]
 80002ae:	4604      	mov	r4, r0
 80002b0:	468e      	mov	lr, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d14d      	bne.n	8000352 <__udivmoddi4+0xaa>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d969      	bls.n	8000390 <__udivmoddi4+0xe8>
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	b152      	cbz	r2, 80002d8 <__udivmoddi4+0x30>
 80002c2:	fa01 f302 	lsl.w	r3, r1, r2
 80002c6:	f1c2 0120 	rsb	r1, r2, #32
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d2:	ea41 0e03 	orr.w	lr, r1, r3
 80002d6:	4094      	lsls	r4, r2
 80002d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002dc:	0c21      	lsrs	r1, r4, #16
 80002de:	fbbe f6f8 	udiv	r6, lr, r8
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ee:	fb06 f107 	mul.w	r1, r6, r7
 80002f2:	4299      	cmp	r1, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x64>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fe:	f080 811f 	bcs.w	8000540 <__udivmoddi4+0x298>
 8000302:	4299      	cmp	r1, r3
 8000304:	f240 811c 	bls.w	8000540 <__udivmoddi4+0x298>
 8000308:	3e02      	subs	r6, #2
 800030a:	4463      	add	r3, ip
 800030c:	1a5b      	subs	r3, r3, r1
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb3 f0f8 	udiv	r0, r3, r8
 8000314:	fb08 3310 	mls	r3, r8, r0, r3
 8000318:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800031c:	fb00 f707 	mul.w	r7, r0, r7
 8000320:	42a7      	cmp	r7, r4
 8000322:	d90a      	bls.n	800033a <__udivmoddi4+0x92>
 8000324:	eb1c 0404 	adds.w	r4, ip, r4
 8000328:	f100 33ff 	add.w	r3, r0, #4294967295
 800032c:	f080 810a 	bcs.w	8000544 <__udivmoddi4+0x29c>
 8000330:	42a7      	cmp	r7, r4
 8000332:	f240 8107 	bls.w	8000544 <__udivmoddi4+0x29c>
 8000336:	4464      	add	r4, ip
 8000338:	3802      	subs	r0, #2
 800033a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033e:	1be4      	subs	r4, r4, r7
 8000340:	2600      	movs	r6, #0
 8000342:	b11d      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000344:	40d4      	lsrs	r4, r2
 8000346:	2300      	movs	r3, #0
 8000348:	e9c5 4300 	strd	r4, r3, [r5]
 800034c:	4631      	mov	r1, r6
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	428b      	cmp	r3, r1
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0xc2>
 8000356:	2d00      	cmp	r5, #0
 8000358:	f000 80ef 	beq.w	800053a <__udivmoddi4+0x292>
 800035c:	2600      	movs	r6, #0
 800035e:	e9c5 0100 	strd	r0, r1, [r5]
 8000362:	4630      	mov	r0, r6
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	fab3 f683 	clz	r6, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d14a      	bne.n	8000408 <__udivmoddi4+0x160>
 8000372:	428b      	cmp	r3, r1
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xd4>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80f9 	bhi.w	800056e <__udivmoddi4+0x2c6>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb61 0303 	sbc.w	r3, r1, r3
 8000382:	2001      	movs	r0, #1
 8000384:	469e      	mov	lr, r3
 8000386:	2d00      	cmp	r5, #0
 8000388:	d0e0      	beq.n	800034c <__udivmoddi4+0xa4>
 800038a:	e9c5 4e00 	strd	r4, lr, [r5]
 800038e:	e7dd      	b.n	800034c <__udivmoddi4+0xa4>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xec>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	2a00      	cmp	r2, #0
 800039a:	f040 8092 	bne.w	80004c2 <__udivmoddi4+0x21a>
 800039e:	eba1 010c 	sub.w	r1, r1, ip
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2601      	movs	r6, #1
 80003ac:	0c20      	lsrs	r0, r4, #16
 80003ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80003b2:	fb07 1113 	mls	r1, r7, r3, r1
 80003b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ba:	fb0e f003 	mul.w	r0, lr, r3
 80003be:	4288      	cmp	r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x12c>
 80003c2:	eb1c 0101 	adds.w	r1, ip, r1
 80003c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x12a>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 80003d2:	4643      	mov	r3, r8
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1110 	mls	r1, r7, r0, r1
 80003e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x156>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x154>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2ca>
 80003fc:	4608      	mov	r0, r1
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000406:	e79c      	b.n	8000342 <__udivmoddi4+0x9a>
 8000408:	f1c6 0720 	rsb	r7, r6, #32
 800040c:	40b3      	lsls	r3, r6
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f407 	lsr.w	r4, r0, r7
 800041a:	fa01 f306 	lsl.w	r3, r1, r6
 800041e:	431c      	orrs	r4, r3
 8000420:	40f9      	lsrs	r1, r7
 8000422:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000426:	fa00 f306 	lsl.w	r3, r0, r6
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	0c20      	lsrs	r0, r4, #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fb09 1118 	mls	r1, r9, r8, r1
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	fb08 f00e 	mul.w	r0, r8, lr
 8000440:	4288      	cmp	r0, r1
 8000442:	fa02 f206 	lsl.w	r2, r2, r6
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2bc>
 8000454:	4288      	cmp	r0, r1
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2bc>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4461      	add	r1, ip
 8000460:	1a09      	subs	r1, r1, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb1 f0f9 	udiv	r0, r1, r9
 8000468:	fb09 1110 	mls	r1, r9, r0, r1
 800046c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000470:	fb00 fe0e 	mul.w	lr, r0, lr
 8000474:	458e      	cmp	lr, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1e2>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2b4>
 8000482:	458e      	cmp	lr, r1
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2b4>
 8000486:	3802      	subs	r0, #2
 8000488:	4461      	add	r1, ip
 800048a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048e:	fba0 9402 	umull	r9, r4, r0, r2
 8000492:	eba1 010e 	sub.w	r1, r1, lr
 8000496:	42a1      	cmp	r1, r4
 8000498:	46c8      	mov	r8, r9
 800049a:	46a6      	mov	lr, r4
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x2a4>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x2a0>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x212>
 80004a2:	ebb3 0208 	subs.w	r2, r3, r8
 80004a6:	eb61 010e 	sbc.w	r1, r1, lr
 80004aa:	fa01 f707 	lsl.w	r7, r1, r7
 80004ae:	fa22 f306 	lsr.w	r3, r2, r6
 80004b2:	40f1      	lsrs	r1, r6
 80004b4:	431f      	orrs	r7, r3
 80004b6:	e9c5 7100 	strd	r7, r1, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	f1c2 0320 	rsb	r3, r2, #32
 80004c6:	40d8      	lsrs	r0, r3
 80004c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004cc:	fa21 f303 	lsr.w	r3, r1, r3
 80004d0:	4091      	lsls	r1, r2
 80004d2:	4301      	orrs	r1, r0
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e0:	fb07 3610 	mls	r6, r7, r0, r3
 80004e4:	0c0b      	lsrs	r3, r1, #16
 80004e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ea:	fb00 f60e 	mul.w	r6, r0, lr
 80004ee:	429e      	cmp	r6, r3
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x260>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b8>
 8000500:	429e      	cmp	r6, r3
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b8>
 8000504:	3802      	subs	r0, #2
 8000506:	4463      	add	r3, ip
 8000508:	1b9b      	subs	r3, r3, r6
 800050a:	b289      	uxth	r1, r1
 800050c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000510:	fb07 3316 	mls	r3, r7, r6, r3
 8000514:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000518:	fb06 f30e 	mul.w	r3, r6, lr
 800051c:	428b      	cmp	r3, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x28a>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f106 38ff 	add.w	r8, r6, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2b0>
 800052a:	428b      	cmp	r3, r1
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2b0>
 800052e:	3e02      	subs	r6, #2
 8000530:	4461      	add	r1, ip
 8000532:	1ac9      	subs	r1, r1, r3
 8000534:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0x104>
 800053a:	462e      	mov	r6, r5
 800053c:	4628      	mov	r0, r5
 800053e:	e705      	b.n	800034c <__udivmoddi4+0xa4>
 8000540:	4606      	mov	r6, r0
 8000542:	e6e3      	b.n	800030c <__udivmoddi4+0x64>
 8000544:	4618      	mov	r0, r3
 8000546:	e6f8      	b.n	800033a <__udivmoddi4+0x92>
 8000548:	454b      	cmp	r3, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f8>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000554:	3801      	subs	r0, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f8>
 8000558:	4646      	mov	r6, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x28a>
 800055c:	4620      	mov	r0, r4
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1e2>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x260>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b8>
 8000568:	3b02      	subs	r3, #2
 800056a:	4461      	add	r1, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x12c>
 800056e:	4630      	mov	r0, r6
 8000570:	e709      	b.n	8000386 <__udivmoddi4+0xde>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x156>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	e021      	b.n	80005cc <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 8000588:	4a37      	ldr	r2, [pc, #220]	; (8000668 <aesroundkeys+0xec>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000590:	061a      	lsls	r2, r3, #24
 8000592:	4935      	ldr	r1, [pc, #212]	; (8000668 <aesroundkeys+0xec>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80005a0:	431a      	orrs	r2, r3
 80005a2:	4931      	ldr	r1, [pc, #196]	; (8000668 <aesroundkeys+0xec>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005aa:	0a1b      	lsrs	r3, r3, #8
 80005ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80005b0:	431a      	orrs	r2, r3
 80005b2:	492d      	ldr	r1, [pc, #180]	; (8000668 <aesroundkeys+0xec>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005ba:	0e1b      	lsrs	r3, r3, #24
 80005bc:	431a      	orrs	r2, r3
 80005be:	492a      	ldr	r1, [pc, #168]	; (8000668 <aesroundkeys+0xec>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3301      	adds	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	ddda      	ble.n	8000588 <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <aesroundkeys+0xec>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 80005d8:	e03c      	b.n	8000654 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f003 0303 	and.w	r3, r3, #3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d127      	bne.n	8000634 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	0c1b      	lsrs	r3, r3, #16
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <aesroundkeys+0xf0>)
 80005ee:	5c9b      	ldrb	r3, [r3, r2]
 80005f0:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	0a1b      	lsrs	r3, r3, #8
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <aesroundkeys+0xf0>)
 80005fc:	5c5b      	ldrb	r3, [r3, r1]
 80005fe:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000600:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <aesroundkeys+0xf0>)
 800060a:	5c5b      	ldrb	r3, [r3, r1]
 800060c:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 800060e:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	0e12      	lsrs	r2, r2, #24
 8000614:	4915      	ldr	r1, [pc, #84]	; (800066c <aesroundkeys+0xf0>)
 8000616:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 8000618:	4053      	eors	r3, r2
 800061a:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3b04      	subs	r3, #4
 8000620:	2b00      	cmp	r3, #0
 8000622:	da00      	bge.n	8000626 <aesroundkeys+0xaa>
 8000624:	3303      	adds	r3, #3
 8000626:	109b      	asrs	r3, r3, #2
 8000628:	4619      	mov	r1, r3
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <aesroundkeys+0xf4>)
 800062c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8000630:	4053      	eors	r3, r2
 8000632:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3b04      	subs	r3, #4
 8000638:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <aesroundkeys+0xec>)
 800063a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	4053      	eors	r3, r2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	4908      	ldr	r1, [pc, #32]	; (8000668 <aesroundkeys+0xec>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b2b      	cmp	r3, #43	; 0x2b
 8000658:	ddbf      	ble.n	80005da <aesroundkeys+0x5e>
    }
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000080 	.word	0x20000080
 800066c:	0800966c 	.word	0x0800966c
 8000670:	08009644 	.word	0x08009644

08000674 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 8000684:	f7ff ff7a 	bl	800057c <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 0308 	and.w	r3, r3, #8
 800068e:	2b00      	cmp	r3, #0
 8000690:	d010      	beq.n	80006b4 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <os_aes+0x188>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	4b58      	ldr	r3, [pc, #352]	; (80007fc <os_aes+0x188>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a57      	ldr	r2, [pc, #348]	; (80007fc <os_aes+0x188>)
 800069e:	6093      	str	r3, [r2, #8]
 80006a0:	4b56      	ldr	r3, [pc, #344]	; (80007fc <os_aes+0x188>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	4a55      	ldr	r2, [pc, #340]	; (80007fc <os_aes+0x188>)
 80006a6:	6053      	str	r3, [r2, #4]
 80006a8:	4b54      	ldr	r3, [pc, #336]	; (80007fc <os_aes+0x188>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	4a53      	ldr	r2, [pc, #332]	; (80007fc <os_aes+0x188>)
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	f000 bca3 	b.w	8000ffa <os_aes+0x986>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 80006b4:	4b51      	ldr	r3, [pc, #324]	; (80007fc <os_aes+0x188>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	061a      	lsls	r2, r3, #24
 80006ba:	4b50      	ldr	r3, [pc, #320]	; (80007fc <os_aes+0x188>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006c4:	431a      	orrs	r2, r3
 80006c6:	4b4d      	ldr	r3, [pc, #308]	; (80007fc <os_aes+0x188>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80006d0:	431a      	orrs	r2, r3
 80006d2:	4b4a      	ldr	r3, [pc, #296]	; (80007fc <os_aes+0x188>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	0e1b      	lsrs	r3, r3, #24
 80006d8:	4313      	orrs	r3, r2
 80006da:	4a48      	ldr	r2, [pc, #288]	; (80007fc <os_aes+0x188>)
 80006dc:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 80006de:	4b47      	ldr	r3, [pc, #284]	; (80007fc <os_aes+0x188>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	061a      	lsls	r2, r3, #24
 80006e4:	4b45      	ldr	r3, [pc, #276]	; (80007fc <os_aes+0x188>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006ee:	431a      	orrs	r2, r3
 80006f0:	4b42      	ldr	r3, [pc, #264]	; (80007fc <os_aes+0x188>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <os_aes+0x188>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	0e1b      	lsrs	r3, r3, #24
 8000702:	4313      	orrs	r3, r2
 8000704:	4a3d      	ldr	r2, [pc, #244]	; (80007fc <os_aes+0x188>)
 8000706:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 8000708:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <os_aes+0x188>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	061a      	lsls	r2, r3, #24
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <os_aes+0x188>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000718:	431a      	orrs	r2, r3
 800071a:	4b38      	ldr	r3, [pc, #224]	; (80007fc <os_aes+0x188>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000724:	431a      	orrs	r2, r3
 8000726:	4b35      	ldr	r3, [pc, #212]	; (80007fc <os_aes+0x188>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	0e1b      	lsrs	r3, r3, #24
 800072c:	4313      	orrs	r3, r2
 800072e:	4a33      	ldr	r2, [pc, #204]	; (80007fc <os_aes+0x188>)
 8000730:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 8000732:	4b32      	ldr	r3, [pc, #200]	; (80007fc <os_aes+0x188>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	061a      	lsls	r2, r3, #24
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <os_aes+0x188>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000742:	431a      	orrs	r2, r3
 8000744:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <os_aes+0x188>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800074e:	431a      	orrs	r2, r3
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <os_aes+0x188>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	0e1b      	lsrs	r3, r3, #24
 8000756:	4313      	orrs	r3, r2
 8000758:	4a28      	ldr	r2, [pc, #160]	; (80007fc <os_aes+0x188>)
 800075a:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 800075c:	f000 bc4d 	b.w	8000ffa <os_aes+0x986>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	2b00      	cmp	r3, #0
 8000768:	d109      	bne.n	800077e <os_aes+0x10a>
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b00      	cmp	r3, #0
 8000772:	d011      	beq.n	8000798 <os_aes+0x124>
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10c      	bne.n	8000798 <os_aes+0x124>
                a0 = AESAUX[0];
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <os_aes+0x188>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
                a1 = AESAUX[1];
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <os_aes+0x188>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
                a2 = AESAUX[2];
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <os_aes+0x188>)
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
                a3 = AESAUX[3];
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <os_aes+0x188>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	623b      	str	r3, [r7, #32]
 8000796:	e062      	b.n	800085e <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d016      	beq.n	80007d0 <os_aes+0x15c>
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	2b10      	cmp	r3, #16
 80007a6:	d813      	bhi.n	80007d0 <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
 80007b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80007b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	2b10      	cmp	r3, #16
 80007bc:	d101      	bne.n	80007c2 <os_aes+0x14e>
 80007be:	2210      	movs	r2, #16
 80007c0:	e000      	b.n	80007c4 <os_aes+0x150>
 80007c2:	2220      	movs	r2, #32
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	e046      	b.n	800085e <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 80007d0:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	e026      	b.n	8000826 <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	021a      	lsls	r2, r3, #8
 80007dc:	88bb      	ldrh	r3, [r7, #4]
 80007de:	69f9      	ldr	r1, [r7, #28]
 80007e0:	4299      	cmp	r1, r3
 80007e2:	d204      	bcs.n	80007ee <os_aes+0x17a>
 80007e4:	6839      	ldr	r1, [r7, #0]
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	440b      	add	r3, r1
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	e009      	b.n	8000802 <os_aes+0x18e>
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	69f9      	ldr	r1, [r7, #28]
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d104      	bne.n	8000800 <os_aes+0x18c>
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	e003      	b.n	8000802 <os_aes+0x18e>
 80007fa:	bf00      	nop
 80007fc:	20000070 	.word	0x20000070
 8000800:	2300      	movs	r3, #0
 8000802:	4313      	orrs	r3, r2
 8000804:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2b03      	cmp	r3, #3
 800080e:	d107      	bne.n	8000820 <os_aes+0x1ac>
                        a0 = a1;
 8000810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = a2;
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = a3;
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = t1;
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	3301      	adds	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d9d5      	bls.n	80007d8 <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	2b00      	cmp	r3, #0
 8000834:	d013      	beq.n	800085e <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 8000836:	4ba0      	ldr	r3, [pc, #640]	; (8000ab8 <os_aes+0x444>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800083c:	4053      	eors	r3, r2
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    a1 ^= AESAUX[1];
 8000840:	4b9d      	ldr	r3, [pc, #628]	; (8000ab8 <os_aes+0x444>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000846:	4053      	eors	r3, r2
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
                    a2 ^= AESAUX[2];
 800084a:	4b9b      	ldr	r3, [pc, #620]	; (8000ab8 <os_aes+0x444>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000850:	4053      	eors	r3, r2
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
                    a3 ^= AESAUX[3];
 8000854:	4b98      	ldr	r3, [pc, #608]	; (8000ab8 <os_aes+0x444>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	6a3a      	ldr	r2, [r7, #32]
 800085a:	4053      	eors	r3, r2
 800085c:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 800085e:	4b97      	ldr	r3, [pc, #604]	; (8000abc <os_aes+0x448>)
 8000860:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3380      	adds	r3, #128	; 0x80
 8000866:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800086e:	4053      	eors	r3, r2
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
            a1 ^= ki[1];
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3304      	adds	r3, #4
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800087a:	4053      	eors	r3, r2
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
            a2 ^= ki[2];
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3308      	adds	r3, #8
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000886:	4053      	eors	r3, r2
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
            a3 ^= ki[3];
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	330c      	adds	r3, #12
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6a3a      	ldr	r2, [r7, #32]
 8000892:	4053      	eors	r3, r2
 8000894:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 80008ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b82      	ldr	r3, [pc, #520]	; (8000ac0 <os_aes+0x44c>)
 80008b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4053      	eors	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c2:	0a1b      	lsrs	r3, r3, #8
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b7e      	ldr	r3, [pc, #504]	; (8000ac4 <os_aes+0x450>)
 80008ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4053      	eors	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d6:	0c1b      	lsrs	r3, r3, #16
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	4b7a      	ldr	r3, [pc, #488]	; (8000ac8 <os_aes+0x454>)
 80008de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	4053      	eors	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ea:	0e1b      	lsrs	r3, r3, #24
 80008ec:	4a77      	ldr	r2, [pc, #476]	; (8000acc <os_aes+0x458>)
 80008ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	4053      	eors	r3, r2
 80008f6:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 80008f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b70      	ldr	r3, [pc, #448]	; (8000ac0 <os_aes+0x44c>)
 8000900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	4053      	eors	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <os_aes+0x450>)
 8000914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	4053      	eors	r3, r2
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	0c1b      	lsrs	r3, r3, #16
 8000922:	b2db      	uxtb	r3, r3
 8000924:	461a      	mov	r2, r3
 8000926:	4b68      	ldr	r3, [pc, #416]	; (8000ac8 <os_aes+0x454>)
 8000928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092c:	69fa      	ldr	r2, [r7, #28]
 800092e:	4053      	eors	r3, r2
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000934:	0e1b      	lsrs	r3, r3, #24
 8000936:	4a65      	ldr	r2, [pc, #404]	; (8000acc <os_aes+0x458>)
 8000938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4053      	eors	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	b2db      	uxtb	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	4b5d      	ldr	r3, [pc, #372]	; (8000ac0 <os_aes+0x44c>)
 800094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	4053      	eors	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	0a1b      	lsrs	r3, r3, #8
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	4b59      	ldr	r3, [pc, #356]	; (8000ac4 <os_aes+0x450>)
 800095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	4053      	eors	r3, r2
 8000966:	61fb      	str	r3, [r7, #28]
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	0c1b      	lsrs	r3, r3, #16
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	4b55      	ldr	r3, [pc, #340]	; (8000ac8 <os_aes+0x454>)
 8000972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4053      	eors	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	0e1b      	lsrs	r3, r3, #24
 8000980:	4a52      	ldr	r2, [pc, #328]	; (8000acc <os_aes+0x458>)
 8000982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	4053      	eors	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <os_aes+0x44c>)
 8000994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000998:	69fa      	ldr	r2, [r7, #28]
 800099a:	4053      	eors	r3, r2
 800099c:	61fb      	str	r3, [r7, #28]
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b47      	ldr	r3, [pc, #284]	; (8000ac4 <os_aes+0x450>)
 80009a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4053      	eors	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	0c1b      	lsrs	r3, r3, #16
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <os_aes+0x454>)
 80009bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	4053      	eors	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	6a3b      	ldr	r3, [r7, #32]
 80009c8:	0e1b      	lsrs	r3, r3, #24
 80009ca:	4a40      	ldr	r2, [pc, #256]	; (8000acc <os_aes+0x458>)
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	4053      	eors	r3, r2
 80009d4:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	623b      	str	r3, [r7, #32]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	6a1b      	ldr	r3, [r3, #32]
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <os_aes+0x44c>)
 80009f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009fc:	4053      	eors	r3, r2
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <os_aes+0x450>)
 8000a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a10:	4053      	eors	r3, r2
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	0c1b      	lsrs	r3, r3, #16
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <os_aes+0x454>)
 8000a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a22:	6a3a      	ldr	r2, [r7, #32]
 8000a24:	4053      	eors	r3, r2
 8000a26:	623b      	str	r3, [r7, #32]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	0e1b      	lsrs	r3, r3, #24
 8000a2c:	4a27      	ldr	r2, [pc, #156]	; (8000acc <os_aes+0x458>)
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a34:	4053      	eors	r3, r2
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <os_aes+0x44c>)
 8000a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a46:	4053      	eors	r3, r2
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <os_aes+0x450>)
 8000a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a58:	6a3a      	ldr	r2, [r7, #32]
 8000a5a:	4053      	eors	r3, r2
 8000a5c:	623b      	str	r3, [r7, #32]
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	0c1b      	lsrs	r3, r3, #16
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <os_aes+0x454>)
 8000a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a6e:	4053      	eors	r3, r2
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	0e1b      	lsrs	r3, r3, #24
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <os_aes+0x458>)
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a7e:	4053      	eors	r3, r2
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <os_aes+0x44c>)
 8000a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8e:	6a3a      	ldr	r2, [r7, #32]
 8000a90:	4053      	eors	r3, r2
 8000a92:	623b      	str	r3, [r7, #32]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <os_aes+0x450>)
 8000a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aa4:	4053      	eors	r3, r2
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	0c1b      	lsrs	r3, r3, #16
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <os_aes+0x454>)
 8000ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ab6:	e00b      	b.n	8000ad0 <os_aes+0x45c>
 8000ab8:	20000070 	.word	0x20000070
 8000abc:	20000080 	.word	0x20000080
 8000ac0:	0800a36c 	.word	0x0800a36c
 8000ac4:	08009f6c 	.word	0x08009f6c
 8000ac8:	08009b6c 	.word	0x08009b6c
 8000acc:	0800976c 	.word	0x0800976c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	4053      	eors	r3, r2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	0e1b      	lsrs	r3, r3, #24
 8000ada:	4aa2      	ldr	r2, [pc, #648]	; (8000d64 <os_aes+0x6f0>)
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae2:	4053      	eors	r3, r2
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b9e      	ldr	r3, [pc, #632]	; (8000d68 <os_aes+0x6f4>)
 8000aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000af4:	4053      	eors	r3, r2
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b9a      	ldr	r3, [pc, #616]	; (8000d6c <os_aes+0x6f8>)
 8000b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b08:	4053      	eors	r3, r2
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	0c1b      	lsrs	r3, r3, #16
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b96      	ldr	r3, [pc, #600]	; (8000d70 <os_aes+0x6fc>)
 8000b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1c:	4053      	eors	r3, r2
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	0e1b      	lsrs	r3, r3, #24
 8000b24:	4a8f      	ldr	r2, [pc, #572]	; (8000d64 <os_aes+0x6f0>)
 8000b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2a:	6a3a      	ldr	r2, [r7, #32]
 8000b2c:	4053      	eors	r3, r2
 8000b2e:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3320      	adds	r3, #32
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	f4ff aeab 	bcc.w	8000896 <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 8000b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b82      	ldr	r3, [pc, #520]	; (8000d68 <os_aes+0x6f4>)
 8000b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4053      	eors	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b7e      	ldr	r3, [pc, #504]	; (8000d6c <os_aes+0x6f8>)
 8000b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b80:	0c1b      	lsrs	r3, r3, #16
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b7a      	ldr	r3, [pc, #488]	; (8000d70 <os_aes+0x6fc>)
 8000b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	4053      	eors	r3, r2
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	0e1b      	lsrs	r3, r3, #24
 8000b96:	4a73      	ldr	r2, [pc, #460]	; (8000d64 <os_aes+0x6f0>)
 8000b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9c:	69fa      	ldr	r2, [r7, #28]
 8000b9e:	4053      	eors	r3, r2
 8000ba0:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 8000ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b6f      	ldr	r3, [pc, #444]	; (8000d68 <os_aes+0x6f4>)
 8000baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4053      	eors	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b6b      	ldr	r3, [pc, #428]	; (8000d6c <os_aes+0x6f8>)
 8000bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	4053      	eors	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bca:	0c1b      	lsrs	r3, r3, #16
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b67      	ldr	r3, [pc, #412]	; (8000d70 <os_aes+0x6fc>)
 8000bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	4053      	eors	r3, r2
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bde:	0e1b      	lsrs	r3, r3, #24
 8000be0:	4a60      	ldr	r2, [pc, #384]	; (8000d64 <os_aes+0x6f0>)
 8000be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4053      	eors	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b5d      	ldr	r3, [pc, #372]	; (8000d68 <os_aes+0x6f4>)
 8000bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	4053      	eors	r3, r2
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <os_aes+0x6f8>)
 8000c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0c:	69fa      	ldr	r2, [r7, #28]
 8000c0e:	4053      	eors	r3, r2
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	0c1b      	lsrs	r3, r3, #16
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b55      	ldr	r3, [pc, #340]	; (8000d70 <os_aes+0x6fc>)
 8000c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4053      	eors	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	0e1b      	lsrs	r3, r3, #24
 8000c2a:	4a4e      	ldr	r2, [pc, #312]	; (8000d64 <os_aes+0x6f0>)
 8000c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	4053      	eors	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <os_aes+0x6f4>)
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	4053      	eors	r3, r2
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <os_aes+0x6f8>)
 8000c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4053      	eors	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b42      	ldr	r3, [pc, #264]	; (8000d70 <os_aes+0x6fc>)
 8000c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	4053      	eors	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	6a3b      	ldr	r3, [r7, #32]
 8000c72:	0e1b      	lsrs	r3, r3, #24
 8000c74:	4a3b      	ldr	r2, [pc, #236]	; (8000d64 <os_aes+0x6f0>)
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	4053      	eors	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	0e1b      	lsrs	r3, r3, #24
 8000c8a:	4a3a      	ldr	r2, [pc, #232]	; (8000d74 <os_aes+0x700>)
 8000c8c:	5cd3      	ldrb	r3, [r2, r3]
 8000c8e:	061b      	lsls	r3, r3, #24
 8000c90:	461a      	mov	r2, r3
 8000c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c94:	4053      	eors	r3, r2
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	0c1b      	lsrs	r3, r3, #16
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <os_aes+0x700>)
 8000ca2:	5c9b      	ldrb	r3, [r3, r2]
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000caa:	4053      	eors	r3, r2
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <os_aes+0x700>)
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc0:	4053      	eors	r3, r2
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <os_aes+0x700>)
 8000ccc:	5c9b      	ldrb	r3, [r3, r2]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd2:	4053      	eors	r3, r2
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	0e1b      	lsrs	r3, r3, #24
 8000ce0:	4a24      	ldr	r2, [pc, #144]	; (8000d74 <os_aes+0x700>)
 8000ce2:	5cd3      	ldrb	r3, [r2, r3]
 8000ce4:	061b      	lsls	r3, r3, #24
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	4053      	eors	r3, r2
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	0c1b      	lsrs	r3, r3, #16
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <os_aes+0x700>)
 8000cf8:	5c9b      	ldrb	r3, [r3, r2]
 8000cfa:	041b      	lsls	r3, r3, #16
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d00:	4053      	eors	r3, r2
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	0a1b      	lsrs	r3, r3, #8
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <os_aes+0x700>)
 8000d0e:	5c9b      	ldrb	r3, [r3, r2]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	461a      	mov	r2, r3
 8000d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d16:	4053      	eors	r3, r2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <os_aes+0x700>)
 8000d22:	5c9b      	ldrb	r3, [r3, r2]
 8000d24:	461a      	mov	r2, r3
 8000d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d28:	4053      	eors	r3, r2
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	0e1b      	lsrs	r3, r3, #24
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <os_aes+0x700>)
 8000d38:	5cd3      	ldrb	r3, [r2, r3]
 8000d3a:	061b      	lsls	r3, r3, #24
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	4053      	eors	r3, r2
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	0c1b      	lsrs	r3, r3, #16
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <os_aes+0x700>)
 8000d4e:	5c9b      	ldrb	r3, [r3, r2]
 8000d50:	041b      	lsls	r3, r3, #16
 8000d52:	461a      	mov	r2, r3
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	4053      	eors	r3, r2
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	e009      	b.n	8000d78 <os_aes+0x704>
 8000d64:	0800976c 	.word	0x0800976c
 8000d68:	0800a36c 	.word	0x0800a36c
 8000d6c:	08009f6c 	.word	0x08009f6c
 8000d70:	08009b6c 	.word	0x08009b6c
 8000d74:	0800966c 	.word	0x0800966c
 8000d78:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <os_aes+0x8a0>)
 8000d7a:	5c9b      	ldrb	r3, [r3, r2]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	461a      	mov	r2, r3
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	4053      	eors	r3, r2
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b61      	ldr	r3, [pc, #388]	; (8000f14 <os_aes+0x8a0>)
 8000d8e:	5c9b      	ldrb	r3, [r3, r2]
 8000d90:	461a      	mov	r2, r3
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	4053      	eors	r3, r2
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	623b      	str	r3, [r7, #32]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	0e1b      	lsrs	r3, r3, #24
 8000da2:	4a5c      	ldr	r2, [pc, #368]	; (8000f14 <os_aes+0x8a0>)
 8000da4:	5cd3      	ldrb	r3, [r2, r3]
 8000da6:	061b      	lsls	r3, r3, #24
 8000da8:	461a      	mov	r2, r3
 8000daa:	6a3b      	ldr	r3, [r7, #32]
 8000dac:	4053      	eors	r3, r2
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	0c1b      	lsrs	r3, r3, #16
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b56      	ldr	r3, [pc, #344]	; (8000f14 <os_aes+0x8a0>)
 8000dba:	5c9b      	ldrb	r3, [r3, r2]
 8000dbc:	041b      	lsls	r3, r3, #16
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	4053      	eors	r3, r2
 8000dc4:	623b      	str	r3, [r7, #32]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b51      	ldr	r3, [pc, #324]	; (8000f14 <os_aes+0x8a0>)
 8000dd0:	5c9b      	ldrb	r3, [r3, r2]
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	4053      	eors	r3, r2
 8000dda:	623b      	str	r3, [r7, #32]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <os_aes+0x8a0>)
 8000de4:	5c9b      	ldrb	r3, [r3, r2]
 8000de6:	461a      	mov	r2, r3
 8000de8:	6a3b      	ldr	r3, [r7, #32]
 8000dea:	4053      	eors	r3, r2
 8000dec:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d056      	beq.n	8000ea6 <os_aes+0x832>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	111b      	asrs	r3, r3, #4
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d041      	beq.n	8000e8c <os_aes+0x818>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 8000e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0a:	0fdb      	lsrs	r3, r3, #31
 8000e0c:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 8000e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e10:	005a      	lsls	r2, r3, #1
 8000e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e14:	0fdb      	lsrs	r3, r3, #31
 8000e16:	4313      	orrs	r3, r2
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 8000e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1c:	005a      	lsls	r2, r3, #1
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	0fdb      	lsrs	r3, r3, #31
 8000e22:	4313      	orrs	r3, r2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	005a      	lsls	r2, r3, #1
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	0fdb      	lsrs	r3, r3, #31
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
                        a3 = (a3 << 1);
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <os_aes+0x7d2>
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8000e44:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1da      	bne.n	8000e08 <os_aes+0x794>

                    AESAUX[0] ^= a0;
 8000e52:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <os_aes+0x8a4>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e58:	4053      	eors	r3, r2
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <os_aes+0x8a4>)
 8000e5c:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <os_aes+0x8a4>)
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e64:	4053      	eors	r3, r2
 8000e66:	4a2c      	ldr	r2, [pc, #176]	; (8000f18 <os_aes+0x8a4>)
 8000e68:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <os_aes+0x8a4>)
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	4053      	eors	r3, r2
 8000e72:	4a29      	ldr	r2, [pc, #164]	; (8000f18 <os_aes+0x8a4>)
 8000e74:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <os_aes+0x8a4>)
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	4053      	eors	r3, r2
 8000e7e:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <os_aes+0x8a4>)
 8000e80:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e88:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 8000e8a:	e4a2      	b.n	80007d2 <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 8000e8c:	4a22      	ldr	r2, [pc, #136]	; (8000f18 <os_aes+0x8a4>)
 8000e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e90:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 8000e92:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <os_aes+0x8a4>)
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 8000e98:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <os_aes+0x8a4>)
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <os_aes+0x8a4>)
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	60d3      	str	r3, [r2, #12]
 8000ea4:	e095      	b.n	8000fd2 <os_aes+0x95e>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d035      	beq.n	8000f1c <os_aes+0x8a8>
                    t0 = (len > 16) ? 16: len;
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	bf28      	it	cs
 8000eb6:	2310      	movcs	r3, #16
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	e01d      	b.n	8000efe <os_aes+0x88a>
                        buf[t1] ^= (a0>>24);
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	7819      	ldrb	r1, [r3, #0]
 8000eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ecc:	0e1b      	lsrs	r3, r3, #24
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	4403      	add	r3, r0
 8000ed6:	404a      	eors	r2, r1
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 8000edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if((t1&3)==3) {
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d105      	bne.n	8000ef8 <os_aes+0x884>
                            a0 = a1;
 8000eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
                            a1 = a2;
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
                            a2 = a3;
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
                    for(t1=0; t1<t0; t1++) {
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	3301      	adds	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3dd      	bcc.n	8000ec2 <os_aes+0x84e>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <os_aes+0x8a4>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4a02      	ldr	r2, [pc, #8]	; (8000f18 <os_aes+0x8a4>)
 8000f0e:	60d3      	str	r3, [r2, #12]
 8000f10:	e05f      	b.n	8000fd2 <os_aes+0x95e>
 8000f12:	bf00      	nop
 8000f14:	0800966c 	.word	0x0800966c
 8000f18:	20000070 	.word	0x20000070
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	0e1b      	lsrs	r3, r3, #24
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f28:	0c1a      	lsrs	r2, r3, #16
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f34:	0a1a      	lsrs	r2, r3, #8
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	3302      	adds	r3, #2
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	3303      	adds	r3, #3
 8000f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 8000f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4a:	0e1a      	lsrs	r2, r3, #24
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f56:	0c1a      	lsrs	r2, r3, #16
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3305      	adds	r3, #5
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f62:	0a1a      	lsrs	r2, r3, #8
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3306      	adds	r3, #6
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	3307      	adds	r3, #7
 8000f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	0e1a      	lsrs	r2, r3, #24
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	0c1a      	lsrs	r2, r3, #16
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	3309      	adds	r3, #9
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	0a1a      	lsrs	r2, r3, #8
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	330a      	adds	r3, #10
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	330b      	adds	r3, #11
 8000f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	0e1a      	lsrs	r2, r3, #24
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	330c      	adds	r3, #12
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	0c1a      	lsrs	r2, r3, #16
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	330d      	adds	r3, #13
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	0a1a      	lsrs	r2, r3, #8
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	330e      	adds	r3, #14
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	330f      	adds	r3, #15
 8000fcc:	6a3a      	ldr	r2, [r7, #32]
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <os_aes+0x972>
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <os_aes+0x97e>
                buf += 16;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3310      	adds	r3, #16
 8000fea:	603b      	str	r3, [r7, #0]
                len -= 16;
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	3b10      	subs	r3, #16
 8000ff0:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 8000ffa:	88bb      	ldrh	r3, [r7, #4]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f73f abae 	bgt.w	8000760 <os_aes+0xec>
        }
        return AESAUX[0];
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <os_aes+0x99c>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3730      	adds	r7, #48	; 0x30
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000070 	.word	0x20000070

08001014 <debug_init>:

/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init () {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    // configure LED pin as output
    debug_led(0);
 8001018:	2000      	movs	r0, #0
 800101a:	f000 f807 	bl	800102c <debug_led>

    // configure USART1 (115200/8N1, tx-only)

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 800101e:	4802      	ldr	r0, [pc, #8]	; (8001028 <debug_init+0x14>)
 8001020:	f000 f867 	bl	80010f2 <debug_str>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08009234 	.word	0x08009234

0800102c <debug_led>:

void debug_led (int val) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,val);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <debug_led+0x20>)
 8001040:	f005 fb0e 	bl	8006660 <HAL_GPIO_WritePin>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40020800 	.word	0x40020800

08001050 <debug_char>:

void debug_char (char c) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  char buffer[] = "";
 800105a:	2300      	movs	r3, #0
 800105c:	733b      	strb	r3, [r7, #12]
  buffer[0]= c;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	733b      	strb	r3, [r7, #12]
  HAL_UART_Transmit(&myUART,buffer,sizeof(buffer),HAL_MAX_DELAY);
 8001062:	f107 010c 	add.w	r1, r7, #12
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	2201      	movs	r2, #1
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <debug_char+0x2c>)
 800106e:	f007 fce1 	bl	8008a34 <HAL_UART_Transmit>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000384 	.word	0x20000384

08001080 <debug_hex>:

void debug_hex (u1_t b) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
    debug_char("0123456789ABCDEF"[b>>4]);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	b2db      	uxtb	r3, r3
 8001090:	461a      	mov	r2, r3
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <debug_hex+0x34>)
 8001094:	5c9b      	ldrb	r3, [r3, r2]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffda 	bl	8001050 <debug_char>
    debug_char("0123456789ABCDEF"[b&0xF]);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <debug_hex+0x34>)
 80010a4:	5cd3      	ldrb	r3, [r2, r3]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ffd2 	bl	8001050 <debug_char>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	08009264 	.word	0x08009264

080010b8 <debug_uint>:
    }
    debug_char('\r');
    debug_char('\n');
}

void debug_uint (u4_t v) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    for(s1_t n=24; n>=0; n-=8) {
 80010c0:	2318      	movs	r3, #24
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e00c      	b.n	80010e0 <debug_uint+0x28>
        debug_hex(v>>n);
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffd4 	bl	8001080 <debug_hex>
    for(s1_t n=24; n>=0; n-=8) {
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	3b08      	subs	r3, #8
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	daee      	bge.n	80010c6 <debug_uint+0xe>
    }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <debug_str>:
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
    while(n--)
        debug_char(*p++);
}

void debug_str (const char* str) {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    while(*str) {
 80010fa:	e006      	b.n	800110a <debug_str+0x18>
        debug_char(*str++);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffa3 	bl	8001050 <debug_char>
    while(*str) {
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f4      	bne.n	80010fc <debug_str+0xa>
    }
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <debug_val>:

void debug_val (const char* label, u4_t val) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
    debug_str(label);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffe3 	bl	80010f2 <debug_str>
    debug_uint(val);
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f7ff ffc3 	bl	80010b8 <debug_uint>
    debug_char('\r');
 8001132:	200d      	movs	r0, #13
 8001134:	f7ff ff8c 	bl	8001050 <debug_char>
    debug_char('\n');
 8001138:	200a      	movs	r0, #10
 800113a:	f7ff ff89 	bl	8001050 <debug_char>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <debug_event>:
    while( b-buf < max && p > num );
    // return number of characters written
    return b - buf;
}

void debug_event (int ev) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b11      	cmp	r3, #17
 8001154:	d804      	bhi.n	8001160 <debug_event+0x18>
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <debug_event+0x34>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	e000      	b.n	8001162 <debug_event+0x1a>
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <debug_event+0x38>)
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ffc5 	bl	80010f2 <debug_str>
    debug_char('\r');
 8001168:	200d      	movs	r0, #13
 800116a:	f7ff ff71 	bl	8001050 <debug_char>
    debug_char('\n');
 800116e:	200a      	movs	r0, #10
 8001170:	f7ff ff6e 	bl	8001050 <debug_char>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	08009278 	.word	0x08009278

08001184 <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	461a      	mov	r2, r3
 80011b6:	2101      	movs	r1, #1
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <hal_pin_nss+0x20>)
 80011ba:	f005 fa51 	bl	8006660 <HAL_GPIO_WritePin>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020400 	.word	0x40020400

080011cc <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <hal_pin_rst+0x16>
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d112      	bne.n	8001208 <hal_pin_rst+0x3c>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 80011e2:	2304      	movs	r3, #4
 80011e4:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <hal_pin_rst+0x60>)
 80011f6:	f004 ff99 	bl	800612c <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	461a      	mov	r2, r3
 80011fe:	2104      	movs	r1, #4
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <hal_pin_rst+0x60>)
 8001202:	f005 fa2d 	bl	8006660 <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 8001206:	e00c      	b.n	8001222 <hal_pin_rst+0x56>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001208:	2304      	movs	r3, #4
 800120a:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4619      	mov	r1, r3
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <hal_pin_rst+0x60>)
 800121c:	f004 ff86 	bl	800612c <HAL_GPIO_Init>
    }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3730      	adds	r7, #48	; 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40020000 	.word	0x40020000

08001230 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d102      	bne.n	8001246 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8001240:	2000      	movs	r0, #0
 8001242:	f004 fb5b 	bl	80058fc <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124c:	d102      	bne.n	8001254 <HAL_GPIO_EXTI_Callback+0x24>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f004 fb54 	bl	80058fc <radio_irq_handler>
	}
	// DIO 2
	if(GPIO_Pin_int == DIO2_Pin) {
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800125a:	d102      	bne.n	8001262 <HAL_GPIO_EXTI_Callback+0x32>
	    // invoke radio handler (on IRQ!)
	    radio_irq_handler(2);
 800125c:	2002      	movs	r0, #2
 800125e:	f004 fb4d 	bl	80058fc <radio_irq_handler>
	}
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 8001282:	2300      	movs	r3, #0
 8001284:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 8001286:	2300      	movs	r3, #0
 8001288:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 800128e:	f107 0208 	add.w	r2, r7, #8
 8001292:	f107 010c 	add.w	r1, r7, #12
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2301      	movs	r3, #1
 800129e:	4804      	ldr	r0, [pc, #16]	; (80012b0 <hal_spi+0x38>)
 80012a0:	f006 f974 	bl	800758c <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 80012a4:	7a3b      	ldrb	r3, [r7, #8]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200002e4 	.word	0x200002e4

080012b4 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <hal_ticks>:

u4_t hal_ticks () {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80012ca:	f000 f8b1 	bl	8001430 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <hal_ticks+0x58>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <hal_ticks+0x5c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <hal_ticks+0x5c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d10d      	bne.n	8001306 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <hal_ticks+0x5c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d106      	bne.n	8001306 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <hal_ticks+0x5c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	807b      	strh	r3, [r7, #2]
    		t++;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3301      	adds	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8001306:	f000 f8a3 	bl	8001450 <hal_enableIRQs>
    return (t<<16)|cnt;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	4313      	orrs	r3, r2
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000130 	.word	0x20000130
 8001320:	2000033c 	.word	0x2000033c

08001324 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 800132c:	f7ff ffca 	bl	80012c4 <hal_ticks>
 8001330:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	dc01      	bgt.n	8001344 <deltaticks+0x20>
 8001340:	2300      	movs	r3, #0
 8001342:	e008      	b.n	8001356 <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	141b      	asrs	r3, r3, #16
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <deltaticks+0x2e>
 800134c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001350:	e001      	b.n	8001356 <deltaticks+0x32>
    return (u2_t)d;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	b29b      	uxth	r3, r3
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8001366:	bf00      	nop
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffdb 	bl	8001324 <deltaticks>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f9      	bne.n	8001368 <hal_waitUntil+0xa>
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <hal_checkTimer+0x78>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <hal_checkTimer+0x78>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0202 	bic.w	r2, r2, #2
 8001396:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffc3 	bl	8001324 <deltaticks>
 800139e:	4603      	mov	r3, r0
 80013a0:	81fb      	strh	r3, [r7, #14]
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d809      	bhi.n	80013bc <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <hal_checkTimer+0x78>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <hal_checkTimer+0x78>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0202 	bic.w	r2, r2, #2
 80013b6:	60da      	str	r2, [r3, #12]
        return 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e018      	b.n	80013ee <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <hal_checkTimer+0x78>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80013c2:	89fa      	ldrh	r2, [r7, #14]
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <hal_checkTimer+0x78>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	440a      	add	r2, r1
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <hal_checkTimer+0x78>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <hal_checkTimer+0x78>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0202 	orr.w	r2, r2, #2
 80013da:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <hal_checkTimer+0x78>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6a1a      	ldr	r2, [r3, #32]
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <hal_checkTimer+0x78>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	621a      	str	r2, [r3, #32]
        return 0;
 80013ec:	2300      	movs	r3, #0
    }
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000033c 	.word	0x2000033c

080013fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d104      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	3301      	adds	r3, #1
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001418:	6053      	str	r3, [r2, #4]
    }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	2000033c 	.word	0x2000033c
 800142c:	20000130 	.word	0x20000130

08001430 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <hal_disableIRQs+0x1c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a03      	ldr	r2, [pc, #12]	; (800144c <hal_disableIRQs+0x1c>)
 8001440:	6013      	str	r3, [r2, #0]
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	20000130 	.word	0x20000130

08001450 <hal_enableIRQs>:

void hal_enableIRQs () {
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <hal_enableIRQs+0x24>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3b01      	subs	r3, #1
 800145a:	4a06      	ldr	r2, [pc, #24]	; (8001474 <hal_enableIRQs+0x24>)
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <hal_enableIRQs+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001466:	b662      	cpsie	i
}
 8001468:	bf00      	nop
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000130 	.word	0x20000130

08001478 <hal_sleep>:

void hal_sleep () {
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 800147c:	bf30      	wfi
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 800148c:	2208      	movs	r2, #8
 800148e:	2100      	movs	r1, #0
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <hal_init+0x28>)
 8001492:	f007 febb 	bl	800920c <memset>
    hal_disableIRQs();
 8001496:	f7ff ffcb 	bl	8001430 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 800149a:	f7ff fe73 	bl	8001184 <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 800149e:	f7ff fee4 	bl	800126a <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 80014a2:	f7ff ff07 	bl	80012b4 <hal_time_init>
    hal_enableIRQs();
 80014a6:	f7ff ffd3 	bl	8001450 <hal_enableIRQs>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000130 	.word	0x20000130

080014b4 <hal_failed>:

void hal_failed () {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 80014b8:	f7ff ffba 	bl	8001430 <hal_disableIRQs>
    hal_sleep();
 80014bc:	f7ff ffdc 	bl	8001478 <hal_sleep>
    while(1);
 80014c0:	e7fe      	b.n	80014c0 <hal_failed+0xc>

080014c2 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)////////////// same for eu and india
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	80fb      	strh	r3, [r7, #6]
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	80fb      	strh	r3, [r7, #6]
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	08db      	lsrs	r3, r3, #3
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	80fb      	strh	r3, [r7, #6]
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	b29b      	uxth	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	460a      	mov	r2, r1
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	4613      	mov	r3, r2
 8001538:	717b      	strb	r3, [r7, #5]
 800153a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001542:	b21a      	sxth	r2, r3
 8001544:	797b      	ldrb	r3, [r7, #5]
 8001546:	015b      	lsls	r3, r3, #5
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	09db      	lsrs	r3, r3, #7
 800156a:	b29b      	uxth	r3, r3
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	80fb      	strh	r3, [r7, #6]
 8001588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001590:	b21a      	sxth	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	01db      	lsls	r3, r3, #7
 8001596:	b21b      	sxth	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b21b      	sxth	r3, r3
 800159c:	b29b      	uxth	r3, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	80fb      	strh	r3, [r7, #6]
 80015d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	b21a      	sxth	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	3301      	adds	r3, #1
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <updr2rps+0x20>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	b29b      	uxth	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	0800a76c 	.word	0x0800a76c

08001618 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ffe5 	bl	80015f4 <updr2rps>
 800162a:	4603      	mov	r3, r0
 800162c:	2101      	movs	r1, #1
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ffa4 	bl	800157c <setNocrc>
 8001634:	4603      	mov	r3, r0
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <decDR+0x2c>)
 800164e:	5cd3      	ldrb	r3, [r2, r3]
 8001650:	2bff      	cmp	r3, #255	; 0xff
 8001652:	d003      	beq.n	800165c <decDR+0x1c>
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	3b01      	subs	r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	e000      	b.n	800165e <decDR+0x1e>
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	0800a76c 	.word	0x0800a76c

08001670 <validDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	3301      	adds	r3, #1
 800167e:	4a06      	ldr	r2, [pc, #24]	; (8001698 <validDR+0x28>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	2bff      	cmp	r3, #255	; 0xff
 8001684:	bf14      	ite	ne
 8001686:	2301      	movne	r3, #1
 8001688:	2300      	moveq	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	0800a76c 	.word	0x0800a76c

0800169c <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	460a      	mov	r2, r1
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	4613      	mov	r3, r2
 80016aa:	71bb      	strb	r3, [r7, #6]
 80016ac:	e005      	b.n	80016ba <lowerDR+0x1e>
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ffc5 	bl	8001640 <decDR>
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	1e5a      	subs	r2, r3, #1
 80016be:	71ba      	strb	r2, [r7, #6]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f4      	bne.n	80016ae <lowerDR+0x12>
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b21a      	sxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3301      	adds	r3, #1
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	b29b      	uxth	r3, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3301      	adds	r3, #1
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	4313      	orrs	r3, r2
 8001710:	461a      	mov	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3302      	adds	r3, #2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3303      	adds	r3, #3
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	061b      	lsls	r3, r3, #24
 8001724:	4313      	orrs	r3, r2
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3303      	adds	r3, #3
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3302      	adds	r3, #2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	4313      	orrs	r3, r2
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3301      	adds	r3, #1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	4313      	orrs	r3, r2
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	b29a      	uxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	0a1a      	lsrs	r2, r3, #8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3301      	adds	r3, #1
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	0c1a      	lsrs	r2, r3, #16
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3302      	adds	r3, #2
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	0e1a      	lsrs	r2, r3, #24
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3303      	adds	r3, #3
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	701a      	strb	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3303      	adds	r3, #3
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	0a1a      	lsrs	r2, r3, #8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3302      	adds	r3, #2
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	0c1a      	lsrs	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3301      	adds	r3, #1
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	0e1b      	lsrs	r3, r3, #24
 800180c:	b2da      	uxtb	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	701a      	strb	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 8001822:	23ff      	movs	r3, #255	; 0xff
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 800182e:	b480      	push	{r7}
 8001830:	b087      	sub	sp, #28
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 800183c:	f241 0321 	movw	r3, #4129	; 0x1021
 8001840:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e026      	b.n	8001896 <os_crc16+0x68>
        remainder ^= data[i] << 8;
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001858:	4053      	eors	r3, r2
 800185a:	b21b      	sxth	r3, r3
 800185c:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 800185e:	2308      	movs	r3, #8
 8001860:	73fb      	strb	r3, [r7, #15]
 8001862:	e012      	b.n	800188a <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 8001864:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001868:	2b00      	cmp	r3, #0
 800186a:	da08      	bge.n	800187e <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 800186c:	8afb      	ldrh	r3, [r7, #22]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	b21a      	sxth	r2, r3
 8001872:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001876:	4053      	eors	r3, r2
 8001878:	b21b      	sxth	r3, r3
 800187a:	82fb      	strh	r3, [r7, #22]
 800187c:	e002      	b.n	8001884 <os_crc16+0x56>
            else 
                remainder <<= 1;
 800187e:	8afb      	ldrh	r3, [r7, #22]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	3b01      	subs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e9      	bne.n	8001864 <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	3301      	adds	r3, #1
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d3d4      	bcc.n	8001848 <os_crc16+0x1a>
        }
    }
    return remainder;
 800189e:	8afb      	ldrh	r3, [r7, #22]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 80018ba:	2210      	movs	r2, #16
 80018bc:	2100      	movs	r1, #0
 80018be:	4810      	ldr	r0, [pc, #64]	; (8001900 <micB0+0x54>)
 80018c0:	f007 fca4 	bl	800920c <memset>
    AESaux[0]  = 0x49;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <micB0+0x54>)
 80018c6:	2249      	movs	r2, #73	; 0x49
 80018c8:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <micB0+0x58>)
 80018d8:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <micB0+0x5c>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <micB0+0x60>)
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff57 	bl	800179a <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <micB0+0x64>)
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff52 	bl	800179a <os_wlsbf4>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000070 	.word	0x20000070
 8001904:	20000075 	.word	0x20000075
 8001908:	2000007f 	.word	0x2000007f
 800190c:	20000076 	.word	0x20000076
 8001910:	2000007a 	.word	0x2000007a

08001914 <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f7ff ffbf 	bl	80018ac <micB0>
    os_copyMem(AESkey,key,16);
 800192e:	2210      	movs	r2, #16
 8001930:	68f9      	ldr	r1, [r7, #12]
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <aes_verifyMic+0x54>)
 8001934:	f007 fc5c 	bl	80091f0 <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	b29b      	uxth	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	6a39      	ldr	r1, [r7, #32]
 8001940:	2002      	movs	r0, #2
 8001942:	f7fe fe97 	bl	8000674 <os_aes>
 8001946:	4604      	mov	r4, r0
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	6a3a      	ldr	r2, [r7, #32]
 800194c:	4413      	add	r3, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff feef 	bl	8001732 <os_rmsbf4>
 8001954:	4603      	mov	r3, r0
 8001956:	429c      	cmp	r4, r3
 8001958:	bf0c      	ite	eq
 800195a:	2301      	moveq	r3, #1
 800195c:	2300      	movne	r3, #0
 800195e:	b2db      	uxtb	r3, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	20000080 	.word	0x20000080

0800196c <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	68b8      	ldr	r0, [r7, #8]
 8001982:	f7ff ff93 	bl	80018ac <micB0>
    os_copyMem(AESkey,key,16);
 8001986:	2210      	movs	r2, #16
 8001988:	68f9      	ldr	r1, [r7, #12]
 800198a:	480b      	ldr	r0, [pc, #44]	; (80019b8 <aes_appendMic+0x4c>)
 800198c:	f007 fc30 	bl	80091f0 <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	6a3a      	ldr	r2, [r7, #32]
 8001994:	18d4      	adds	r4, r2, r3
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	b29b      	uxth	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	6a39      	ldr	r1, [r7, #32]
 800199e:	2002      	movs	r0, #2
 80019a0:	f7fe fe68 	bl	8000674 <os_aes>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff ff17 	bl	80017dc <os_wmsbf4>
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000080 	.word	0x20000080

080019bc <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <aes_appendMic0+0x38>)
 80019c8:	f002 feb4 	bl	8004734 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	18d4      	adds	r4, r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	200a      	movs	r0, #10
 80019dc:	f7fe fe4a 	bl	8000674 <os_aes>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff fef9 	bl	80017dc <os_wmsbf4>
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000080 	.word	0x20000080

080019f8 <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001a02:	480d      	ldr	r0, [pc, #52]	; (8001a38 <aes_verifyMic0+0x40>)
 8001a04:	f002 fe96 	bl	8004734 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	200a      	movs	r0, #10
 8001a12:	f7fe fe2f 	bl	8000674 <os_aes>
 8001a16:	4604      	mov	r4, r0
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fe87 	bl	8001732 <os_rmsbf4>
 8001a24:	4603      	mov	r3, r0
 8001a26:	429c      	cmp	r4, r3
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}
 8001a38:	20000080 	.word	0x20000080

08001a3c <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <aes_encrypt+0x28>)
 8001a48:	f002 fe74 	bl	8004734 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7fe fe0d 	bl	8000674 <os_aes>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000080 	.word	0x20000080

08001a68 <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	dd29      	ble.n	8001ad0 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4815      	ldr	r0, [pc, #84]	; (8001ad8 <aes_cipher+0x70>)
 8001a82:	f007 fbc3 	bl	800920c <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <aes_cipher+0x74>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <aes_cipher+0x70>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <aes_cipher+0x78>)
 8001aa0:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <aes_cipher+0x7c>)
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fe77 	bl	800179a <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <aes_cipher+0x80>)
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fe72 	bl	800179a <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	480c      	ldr	r0, [pc, #48]	; (8001aec <aes_cipher+0x84>)
 8001abc:	f007 fb98 	bl	80091f0 <memcpy>
    os_aes(AES_CTR, payload, len);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	2004      	movs	r0, #4
 8001aca:	f7fe fdd3 	bl	8000674 <os_aes>
 8001ace:	e000      	b.n	8001ad2 <aes_cipher+0x6a>
        return;
 8001ad0:	bf00      	nop
}
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000070 	.word	0x20000070
 8001adc:	2000007f 	.word	0x2000007f
 8001ae0:	20000075 	.word	0x20000075
 8001ae4:	20000076 	.word	0x20000076
 8001ae8:	2000007a 	.word	0x2000007a
 8001aec:	20000080 	.word	0x20000080

08001af0 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	4603      	mov	r3, r0
 8001afe:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 8001b00:	2210      	movs	r2, #16
 8001b02:	2100      	movs	r1, #0
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f007 fb81 	bl	800920c <memset>
    nwkkey[0] = 0x01;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3301      	adds	r3, #1
 8001b14:	2206      	movs	r2, #6
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f007 fb69 	bl	80091f0 <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3307      	adds	r3, #7
 8001b22:	89fa      	ldrh	r2, [r7, #14]
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe20 	bl	800176c <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	6838      	ldr	r0, [r7, #0]
 8001b32:	f007 fb5d 	bl	80091f0 <memcpy>
    artkey[0] = 0x02;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2202      	movs	r2, #2
 8001b3a:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <aes_sessKeys+0x74>)
 8001b3e:	f002 fdf9 	bl	8004734 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 8001b42:	2210      	movs	r2, #16
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7fe fd94 	bl	8000674 <os_aes>
    os_getDevKey(AESkey);
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <aes_sessKeys+0x74>)
 8001b4e:	f002 fdf1 	bl	8004734 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 8001b52:	2210      	movs	r2, #16
 8001b54:	6839      	ldr	r1, [r7, #0]
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7fe fd8c 	bl	8000674 <os_aes>
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000080 	.word	0x20000080

08001b68 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fca4 	bl	80014c2 <getSf>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461c      	mov	r4, r3
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fcae 	bl	80014e2 <getBw>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <getSensitivity+0x3c>)
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4423      	add	r3, r4
 8001b92:	4413      	add	r3, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	3b8d      	subs	r3, #141	; 0x8d
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	0800a788 	.word	0x0800a788

08001ba8 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	80fb      	strh	r3, [r7, #6]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fc91 	bl	80014e2 <getBw>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc7b 	bl	80014c2 <getSf>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 8001bd0:	7abb      	ldrb	r3, [r7, #10]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10c      	bne.n	8001bf0 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 8001bd6:	797b      	ldrb	r3, [r7, #5]
 8001bd8:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 8001bda:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <calcAirTime+0x12c>)
 8001be4:	fb82 1203 	smull	r1, r2, r2, r3
 8001be8:	1312      	asrs	r2, r2, #12
 8001bea:	17db      	asrs	r3, r3, #31
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	e06d      	b.n	8001ccc <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8001bf0:	7abb      	ldrb	r3, [r7, #10]
 8001bf2:	3306      	adds	r3, #6
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8001bfa:	7abb      	ldrb	r3, [r7, #10]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d901      	bls.n	8001c04 <calcAirTime+0x5c>
 8001c00:	2308      	movs	r3, #8
 8001c02:	e000      	b.n	8001c06 <calcAirTime+0x5e>
 8001c04:	2300      	movs	r3, #0
 8001c06:	7dfa      	ldrb	r2, [r7, #23]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8001c0c:	797b      	ldrb	r3, [r7, #5]
 8001c0e:	00da      	lsls	r2, r3, #3
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f103 041c 	add.w	r4, r3, #28
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fc9e 	bl	800155c <getNocrc>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <calcAirTime+0x82>
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <calcAirTime+0x84>
 8001c2a:	2310      	movs	r3, #16
 8001c2c:	441c      	add	r4, r3
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fcba 	bl	80015aa <getIh>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <calcAirTime+0x98>
 8001c3c:	2314      	movs	r3, #20
 8001c3e:	e000      	b.n	8001c42 <calcAirTime+0x9a>
 8001c40:	2300      	movs	r3, #0
 8001c42:	1ae3      	subs	r3, r4, r3
 8001c44:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	dd15      	ble.n	8001c78 <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 8001c4c:	7a7a      	ldrb	r2, [r7, #9]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4413      	add	r3, r2
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	7a7b      	ldrb	r3, [r7, #9]
 8001c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c5a:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fc51 	bl	8001506 <getCr>
 8001c64:	4603      	mov	r3, r0
 8001c66:	1d5a      	adds	r2, r3, #5
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	613b      	str	r3, [r7, #16]
        tmp += 8;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	3308      	adds	r3, #8
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e001      	b.n	8001c7c <calcAirTime+0xd4>
    } else {
        tmp = 8;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3331      	adds	r3, #49	; 0x31
 8001c82:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 8001c84:	7aba      	ldrb	r2, [r7, #10]
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 8001c90:	f643 5309 	movw	r3, #15625	; 0x3d09
 8001c94:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d907      	bls.n	8001cac <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	fa42 f303 	asr.w	r3, r2, r3
 8001ca6:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001cb8:	fb03 f202 	mul.w	r2, r3, r2
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	0fd9      	lsrs	r1, r3, #31
 8001cc0:	440b      	add	r3, r1
 8001cc2:	105b      	asrs	r3, r3, #1
 8001cc4:	441a      	add	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}
 8001cd4:	14f8b589 	.word	0x14f8b589

08001cd8 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <calcRxWindow+0xa0>)
 8001cf0:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8001cf4:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <calcRxWindow+0xa0>)
 8001cf8:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	e011      	b.n	8001d24 <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <calcRxWindow+0xa0>)
 8001d02:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8001d06:	461a      	mov	r2, r3
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	11db      	asrs	r3, r3, #7
 8001d10:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <calcRxWindow+0xa0>)
 8001d14:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8001d18:	461a      	mov	r2, r3
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	11db      	asrs	r3, r3, #7
 8001d22:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 8001d24:	2305      	movs	r3, #5
 8001d26:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <calcRxWindow+0xa0>)
 8001d2a:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <calcRxWindow+0xa0>)
 8001d32:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8001d40:	79bb      	ldrb	r3, [r7, #6]
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <calcRxWindow+0xa4>)
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3305      	adds	r3, #5
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <calcRxWindow+0xa0>)
 8001d56:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	3b08      	subs	r3, #8
 8001d5c:	79ba      	ldrb	r2, [r7, #6]
 8001d5e:	4907      	ldr	r1, [pc, #28]	; (8001d7c <calcRxWindow+0xa4>)
 8001d60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d64:	fb03 f202 	mul.w	r2, r3, r2
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	4413      	add	r3, r2
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20000138 	.word	0x20000138
 8001d7c:	0800a7ac 	.word	0x0800a7ac

08001d80 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 8001d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d84:	b087      	sub	sp, #28
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4606      	mov	r6, r0
 8001d8a:	4608      	mov	r0, r1
 8001d8c:	4631      	mov	r1, r6
 8001d8e:	73f9      	strb	r1, [r7, #15]
 8001d90:	4601      	mov	r1, r0
 8001d92:	73b9      	strb	r1, [r7, #14]
    if( ini ) {
 8001d94:	7bb9      	ldrb	r1, [r7, #14]
 8001d96:	2900      	cmp	r1, #0
 8001d98:	d014      	beq.n	8001dc4 <calcBcnRxWindowFromMillis+0x44>
        LMIC.drift = 0;
 8001d9a:	493b      	ldr	r1, [pc, #236]	; (8001e88 <calcBcnRxWindowFromMillis+0x108>)
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f8a1 00b4 	strh.w	r0, [r1, #180]	; 0xb4
        LMIC.maxDriftDiff = 0;
 8001da2:	4939      	ldr	r1, [pc, #228]	; (8001e88 <calcBcnRxWindowFromMillis+0x108>)
 8001da4:	2000      	movs	r0, #0
 8001da6:	f8a1 00b8 	strh.w	r0, [r1, #184]	; 0xb8
        LMIC.missedBcns = 0;
 8001daa:	4937      	ldr	r1, [pc, #220]	; (8001e88 <calcBcnRxWindowFromMillis+0x108>)
 8001dac:	2000      	movs	r0, #0
 8001dae:	f881 0131 	strb.w	r0, [r1, #305]	; 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8001db2:	4935      	ldr	r1, [pc, #212]	; (8001e88 <calcBcnRxWindowFromMillis+0x108>)
 8001db4:	f891 1196 	ldrb.w	r1, [r1, #406]	; 0x196
 8001db8:	f041 010c 	orr.w	r1, r1, #12
 8001dbc:	b2c8      	uxtb	r0, r1
 8001dbe:	4932      	ldr	r1, [pc, #200]	; (8001e88 <calcBcnRxWindowFromMillis+0x108>)
 8001dc0:	f881 0196 	strb.w	r0, [r1, #406]	; 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8001dc4:	2142      	movs	r1, #66	; 0x42
 8001dc6:	6179      	str	r1, [r7, #20]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8001dc8:	7bf9      	ldrb	r1, [r7, #15]
 8001dca:	2000      	movs	r0, #0
 8001dcc:	460c      	mov	r4, r1
 8001dce:	4605      	mov	r5, r0
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	f04f 0a00 	mov.w	sl, #0
 8001dd8:	f04f 0b00 	mov.w	fp, #0
 8001ddc:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001de0:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001de4:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001de8:	4650      	mov	r0, sl
 8001dea:	4659      	mov	r1, fp
 8001dec:	1b02      	subs	r2, r0, r4
 8001dee:	eb61 0305 	sbc.w	r3, r1, r5
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	0099      	lsls	r1, r3, #2
 8001dfc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001e00:	0090      	lsls	r0, r2, #2
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	eb12 0804 	adds.w	r8, r2, r4
 8001e0a:	eb43 0905 	adc.w	r9, r3, r5
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8001e1a:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8001e1e:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8001e22:	4690      	mov	r8, r2
 8001e24:	4699      	mov	r9, r3
 8001e26:	4642      	mov	r2, r8
 8001e28:	464b      	mov	r3, r9
 8001e2a:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001e2e:	1851      	adds	r1, r2, r1
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	f143 0300 	adc.w	r3, r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e44:	f7fe f9c8 	bl	80001d8 <__aeabi_ldivmod>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	3305      	adds	r3, #5
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <calcBcnRxWindowFromMillis+0x108>)
 8001e5a:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <calcBcnRxWindowFromMillis+0x108>)
 8001e60:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001e64:	f503 127a 	add.w	r2, r3, #4096000	; 0x3e8000
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <calcBcnRxWindowFromMillis+0x108>)
 8001e6a:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8001e6e:	3b08      	subs	r3, #8
 8001e70:	6979      	ldr	r1, [r7, #20]
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <calcBcnRxWindowFromMillis+0x108>)
 8001e7a:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
}
 8001e7e:	bf00      	nop
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e88:	20000138 	.word	0x20000138

08001e8c <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 8001e94:	2210      	movs	r2, #16
 8001e96:	2100      	movs	r1, #0
 8001e98:	482e      	ldr	r0, [pc, #184]	; (8001f54 <rxschedInit+0xc8>)
 8001e9a:	f007 f9b7 	bl	800920c <memset>
    os_clearMem(LMIC.frame+8,8);
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <rxschedInit+0xcc>)
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f007 f9b1 	bl	800920c <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <rxschedInit+0xd0>)
 8001eac:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	482b      	ldr	r0, [pc, #172]	; (8001f60 <rxschedInit+0xd4>)
 8001eb4:	f7ff fc71 	bl	800179a <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 8001eb8:	4a2a      	ldr	r2, [pc, #168]	; (8001f64 <rxschedInit+0xd8>)
 8001eba:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <rxschedInit+0xd0>)
 8001ebc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f7ff fc69 	bl	800179a <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 8001ec8:	2210      	movs	r2, #16
 8001eca:	4925      	ldr	r1, [pc, #148]	; (8001f60 <rxschedInit+0xd4>)
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7fe fbd1 	bl	8000674 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8001ed8:	4821      	ldr	r0, [pc, #132]	; (8001f60 <rxschedInit+0xd4>)
 8001eda:	f7ff fbf8 	bl	80016ce <os_rlsbf2>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	f1c3 0307 	rsb	r3, r3, #7
 8001ee8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001eec:	fa42 f303 	asr.w	r3, r2, r3
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <rxschedInit+0xd0>)
 8001ef6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
                       BCN_RESERVE_osticks +
 8001efa:	4619      	mov	r1, r3
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	4613      	mov	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	019b      	lsls	r3, r3, #6
                       BCN_RESERVE_osticks +
 8001f06:	440b      	add	r3, r1
 8001f08:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001f0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f10:	461a      	mov	r2, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685c      	ldr	r4, [r3, #4]
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	2201      	movs	r2, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f7ff fecf 	bl	8001cd8 <calcRxWindow>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	1ae2      	subs	r2, r4, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <rxschedInit+0xd0>)
 8001f44:	7c1a      	ldrb	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	70da      	strb	r2, [r3, #3]
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000080 	.word	0x20000080
 8001f58:	20000288 	.word	0x20000288
 8001f5c:	20000138 	.word	0x20000138
 8001f60:	20000280 	.word	0x20000280
 8001f64:	20000284 	.word	0x20000284

08001f68 <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db01      	blt.n	8001f82 <rxschedNext+0x1a>
        return 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e03a      	b.n	8001ff8 <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	789b      	ldrb	r3, [r3, #2]
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da01      	bge.n	8001f94 <rxschedNext+0x2c>
        return 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e031      	b.n	8001ff8 <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	4093      	lsls	r3, r2
 8001f9e:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	7bbb      	ldrb	r3, [r7, #14]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	709a      	strb	r2, [r3, #2]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	789b      	ldrb	r3, [r3, #2]
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da01      	bge.n	8001fbc <rxschedNext+0x54>
        return 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e01d      	b.n	8001ff8 <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	049b      	lsls	r3, r3, #18
 8001fca:	11db      	asrs	r3, r3, #7
 8001fcc:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	7bbb      	ldrb	r3, [r7, #14]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f7ff fe79 	bl	8001cd8 <calcRxWindow>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <rxschedNext+0x98>)
 8001ff0:	7c1a      	ldrb	r2, [r3, #16]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	70da      	strb	r2, [r3, #3]
    goto again;
 8001ff6:	e7bc      	b.n	8001f72 <rxschedNext+0xa>
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	20000138 	.word	0x20000138

08002004 <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 800200e:	f003 fc4f 	bl	80058b0 <radio_rand1>
 8002012:	4603      	mov	r3, r0
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21c      	sxth	r4, r3
 8002018:	f003 fc4a 	bl	80058b0 <radio_rand1>
 800201c:	4603      	mov	r3, r0
 800201e:	b21b      	sxth	r3, r3
 8002020:	4323      	orrs	r3, r4
 8002022:	b21b      	sxth	r3, r3
 8002024:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002030:	dd0b      	ble.n	800204a <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 8002032:	897b      	ldrh	r3, [r7, #10]
 8002034:	4a11      	ldr	r2, [pc, #68]	; (800207c <rndDelay+0x78>)
 8002036:	fba2 1203 	umull	r1, r2, r2, r3
 800203a:	0ad2      	lsrs	r2, r2, #11
 800203c:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8002040:	fb01 f202 	mul.w	r2, r1, r2
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	b29b      	uxth	r3, r3
 8002048:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d010      	beq.n	8002072 <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8002050:	897b      	ldrh	r3, [r7, #10]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	79fa      	ldrb	r2, [r7, #7]
 8002056:	fbb3 f1f2 	udiv	r1, r3, r2
 800205a:	fb01 f202 	mul.w	r2, r1, r2
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002068:	fb02 f303 	mul.w	r3, r2, r3
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
    return delay;
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bd90      	pop	{r4, r7, pc}
 800207c:	10624dd3 	.word	0x10624dd3

08002080 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ffb8 	bl	8002004 <rndDelay>
 8002094:	4602      	mov	r2, r0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <txDelay+0x58>)
 800209e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <txDelay+0x34>
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <txDelay+0x58>)
 80020a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	dd0c      	ble.n	80020ce <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 80020b4:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <txDelay+0x58>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        LMIC.opmode |= OP_RNDTX;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <txDelay+0x58>)
 80020be:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <txDelay+0x58>)
 80020ca:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    }
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000138 	.word	0x20000138

080020dc <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	460a      	mov	r2, r1
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	4613      	mov	r3, r2
 80020ea:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <setDrJoin+0x24>)
 80020ee:	79bb      	ldrb	r3, [r7, #6]
 80020f0:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	20000138 	.word	0x20000138

08002104 <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	460b      	mov	r3, r1
 8002110:	71bb      	strb	r3, [r7, #6]
 8002112:	4613      	mov	r3, r2
 8002114:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 8002116:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800211a:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800211e:	d003      	beq.n	8002128 <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 8002120:	4a0e      	ldr	r2, [pc, #56]	; (800215c <setDrTxpow+0x58>)
 8002122:	797b      	ldrb	r3, [r7, #5]
 8002124:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
    if( LMIC.datarate != dr ) {
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <setDrTxpow+0x58>)
 800212a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800212e:	79ba      	ldrb	r2, [r7, #6]
 8002130:	429a      	cmp	r2, r3
 8002132:	d00c      	beq.n	800214e <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 8002134:	4a09      	ldr	r2, [pc, #36]	; (800215c <setDrTxpow+0x58>)
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <setDrTxpow+0x58>)
 800213e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002142:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <setDrTxpow+0x58>)
 800214a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000138 	.word	0x20000138

08002160 <initDefaultChannels>:
//};




static void initDefaultChannels (bit_t join) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	2100      	movs	r1, #0
 800216e:	483a      	ldr	r0, [pc, #232]	; (8002258 <initDefaultChannels+0xf8>)
 8002170:	f007 f84c 	bl	800920c <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002174:	2220      	movs	r2, #32
 8002176:	2100      	movs	r1, #0
 8002178:	4838      	ldr	r0, [pc, #224]	; (800225c <initDefaultChannels+0xfc>)
 800217a:	f007 f847 	bl	800920c <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 800217e:	2220      	movs	r2, #32
 8002180:	2100      	movs	r1, #0
 8002182:	4837      	ldr	r0, [pc, #220]	; (8002260 <initDefaultChannels+0x100>)
 8002184:	f007 f842 	bl	800920c <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002188:	4b36      	ldr	r3, [pc, #216]	; (8002264 <initDefaultChannels+0x104>)
 800218a:	2207      	movs	r2, #7
 800218c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <initDefaultChannels+0x3a>
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <initDefaultChannels+0x3c>
 800219a:	2303      	movs	r3, #3
 800219c:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 800219e:	2300      	movs	r3, #0
 80021a0:	73bb      	strb	r3, [r7, #14]
 80021a2:	e014      	b.n	80021ce <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	7bbb      	ldrb	r3, [r7, #14]
 80021a8:	492f      	ldr	r1, [pc, #188]	; (8002268 <initDefaultChannels+0x108>)
 80021aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80021ae:	492d      	ldr	r1, [pc, #180]	; (8002264 <initDefaultChannels+0x104>)
 80021b0:	3310      	adds	r3, #16
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 80021b6:	7bbb      	ldrb	r3, [r7, #14]
 80021b8:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <initDefaultChannels+0x104>)
 80021ba:	3340      	adds	r3, #64	; 0x40
 80021bc:	213f      	movs	r1, #63	; 0x3f
 80021be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	3301      	adds	r3, #1
 80021c6:	73bb      	strb	r3, [r7, #14]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	7bbb      	ldrb	r3, [r7, #14]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d9e7      	bls.n	80021a4 <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <initDefaultChannels+0x104>)
 80021d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021da:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 80021dc:	4b21      	ldr	r3, [pc, #132]	; (8002264 <initDefaultChannels+0x104>)
 80021de:	220e      	movs	r2, #14
 80021e0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80021e4:	f003 fb64 	bl	80058b0 <radio_rand1>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <initDefaultChannels+0x104>)
 80021f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 80021f6:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <initDefaultChannels+0x104>)
 80021f8:	2264      	movs	r2, #100	; 0x64
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <initDefaultChannels+0x104>)
 80021fe:	220e      	movs	r2, #14
 8002200:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002204:	f003 fb54 	bl	80058b0 <radio_rand1>
 8002208:	4603      	mov	r3, r0
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <initDefaultChannels+0x104>)
 8002212:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <initDefaultChannels+0x104>)
 8002218:	220a      	movs	r2, #10
 800221a:	861a      	strh	r2, [r3, #48]	; 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <initDefaultChannels+0x104>)
 800221e:	221b      	movs	r2, #27
 8002220:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002224:	f003 fb44 	bl	80058b0 <radio_rand1>
 8002228:	4603      	mov	r3, r0
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <initDefaultChannels+0x104>)
 8002232:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 8002236:	f002 fe11 	bl	8004e5c <os_getTime>
 800223a:	4603      	mov	r3, r0
 800223c:	4a09      	ldr	r2, [pc, #36]	; (8002264 <initDefaultChannels+0x104>)
 800223e:	6353      	str	r3, [r2, #52]	; 0x34
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <initDefaultChannels+0x104>)
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    LMIC.bands[BAND_CENTI].avail =
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <initDefaultChannels+0x104>)
 8002246:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <initDefaultChannels+0x104>)
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 800224c:	4a05      	ldr	r2, [pc, #20]	; (8002264 <initDefaultChannels+0x104>)
 800224e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000178 	.word	0x20000178
 800225c:	200001b8 	.word	0x200001b8
 8002260:	20000158 	.word	0x20000158
 8002264:	20000138 	.word	0x20000138
 8002268:	0800a7cc 	.word	0x0800a7cc

0800226c <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}
/////////////////////// TO BE DECIDED BY SIRRR TO CHANGE OR NOT///////////
bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6039      	str	r1, [r7, #0]
 8002274:	4611      	mov	r1, r2
 8002276:	461a      	mov	r2, r3
 8002278:	4603      	mov	r3, r0
 800227a:	71fb      	strb	r3, [r7, #7]
 800227c:	460b      	mov	r3, r1
 800227e:	80bb      	strh	r3, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	d901      	bls.n	800228e <LMIC_setupChannel+0x22>
        return 0;
 800228a:	2300      	movs	r3, #0
 800228c:	e054      	b.n	8002338 <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 800228e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d121      	bne.n	80022dc <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <LMIC_setupChannel+0xd8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d908      	bls.n	80022b2 <LMIC_setupChannel+0x46>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4a29      	ldr	r2, [pc, #164]	; (8002348 <LMIC_setupChannel+0xdc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d804      	bhi.n	80022b2 <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	e021      	b.n	80022f6 <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	4a25      	ldr	r2, [pc, #148]	; (800234c <LMIC_setupChannel+0xe0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d903      	bls.n	80022c2 <LMIC_setupChannel+0x56>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	4a24      	ldr	r2, [pc, #144]	; (8002350 <LMIC_setupChannel+0xe4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d907      	bls.n	80022d2 <LMIC_setupChannel+0x66>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	4a23      	ldr	r2, [pc, #140]	; (8002354 <LMIC_setupChannel+0xe8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d315      	bcc.n	80022f6 <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	4a22      	ldr	r2, [pc, #136]	; (8002358 <LMIC_setupChannel+0xec>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d811      	bhi.n	80022f6 <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	e00c      	b.n	80022f6 <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 80022dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	dd01      	ble.n	80022e8 <LMIC_setupChannel+0x7c>
 80022e4:	2300      	movs	r3, #0
 80022e6:	e027      	b.n	8002338 <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f023 0203 	bic.w	r2, r3, #3
 80022ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	4918      	ldr	r1, [pc, #96]	; (800235c <LMIC_setupChannel+0xf0>)
 80022fa:	3310      	adds	r3, #16
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 8002302:	88bb      	ldrh	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <LMIC_setupChannel+0xa0>
 8002308:	88ba      	ldrh	r2, [r7, #4]
 800230a:	e000      	b.n	800230e <LMIC_setupChannel+0xa2>
 800230c:	223f      	movs	r2, #63	; 0x3f
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	4912      	ldr	r1, [pc, #72]	; (800235c <LMIC_setupChannel+0xf0>)
 8002312:	3340      	adds	r3, #64	; 0x40
 8002314:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <LMIC_setupChannel+0xf0>)
 800231a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800231e:	b21a      	sxth	r2, r3
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	b21b      	sxth	r3, r3
 800232a:	4313      	orrs	r3, r2
 800232c:	b21b      	sxth	r3, r3
 800232e:	b29a      	uxth	r2, r3
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <LMIC_setupChannel+0xf0>)
 8002332:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    return 1;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	33d1fdbf 	.word	0x33d1fdbf
 8002348:	33d5ce50 	.word	0x33d5ce50
 800234c:	33bca0ff 	.word	0x33bca0ff
 8002350:	33c5c8c0 	.word	0x33c5c8c0
 8002354:	33d691a0 	.word	0x33d691a0
 8002358:	33db2580 	.word	0x33db2580
 800235c:	20000138 	.word	0x20000138

08002360 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff f9c3 	bl	80016f8 <os_rlsbf4>
 8002372:	4603      	mov	r3, r0
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	2264      	movs	r2, #100	; 0x64
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	60fb      	str	r3, [r7, #12]
    if( freq < IN866_FREQ_MIN || freq > IN866_FREQ_MAX )
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <convFreq+0x3c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d903      	bls.n	800238e <convFreq+0x2e>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <convFreq+0x40>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <convFreq+0x32>
        freq = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
    return freq;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	338eda3f 	.word	0x338eda3f
 80023a0:	33ad5ec0 	.word	0x33ad5ec0

080023a4 <mapChannels>:
    //if( freq < IN866_FREQ_MIN || freq > IN866_FREQ_MAX)
      //  freq = 0;
   // return freq;
//}

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	460a      	mov	r2, r1
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10a      	bne.n	80023d0 <mapChannels+0x2c>
 80023ba:	88bb      	ldrh	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <mapChannels+0x2c>
 80023c0:	88ba      	ldrh	r2, [r7, #4]
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <mapChannels+0x90>)
 80023c4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <mapChannels+0x30>
        return 0;  // illegal input
 80023d0:	2300      	movs	r3, #0
 80023d2:	e028      	b.n	8002426 <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e01d      	b.n	8002416 <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 80023da:	88ba      	ldrh	r2, [r7, #4]
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	fa42 f303 	asr.w	r3, r2, r3
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d012      	beq.n	8002410 <mapChannels+0x6c>
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <mapChannels+0x90>)
 80023ee:	3310      	adds	r3, #16
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2201      	movs	r2, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	b21b      	sxth	r3, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	b21a      	sxth	r2, r3
 8002406:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800240a:	4013      	ands	r3, r2
 800240c:	b21b      	sxth	r3, r3
 800240e:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	3301      	adds	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2b0f      	cmp	r3, #15
 800241a:	d9de      	bls.n	80023da <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 800241c:	4a05      	ldr	r2, [pc, #20]	; (8002434 <mapChannels+0x90>)
 800241e:	88bb      	ldrh	r3, [r7, #4]
 8002420:	f8a2 30a0 	strh.w	r3, [r2, #160]	; 0xa0
    return 1;
 8002424:	2301      	movs	r3, #1
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000138 	.word	0x20000138

08002438 <updateTx>:


static void updateTx (ostime_t txbeg) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <updateTx+0x90>)
 8002442:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002446:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <updateTx+0x90>)
 8002448:	3310      	adds	r3, #16
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <updateTx+0x90>)
 8002452:	89db      	ldrh	r3, [r3, #14]
 8002454:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <updateTx+0x90>)
 8002456:	f892 2147 	ldrb.w	r2, [r2, #327]	; 0x147
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fba3 	bl	8001ba8 <calcAirTime>
 8002462:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	3304      	adds	r3, #4
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <updateTx+0x90>)
 8002470:	4413      	add	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 0303 	bic.w	r3, r3, #3
 800247a:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <updateTx+0x90>)
 800247c:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <updateTx+0x90>)
 8002486:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	fb03 f202 	mul.w	r2, r3, r2
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	441a      	add	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <updateTx+0x90>)
 800249e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <updateTx+0x90>)
 80024a8:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80024ac:	461a      	mov	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	fa03 f202 	lsl.w	r2, r3, r2
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <updateTx+0x90>)
 80024ba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000138 	.word	0x20000138

080024cc <nextTx>:

static ostime_t nextTx (ostime_t now) {
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 80024d4:	230f      	movs	r3, #15
 80024d6:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4b48      	ldr	r3, [pc, #288]	; (80025fc <nextTx+0x130>)
 80024dc:	4413      	add	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	73bb      	strb	r3, [r7, #14]
 80024e8:	e01d      	b.n	8002526 <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 80024ea:	7dfa      	ldrb	r2, [r7, #23]
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	fa42 f303 	asr.w	r3, r2, r3
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d012      	beq.n	8002520 <nextTx+0x54>
 80024fa:	7bbb      	ldrb	r3, [r7, #14]
 80024fc:	4a40      	ldr	r2, [pc, #256]	; (8002600 <nextTx+0x134>)
 80024fe:	3304      	adds	r3, #4
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	dd08      	ble.n	8002520 <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 800250e:	7bbb      	ldrb	r3, [r7, #14]
 8002510:	73fb      	strb	r3, [r7, #15]
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	4a3a      	ldr	r2, [pc, #232]	; (8002600 <nextTx+0x134>)
 8002516:	3304      	adds	r3, #4
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 8002520:	7bbb      	ldrb	r3, [r7, #14]
 8002522:	3301      	adds	r3, #1
 8002524:	73bb      	strb	r3, [r7, #14]
 8002526:	7bbb      	ldrb	r3, [r7, #14]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d9de      	bls.n	80024ea <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	4a34      	ldr	r2, [pc, #208]	; (8002600 <nextTx+0x134>)
 8002530:	3304      	adds	r3, #4
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	78db      	ldrb	r3, [r3, #3]
 8002538:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 800253a:	2300      	movs	r3, #0
 800253c:	733b      	strb	r3, [r7, #12]
 800253e:	e042      	b.n	80025c6 <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 8002540:	7b7b      	ldrb	r3, [r7, #13]
 8002542:	3301      	adds	r3, #1
 8002544:	737b      	strb	r3, [r7, #13]
 8002546:	7b7b      	ldrb	r3, [r7, #13]
 8002548:	2b0f      	cmp	r3, #15
 800254a:	d902      	bls.n	8002552 <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 800254c:	7b7b      	ldrb	r3, [r7, #13]
 800254e:	3b10      	subs	r3, #16
 8002550:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002552:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <nextTx+0x134>)
 8002554:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002558:	461a      	mov	r2, r3
 800255a:	7b7b      	ldrb	r3, [r7, #13]
 800255c:	fa42 f303 	asr.w	r3, r2, r3
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d02b      	beq.n	80025c0 <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 8002568:	7b7b      	ldrb	r3, [r7, #13]
 800256a:	4a25      	ldr	r2, [pc, #148]	; (8002600 <nextTx+0x134>)
 800256c:	3340      	adds	r3, #64	; 0x40
 800256e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002572:	461a      	mov	r2, r3
 8002574:	4b22      	ldr	r3, [pc, #136]	; (8002600 <nextTx+0x134>)
 8002576:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	fa42 f303 	asr.w	r3, r2, r3
 8002582:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01a      	beq.n	80025c0 <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	7b7b      	ldrb	r3, [r7, #13]
 800258e:	491c      	ldr	r1, [pc, #112]	; (8002600 <nextTx+0x134>)
 8002590:	3310      	adds	r3, #16
 8002592:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002596:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 800259a:	429a      	cmp	r2, r3
 800259c:	d110      	bne.n	80025c0 <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	4917      	ldr	r1, [pc, #92]	; (8002600 <nextTx+0x134>)
 80025a2:	1d13      	adds	r3, r2, #4
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	7b79      	ldrb	r1, [r7, #13]
 80025aa:	70d9      	strb	r1, [r3, #3]
 80025ac:	4914      	ldr	r1, [pc, #80]	; (8002600 <nextTx+0x134>)
 80025ae:	1d13      	adds	r3, r2, #4
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	78da      	ldrb	r2, [r3, #3]
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <nextTx+0x134>)
 80025b8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
                return mintime;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	e016      	b.n	80025ee <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 80025c0:	7b3b      	ldrb	r3, [r7, #12]
 80025c2:	3301      	adds	r3, #1
 80025c4:	733b      	strb	r3, [r7, #12]
 80025c6:	7b3b      	ldrb	r3, [r7, #12]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d9b9      	bls.n	8002540 <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2201      	movs	r2, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	b25a      	sxtb	r2, r3
 80025da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025de:	4013      	ands	r3, r2
 80025e0:	b25b      	sxtb	r3, r3
 80025e2:	75fb      	strb	r3, [r7, #23]
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f47f af76 	bne.w	80024d8 <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 80025ec:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	44aa2000 	.word	0x44aa2000
 8002600:	20000138 	.word	0x20000138

08002604 <setBcnRxParams>:


static void setBcnRxParams (void) {
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <setBcnRxParams+0x48>)
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <setBcnRxParams+0x48>)
 8002612:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <setBcnRxParams+0x48>)
 8002618:	3310      	adds	r3, #16
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <setBcnRxParams+0x48>)
 8002624:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 8002626:	2003      	movs	r0, #3
 8002628:	f7fe fff6 	bl	8001618 <dndr2rps>
 800262c:	4603      	mov	r3, r0
 800262e:	2101      	movs	r1, #1
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe ffa3 	bl	800157c <setNocrc>
 8002636:	4603      	mov	r3, r0
 8002638:	2111      	movs	r1, #17
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe ffc4 	bl	80015c8 <setIh>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	4b01      	ldr	r3, [pc, #4]	; (800264c <setBcnRxParams+0x48>)
 8002646:	81da      	strh	r2, [r3, #14]
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000138 	.word	0x20000138

08002650 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 8002650:	b598      	push	{r3, r4, r7, lr}
 8002652:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8002654:	f003 f92c 	bl	80058b0 <radio_rand1>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <initJoinLoop+0x64>)
 800265e:	fba3 1302 	umull	r1, r3, r3, r2
 8002662:	0859      	lsrs	r1, r3, #1
 8002664:	460b      	mov	r3, r1
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	440b      	add	r3, r1
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <initJoinLoop+0x68>)
 8002670:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
#endif
    LMIC.adrTxPow = 14;
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <initJoinLoop+0x68>)
 8002676:	220e      	movs	r2, #14
 8002678:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 800267c:	2105      	movs	r1, #5
 800267e:	2000      	movs	r0, #0
 8002680:	f7ff fd2c 	bl	80020dc <setDrJoin>
    initDefaultChannels(1);
 8002684:	2001      	movs	r0, #1
 8002686:	f7ff fd6b 	bl	8002160 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <initJoinLoop+0x68>)
 800268c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <initJoinLoop+0x4c>
 8002698:	f7fe ff0c 	bl	80014b4 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <initJoinLoop+0x68>)
 800269e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80026a0:	2008      	movs	r0, #8
 80026a2:	f7ff fcaf 	bl	8002004 <rndDelay>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4423      	add	r3, r4
 80026aa:	4a03      	ldr	r2, [pc, #12]	; (80026b8 <initJoinLoop+0x68>)
 80026ac:	6013      	str	r3, [r2, #0]
}
 80026ae:	bf00      	nop
 80026b0:	bd98      	pop	{r3, r4, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	aaaaaaab 	.word	0xaaaaaaab
 80026b8:	20000138 	.word	0x20000138

080026bc <nextJoinState>:


static ostime_t nextJoinState (void) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <nextJoinState+0xcc>)
 80026c8:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80026cc:	3301      	adds	r3, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <nextJoinState+0xcc>)
 80026d2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <nextJoinState+0xcc>)
 80026d8:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d103      	bne.n	80026e8 <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <nextJoinState+0xcc>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <nextJoinState+0xcc>)
 80026ea:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80026ee:	3301      	adds	r3, #1
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b25      	ldr	r3, [pc, #148]	; (8002788 <nextJoinState+0xcc>)
 80026f4:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <nextJoinState+0xcc>)
 80026fa:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d112      	bne.n	800272c <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <nextJoinState+0xcc>)
 8002708:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8002710:	2301      	movs	r3, #1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	e00a      	b.n	800272c <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <nextJoinState+0xcc>)
 8002718:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe ff8f 	bl	8001640 <decDR>
 8002722:	4603      	mov	r3, r0
 8002724:	4619      	mov	r1, r3
 8002726:	2001      	movs	r0, #1
 8002728:	f7ff fcd8 	bl	80020dc <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <nextJoinState+0xcc>)
 800272e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <nextJoinState+0xcc>)
 800273a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 800273e:	f002 fb8d 	bl	8004e5c <os_getTime>
 8002742:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <nextJoinState+0xcc>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	da02      	bge.n	8002756 <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <nextJoinState+0xcc>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <nextJoinState+0xcc>)
 8002758:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800275c:	461a      	mov	r2, r3
 800275e:	23ff      	movs	r3, #255	; 0xff
 8002760:	4113      	asrs	r3, r2
 8002762:	b2db      	uxtb	r3, r3
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fc4d 	bl	8002004 <rndDelay>
 800276a:	4603      	mov	r3, r0
 800276c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8002770:	f503 7380 	add.w	r3, r3, #256	; 0x100
    LMIC.txend = time +
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	4413      	add	r3, r2
 8002778:	4a03      	ldr	r2, [pc, #12]	; (8002788 <nextJoinState+0xcc>)
 800277a:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 800277c:	79fb      	ldrb	r3, [r7, #7]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000138 	.word	0x20000138

0800278c <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    engineUpdate();
 8002794:	f001 fcba 	bl	800410c <engineUpdate>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <reportEvent>:


static void reportEvent (ev_t ev) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 f875 	bl	800489c <onEvent>
    engineUpdate();
 80027b2:	f001 fcab 	bl	800410c <engineUpdate>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <runReset>:


static void runReset (xref2osjob_t osjob) {
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 80027c6:	f001 fe7f 	bl	80044c8 <LMIC_reset>
    LMIC_startJoining();
 80027ca:	f001 fa13 	bl	8003bf4 <LMIC_startJoining>
    reportEvent(EV_RESET);
 80027ce:	200c      	movs	r0, #12
 80027d0:	f7ff ffe6 	bl	80027a0 <reportEvent>
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <stateJustJoined>:

static void stateJustJoined (void) {
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 80027e0:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <stateJustJoined+0xc4>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 80027e8:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <stateJustJoined+0xc4>)
 80027ea:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80027ee:	4a2c      	ldr	r2, [pc, #176]	; (80028a0 <stateJustJoined+0xc4>)
 80027f0:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    LMIC.rejoinCnt   = 0;
 80027f4:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <stateJustJoined+0xc4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 80027fc:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <stateJustJoined+0xc4>)
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <stateJustJoined+0xc4>)
 8002806:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
 800280a:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <stateJustJoined+0xc4>)
 800280c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 8002810:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <stateJustJoined+0xc4>)
 8002812:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <stateJustJoined+0xc4>)
 8002818:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800281c:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <stateJustJoined+0xc4>)
 800281e:	f893 2122 	ldrb.w	r2, [r3, #290]	; 0x122
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <stateJustJoined+0xc4>)
 8002824:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <stateJustJoined+0xc4>)
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <stateJustJoined+0xc4>)
 8002832:	f893 2129 	ldrb.w	r2, [r3, #297]	; 0x129
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <stateJustJoined+0xc4>)
 8002838:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <stateJustJoined+0xc4>)
 800283e:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <stateJustJoined+0xc4>)
 8002844:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8002848:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <stateJustJoined+0xc4>)
 800284a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <stateJustJoined+0xc4>)
 8002850:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    LMIC.pingSetAns  = 0;
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <stateJustJoined+0xc4>)
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    LMIC.upRepeat    = 0;
 800285c:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <stateJustJoined+0xc4>)
 800285e:	2200      	movs	r2, #0
 8002860:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <stateJustJoined+0xc4>)
 8002866:	22f4      	movs	r2, #244	; 0xf4
 8002868:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
    LMIC.dn2Dr       = DR_DNW2;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <stateJustJoined+0xc4>)
 800286e:	2200      	movs	r2, #0
 8002870:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <stateJustJoined+0xc4>)
 8002876:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <stateJustJoined+0xc8>)
 8002878:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <stateJustJoined+0xc4>)
 800287e:	2205      	movs	r2, #5
 8002880:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
    LMIC.ping.freq   = FREQ_PING;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <stateJustJoined+0xc4>)
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <stateJustJoined+0xc8>)
 8002888:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    LMIC.ping.dr     = DR_PING;
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <stateJustJoined+0xc4>)
 800288e:	2203      	movs	r2, #3
 8002890:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000138 	.word	0x20000138
 80028a4:	33ab9d88 	.word	0x33ab9d88

080028a8 <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 80028ae:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <decodeBeacon+0x120>)
 80028b0:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80028b4:	2b11      	cmp	r3, #17
 80028b6:	d001      	beq.n	80028bc <decodeBeacon+0x14>
 80028b8:	f7fe fdfc 	bl	80014b4 <hal_failed>
    xref2u1_t d = LMIC.frame;
 80028bc:	4b43      	ldr	r3, [pc, #268]	; (80029cc <decodeBeacon+0x124>)
 80028be:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_in866
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3307      	adds	r3, #7
 80028c4:	781c      	ldrb	r4, [r3, #0]
 80028c6:	2107      	movs	r1, #7
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7fe ffb0 	bl	800182e <os_crc16>
 80028ce:	4603      	mov	r3, r0
 80028d0:	b2db      	uxtb	r3, r3
    if(
 80028d2:	429c      	cmp	r4, r3
 80028d4:	d001      	beq.n	80028da <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 80028d6:	2300      	movs	r3, #0
 80028d8:	e071      	b.n	80029be <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe ff0c 	bl	80016f8 <os_rlsbf4>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028e6:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 80028e8:	4b37      	ldr	r3, [pc, #220]	; (80029c8 <decodeBeacon+0x120>)
 80028ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d002      	beq.n	80028fa <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295
 80028f8:	e061      	b.n	80029be <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 80028fa:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <decodeBeacon+0x120>)
 80028fc:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002900:	f023 0303 	bic.w	r3, r3, #3
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <decodeBeacon+0x120>)
 8002908:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <decodeBeacon+0x120>)
 800290e:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8002912:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <decodeBeacon+0x120>)
 8002914:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <decodeBeacon+0x120>)
 800291a:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <decodeBeacon+0x120>)
 8002920:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <decodeBeacon+0x120>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800292c:	3b0c      	subs	r3, #12
 800292e:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <decodeBeacon+0x120>)
 8002930:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3303      	adds	r3, #3
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fedd 	bl	80016f8 <os_rlsbf4>
 800293e:	4603      	mov	r3, r0
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <decodeBeacon+0x120>)
 8002942:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <decodeBeacon+0x120>)
 8002948:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <decodeBeacon+0x120>)
 8002954:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	330f      	adds	r3, #15
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe feb6 	bl	80016ce <os_rlsbf2>
 8002962:	4603      	mov	r3, r0
 8002964:	461c      	mov	r4, r3
 8002966:	210f      	movs	r1, #15
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7fe ff60 	bl	800182e <os_crc16>
 800296e:	4603      	mov	r3, r0
 8002970:	429c      	cmp	r4, r3
 8002972:	d001      	beq.n	8002978 <decodeBeacon+0xd0>
        return 1;
 8002974:	2301      	movs	r3, #1
 8002976:	e022      	b.n	80029be <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3308      	adds	r3, #8
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe febb 	bl	80016f8 <os_rlsbf4>
 8002982:	4603      	mov	r3, r0
 8002984:	121b      	asrs	r3, r3, #8
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <decodeBeacon+0x120>)
 8002988:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	330b      	adds	r3, #11
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe feb1 	bl	80016f8 <os_rlsbf4>
 8002996:	4603      	mov	r3, r0
 8002998:	121b      	asrs	r3, r3, #8
 800299a:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <decodeBeacon+0x120>)
 800299c:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7a1a      	ldrb	r2, [r3, #8]
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <decodeBeacon+0x120>)
 80029a6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <decodeBeacon+0x120>)
 80029ac:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <decodeBeacon+0x120>)
 80029b8:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
    return 2;
 80029bc:	2302      	movs	r3, #2
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000138 	.word	0x20000138
 80029cc:	20000280 	.word	0x20000280

080029d0 <decodeFrame>:


static bit_t decodeFrame (void) {
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b09b      	sub	sp, #108	; 0x6c
 80029d4:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 80029d6:	4b98      	ldr	r3, [pc, #608]	; (8002c38 <decodeFrame+0x268>)
 80029d8:	64bb      	str	r3, [r7, #72]	; 0x48
    u1_t hdr    = d[0];
 80029da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    u1_t ftype  = hdr & HDR_FTYPE;
 80029e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029e6:	f023 031f 	bic.w	r3, r3, #31
 80029ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    int  dlen   = LMIC.dataLen;
 80029ee:	4b93      	ldr	r3, [pc, #588]	; (8002c3c <decodeFrame+0x26c>)
 80029f0:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80029f4:	643b      	str	r3, [r7, #64]	; 0x40
    if( dlen < OFF_DAT_OPTS+4 ||
 80029f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f8:	2b0b      	cmp	r3, #11
 80029fa:	dd0d      	ble.n	8002a18 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 80029fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a00:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d107      	bne.n	8002a18 <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8002a08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a0c:	2b60      	cmp	r3, #96	; 0x60
 8002a0e:	d014      	beq.n	8002a3a <decodeFrame+0x6a>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8002a10:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a14:	2ba0      	cmp	r3, #160	; 0xa0
 8002a16:	d010      	beq.n	8002a3a <decodeFrame+0x6a>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 8002a18:	bf00      	nop
 8002a1a:	e008      	b.n	8002a2e <decodeFrame+0x5e>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 8002a1c:	bf00      	nop
 8002a1e:	e006      	b.n	8002a2e <decodeFrame+0x5e>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 8002a20:	bf00      	nop
 8002a22:	e004      	b.n	8002a2e <decodeFrame+0x5e>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 8002a24:	bf00      	nop
 8002a26:	e002      	b.n	8002a2e <decodeFrame+0x5e>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8002a28:	bf00      	nop
 8002a2a:	e000      	b.n	8002a2e <decodeFrame+0x5e>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8002a2c:	bf00      	nop
        LMIC.dataLen = 0;
 8002a2e:	4b83      	ldr	r3, [pc, #524]	; (8002c3c <decodeFrame+0x26c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        return 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e2f6      	b.n	8003028 <decodeFrame+0x658>
    int  fct   = d[OFF_DAT_FCT];
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3c:	3305      	adds	r3, #5
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 8002a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a44:	3301      	adds	r3, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fe56 	bl	80016f8 <os_rlsbf4>
 8002a4c:	63b8      	str	r0, [r7, #56]	; 0x38
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 8002a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a50:	3306      	adds	r3, #6
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fe3b 	bl	80016ce <os_rlsbf2>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	637b      	str	r3, [r7, #52]	; 0x34
    int  olen  = fct & FCT_OPTLEN;
 8002a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8002a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a66:	115b      	asrs	r3, r3, #5
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int  poff  = OFF_DAT_OPTS+olen;
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	3308      	adds	r3, #8
 8002a72:	65fb      	str	r3, [r7, #92]	; 0x5c
    int  pend  = dlen-4;  // MIC
 8002a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a76:	3b04      	subs	r3, #4
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
    if( addr != LMIC.devaddr ) {
 8002a7a:	4b70      	ldr	r3, [pc, #448]	; (8002c3c <decodeFrame+0x26c>)
 8002a7c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d1ca      	bne.n	8002a1c <decodeFrame+0x4c>
    if( poff > pend ) {
 8002a86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	dcc8      	bgt.n	8002a20 <decodeFrame+0x50>
    int port = -1;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	65bb      	str	r3, [r7, #88]	; 0x58
    int replayConf = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	657b      	str	r3, [r7, #84]	; 0x54
    if( pend > poff )
 8002a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	dd07      	ble.n	8002ab0 <decodeFrame+0xe0>
        port = d[poff++];
 8002aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	65bb      	str	r3, [r7, #88]	; 0x58
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 8002ab0:	4b62      	ldr	r3, [pc, #392]	; (8002c3c <decodeFrame+0x26c>)
 8002ab2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ab8:	b291      	uxth	r1, r2
 8002aba:	4a60      	ldr	r2, [pc, #384]	; (8002c3c <decodeFrame+0x26c>)
 8002abc:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	1a8a      	subs	r2, r1, r2
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 8002aca:	4b5c      	ldr	r3, [pc, #368]	; (8002c3c <decodeFrame+0x26c>)
 8002acc:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2301      	movs	r3, #1
 8002ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002adc:	4858      	ldr	r0, [pc, #352]	; (8002c40 <decodeFrame+0x270>)
 8002ade:	f7fe ff19 	bl	8001914 <aes_verifyMic>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d09d      	beq.n	8002a24 <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 8002ae8:	4b54      	ldr	r3, [pc, #336]	; (8002c3c <decodeFrame+0x26c>)
 8002aea:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d219      	bcs.n	8002b28 <decodeFrame+0x158>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 8002af4:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <decodeFrame+0x26c>)
 8002af6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002afa:	461a      	mov	r2, r3
 8002afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afe:	429a      	cmp	r2, r3
 8002b00:	db92      	blt.n	8002a28 <decodeFrame+0x58>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 8002b02:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <decodeFrame+0x26c>)
 8002b04:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d18d      	bne.n	8002a2c <decodeFrame+0x5c>
 8002b10:	4b4a      	ldr	r3, [pc, #296]	; (8002c3c <decodeFrame+0x26c>)
 8002b12:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d088      	beq.n	8002a2c <decodeFrame+0x5c>
 8002b1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b1e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b20:	d184      	bne.n	8002a2c <decodeFrame+0x5c>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	657b      	str	r3, [r7, #84]	; 0x54
 8002b26:	e00e      	b.n	8002b46 <decodeFrame+0x176>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a43      	ldr	r2, [pc, #268]	; (8002c3c <decodeFrame+0x26c>)
 8002b2e:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8002b32:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b36:	2ba0      	cmp	r3, #160	; 0xa0
 8002b38:	d101      	bne.n	8002b3e <decodeFrame+0x16e>
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	e000      	b.n	8002b40 <decodeFrame+0x170>
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4b3e      	ldr	r3, [pc, #248]	; (8002c3c <decodeFrame+0x26c>)
 8002b42:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <decodeFrame+0x26c>)
 8002b48:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <decodeFrame+0x18a>
 8002b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <decodeFrame+0x19c>
        LMIC.opmode |= OP_POLL;
 8002b5a:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <decodeFrame+0x26c>)
 8002b5c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002b60:	f043 0310 	orr.w	r3, r3, #16
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	4b35      	ldr	r3, [pc, #212]	; (8002c3c <decodeFrame+0x26c>)
 8002b68:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8002b6c:	4b33      	ldr	r3, [pc, #204]	; (8002c3c <decodeFrame+0x26c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8002b74:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <decodeFrame+0x26c>)
 8002b76:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8002b7a:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <decodeFrame+0x26c>)
 8002b7c:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8002b80:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <decodeFrame+0x26c>)
 8002b82:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8002b86:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002b8a:	d003      	beq.n	8002b94 <decodeFrame+0x1c4>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <decodeFrame+0x26c>)
 8002b8e:	22f4      	movs	r2, #244	; 0xf4
 8002b90:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <decodeFrame+0x26c>)
 8002b96:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002b9a:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 8002b9e:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <decodeFrame+0x26c>)
 8002ba0:	89db      	ldrh	r3, [r3, #14]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe ffe0 	bl	8001b68 <getSensitivity>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	1ae3      	subs	r3, r4, r3
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db05      	blt.n	8002bc0 <decodeFrame+0x1f0>
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	2bfe      	cmp	r3, #254	; 0xfe
 8002bb8:	bfa8      	it	ge
 8002bba:	23fe      	movge	r3, #254	; 0xfe
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e000      	b.n	8002bc2 <decodeFrame+0x1f2>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	4a1e      	ldr	r2, [pc, #120]	; (8002c3c <decodeFrame+0x26c>)
 8002bc4:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 8002bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bca:	3308      	adds	r3, #8
 8002bcc:	623b      	str	r3, [r7, #32]
    int oidx = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	653b      	str	r3, [r7, #80]	; 0x50
    while( oidx < olen ) {
 8002bd2:	e1b4      	b.n	8002f3e <decodeFrame+0x56e>
        switch( opts[oidx] ) {
 8002bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd6:	6a3a      	ldr	r2, [r7, #32]
 8002bd8:	4413      	add	r3, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	3b02      	subs	r3, #2
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	f200 81ba 	bhi.w	8002f58 <decodeFrame+0x588>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <decodeFrame+0x21c>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002c31 	.word	0x08002c31
 8002bf0:	08002c45 	.word	0x08002c45
 8002bf4:	08002da3 	.word	0x08002da3
 8002bf8:	08002d1f 	.word	0x08002d1f
 8002bfc:	08002d0f 	.word	0x08002d0f
 8002c00:	08002df1 	.word	0x08002df1
 8002c04:	08002f59 	.word	0x08002f59
 8002c08:	08002f59 	.word	0x08002f59
 8002c0c:	08002f59 	.word	0x08002f59
 8002c10:	08002f59 	.word	0x08002f59
 8002c14:	08002f59 	.word	0x08002f59
 8002c18:	08002f59 	.word	0x08002f59
 8002c1c:	08002f59 	.word	0x08002f59
 8002c20:	08002f59 	.word	0x08002f59
 8002c24:	08002f59 	.word	0x08002f59
 8002c28:	08002e7d 	.word	0x08002e7d
 8002c2c:	08002ebf 	.word	0x08002ebf
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8002c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c32:	3303      	adds	r3, #3
 8002c34:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 8002c36:	e182      	b.n	8002f3e <decodeFrame+0x56e>
 8002c38:	20000280 	.word	0x20000280
 8002c3c:	20000138 	.word	0x20000138
 8002c40:	2000022c 	.word	0x2000022c
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8002c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c46:	3301      	adds	r3, #1
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	72bb      	strb	r3, [r7, #10]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8002c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c52:	3302      	adds	r3, #2
 8002c54:	6a3a      	ldr	r2, [r7, #32]
 8002c56:	4413      	add	r3, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe fd38 	bl	80016ce <os_rlsbf2>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	813b      	strh	r3, [r7, #8]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 8002c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c64:	3304      	adds	r3, #4
 8002c66:	6a3a      	ldr	r2, [r7, #32]
 8002c68:	4413      	add	r3, r2
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	f023 030f 	bic.w	r3, r3, #15
 8002c70:	71fb      	strb	r3, [r7, #7]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 8002c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c74:	3304      	adds	r3, #4
 8002c76:	6a3a      	ldr	r2, [r7, #32]
 8002c78:	4413      	add	r3, r2
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	71bb      	strb	r3, [r7, #6]
            oidx += 5;
 8002c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c84:	3305      	adds	r3, #5
 8002c86:	653b      	str	r3, [r7, #80]	; 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 8002c88:	4bb0      	ldr	r3, [pc, #704]	; (8002f4c <decodeFrame+0x57c>)
 8002c8a:	2287      	movs	r2, #135	; 0x87
 8002c8c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 8002c90:	893a      	ldrh	r2, [r7, #8]
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fb84 	bl	80023a4 <mapChannels>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <decodeFrame+0x2e4>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8002ca2:	4baa      	ldr	r3, [pc, #680]	; (8002f4c <decodeFrame+0x57c>)
 8002ca4:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4ba7      	ldr	r3, [pc, #668]	; (8002f4c <decodeFrame+0x57c>)
 8002cb0:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 8002cb4:	7abb      	ldrb	r3, [r7, #10]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	717b      	strb	r3, [r7, #5]
            if( !validDR(dr) ) {
 8002cba:	797b      	ldrb	r3, [r7, #5]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe fcd7 	bl	8001670 <validDR>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d108      	bne.n	8002cda <decodeFrame+0x30a>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8002cc8:	4ba0      	ldr	r3, [pc, #640]	; (8002f4c <decodeFrame+0x57c>)
 8002cca:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002cce:	f023 0302 	bic.w	r3, r3, #2
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b9d      	ldr	r3, [pc, #628]	; (8002f4c <decodeFrame+0x57c>)
 8002cd6:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 8002cda:	4b9c      	ldr	r3, [pc, #624]	; (8002f4c <decodeFrame+0x57c>)
 8002cdc:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce4:	2b07      	cmp	r3, #7
 8002ce6:	d10d      	bne.n	8002d04 <decodeFrame+0x334>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8002ce8:	4a98      	ldr	r2, [pc, #608]	; (8002f4c <decodeFrame+0x57c>)
 8002cea:	79bb      	ldrb	r3, [r7, #6]
 8002cec:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8002cf0:	7abb      	ldrb	r3, [r7, #10]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	4a96      	ldr	r2, [pc, #600]	; (8002f50 <decodeFrame+0x580>)
 8002cf8:	56d2      	ldrsb	r2, [r2, r3]
 8002cfa:	797b      	ldrb	r3, [r7, #5]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	2004      	movs	r0, #4
 8002d00:	f7ff fa00 	bl	8002104 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 8002d04:	4b91      	ldr	r3, [pc, #580]	; (8002f4c <decodeFrame+0x57c>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
            continue;
 8002d0c:	e117      	b.n	8002f3e <decodeFrame+0x56e>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 8002d0e:	4b8f      	ldr	r3, [pc, #572]	; (8002f4c <decodeFrame+0x57c>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
            oidx += 1;
 8002d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d18:	3301      	adds	r3, #1
 8002d1a:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 8002d1c:	e10f      	b.n	8002f3e <decodeFrame+0x56e>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 8002d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d20:	3301      	adds	r3, #1
 8002d22:	6a3a      	ldr	r2, [r7, #32]
 8002d24:	4413      	add	r3, r2
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	74bb      	strb	r3, [r7, #18]
            u4_t freq = convFreq(&opts[oidx+2]);
 8002d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d30:	3302      	adds	r3, #2
 8002d32:	6a3a      	ldr	r2, [r7, #32]
 8002d34:	4413      	add	r3, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fb12 	bl	8002360 <convFreq>
 8002d3c:	60f8      	str	r0, [r7, #12]
            oidx += 5;
 8002d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d40:	3305      	adds	r3, #5
 8002d42:	653b      	str	r3, [r7, #80]	; 0x50
            LMIC.dn2Ans = 0x80;   // answer pending
 8002d44:	4b81      	ldr	r3, [pc, #516]	; (8002f4c <decodeFrame+0x57c>)
 8002d46:	2280      	movs	r2, #128	; 0x80
 8002d48:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( validDR(dr) )
 8002d4c:	7cbb      	ldrb	r3, [r7, #18]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe fc8e 	bl	8001670 <validDR>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <decodeFrame+0x39c>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8002d5a:	4b7c      	ldr	r3, [pc, #496]	; (8002f4c <decodeFrame+0x57c>)
 8002d5c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <decodeFrame+0x57c>)
 8002d68:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( freq != 0 )
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <decodeFrame+0x3b4>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8002d72:	4b76      	ldr	r3, [pc, #472]	; (8002f4c <decodeFrame+0x57c>)
 8002d74:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b73      	ldr	r3, [pc, #460]	; (8002f4c <decodeFrame+0x57c>)
 8002d80:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 8002d84:	4b71      	ldr	r3, [pc, #452]	; (8002f4c <decodeFrame+0x57c>)
 8002d86:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002d8a:	2b83      	cmp	r3, #131	; 0x83
 8002d8c:	f040 80d7 	bne.w	8002f3e <decodeFrame+0x56e>
                LMIC.dn2Dr = dr;
 8002d90:	4a6e      	ldr	r2, [pc, #440]	; (8002f4c <decodeFrame+0x57c>)
 8002d92:	7cbb      	ldrb	r3, [r7, #18]
 8002d94:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
                LMIC.dn2Freq = freq;
 8002d98:	4a6c      	ldr	r2, [pc, #432]	; (8002f4c <decodeFrame+0x57c>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8002da0:	e0cd      	b.n	8002f3e <decodeFrame+0x56e>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8002da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da4:	3301      	adds	r3, #1
 8002da6:	6a3a      	ldr	r2, [r7, #32]
 8002da8:	4413      	add	r3, r2
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	72fb      	strb	r3, [r7, #11]
            oidx += 2;
 8002dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db0:	3302      	adds	r3, #2
 8002db2:	653b      	str	r3, [r7, #80]	; 0x50
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8002db4:	7afb      	ldrb	r3, [r7, #11]
 8002db6:	2bff      	cmp	r3, #255	; 0xff
 8002db8:	d108      	bne.n	8002dcc <decodeFrame+0x3fc>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8002dba:	4b64      	ldr	r3, [pc, #400]	; (8002f4c <decodeFrame+0x57c>)
 8002dbc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	4b61      	ldr	r3, [pc, #388]	; (8002f4c <decodeFrame+0x57c>)
 8002dc8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <decodeFrame+0x57c>)
 8002dd6:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
            LMIC.globalDutyAvail = os_getTime();
 8002dda:	f002 f83f 	bl	8004e5c <os_getTime>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4a5a      	ldr	r2, [pc, #360]	; (8002f4c <decodeFrame+0x57c>)
 8002de2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8002de6:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <decodeFrame+0x57c>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            continue;
 8002dee:	e0a6      	b.n	8002f3e <decodeFrame+0x56e>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8002df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df2:	3301      	adds	r3, #1
 8002df4:	6a3a      	ldr	r2, [r7, #32]
 8002df6:	4413      	add	r3, r2
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	76fb      	strb	r3, [r7, #27]
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 8002dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfe:	3302      	adds	r3, #2
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	4413      	add	r3, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff faab 	bl	8002360 <convFreq>
 8002e0a:	6178      	str	r0, [r7, #20]
            u1_t drs   = opts[oidx+5];  // datarate span
 8002e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0e:	3305      	adds	r3, #5
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	4413      	add	r3, r2
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	74fb      	strb	r3, [r7, #19]
            LMIC.snchAns = 0x80;
 8002e18:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <decodeFrame+0x57c>)
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d026      	beq.n	8002e74 <decodeFrame+0x4a4>
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	b21a      	sxth	r2, r3
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f1c3 030f 	rsb	r3, r3, #15
 8002e40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e44:	fa41 f303 	asr.w	r3, r1, r3
 8002e48:	b21b      	sxth	r3, r3
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	b21b      	sxth	r3, r3
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	7ef8      	ldrb	r0, [r7, #27]
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	6979      	ldr	r1, [r7, #20]
 8002e58:	f7ff fa08 	bl	800226c <LMIC_setupChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8002e62:	4b3a      	ldr	r3, [pc, #232]	; (8002f4c <decodeFrame+0x57c>)
 8002e64:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8002e68:	f043 0303 	orr.w	r3, r3, #3
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <decodeFrame+0x57c>)
 8002e70:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
            oidx += 6;
 8002e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e76:	3306      	adds	r3, #6
 8002e78:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 8002e7a:	e060      	b.n	8002f3e <decodeFrame+0x56e>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 8002e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e7e:	3301      	adds	r3, #1
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	4413      	add	r3, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fa6b 	bl	8002360 <convFreq>
 8002e8a:	61f8      	str	r0, [r7, #28]
            oidx += 4;
 8002e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8e:	3304      	adds	r3, #4
 8002e90:	653b      	str	r3, [r7, #80]	; 0x50
            u1_t flags = 0x80;
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if( freq != 0 ) {
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 8002e9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                LMIC.ping.freq = freq;
 8002eaa:	4a28      	ldr	r2, [pc, #160]	; (8002f4c <decodeFrame+0x57c>)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8002eb2:	4a26      	ldr	r2, [pc, #152]	; (8002f4c <decodeFrame+0x57c>)
 8002eb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002eb8:	f882 3133 	strb.w	r3, [r2, #307]	; 0x133
            continue;
 8002ebc:	e03f      	b.n	8002f3e <decodeFrame+0x56e>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 8002ebe:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <decodeFrame+0x57c>)
 8002ec0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d134      	bne.n	8002f36 <decodeFrame+0x566>
                LMIC.bcnChnl = opts[oidx+3];
 8002ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ece:	3303      	adds	r3, #3
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <decodeFrame+0x57c>)
 8002ed8:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <decodeFrame+0x57c>)
 8002ede:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002ee2:	f043 0302 	orr.w	r3, r3, #2
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <decodeFrame+0x57c>)
 8002eea:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <decodeFrame+0x57c>)
 8002ef0:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <decodeFrame+0x52c>
 8002ef8:	f7fe fadc 	bl	80014b4 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <decodeFrame+0x57c>)
 8002efe:	685c      	ldr	r4, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8002f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f02:	3301      	adds	r3, #1
 8002f04:	6a3a      	ldr	r2, [r7, #32]
 8002f06:	4413      	add	r3, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fbe0 	bl	80016ce <os_rlsbf2>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	461a      	mov	r2, r3
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	18e2      	adds	r2, r4, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <decodeFrame+0x584>)
 8002f1e:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <decodeFrame+0x57c>)
 8002f22:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <decodeFrame+0x57c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 8002f2e:	2101      	movs	r1, #1
 8002f30:	201e      	movs	r0, #30
 8002f32:	f7fe ff25 	bl	8001d80 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8002f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f38:	3304      	adds	r3, #4
 8002f3a:	653b      	str	r3, [r7, #80]	; 0x50
            continue;
 8002f3c:	bf00      	nop
    while( oidx < olen ) {
 8002f3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	429a      	cmp	r2, r3
 8002f44:	f6ff ae46 	blt.w	8002bd4 <decodeFrame+0x204>
 8002f48:	e007      	b.n	8002f5a <decodeFrame+0x58a>
 8002f4a:	bf00      	nop
 8002f4c:	20000138 	.word	0x20000138
 8002f50:	0800a778 	.word	0x0800a778
 8002f54:	ffc181e0 	.word	0xffc181e0
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8002f58:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 8002f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11d      	bne.n	8002f9c <decodeFrame+0x5cc>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 8002f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db1a      	blt.n	8002f9c <decodeFrame+0x5cc>
 8002f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	dd15      	ble.n	8002f9c <decodeFrame+0x5cc>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 8002f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	dc01      	bgt.n	8002f7a <decodeFrame+0x5aa>
 8002f76:	482e      	ldr	r0, [pc, #184]	; (8003030 <decodeFrame+0x660>)
 8002f78:	e000      	b.n	8002f7c <decodeFrame+0x5ac>
 8002f7a:	482e      	ldr	r0, [pc, #184]	; (8003034 <decodeFrame+0x664>)
 8002f7c:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <decodeFrame+0x668>)
 8002f7e:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 8002f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f86:	4413      	add	r3, r2
 8002f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f8c:	1a8a      	subs	r2, r1, r2
 8002f8e:	9201      	str	r2, [sp, #4]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2301      	movs	r3, #1
 8002f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f96:	4621      	mov	r1, r4
 8002f98:	f7fe fd66 	bl	8001a68 <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <decodeFrame+0x668>)
 8002fa2:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d010      	beq.n	8002fcc <decodeFrame+0x5fc>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8002faa:	4b23      	ldr	r3, [pc, #140]	; (8003038 <decodeFrame+0x668>)
 8002fac:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb4:	2a00      	cmp	r2, #0
 8002fb6:	d002      	beq.n	8002fbe <decodeFrame+0x5ee>
 8002fb8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002fbc:	e000      	b.n	8002fc0 <decodeFrame+0x5f0>
 8002fbe:	2240      	movs	r2, #64	; 0x40
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <decodeFrame+0x668>)
 8002fc8:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145

    if( port < 0 ) {
 8002fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	da12      	bge.n	8002ff8 <decodeFrame+0x628>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <decodeFrame+0x668>)
 8002fd4:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8002fd8:	f043 0320 	orr.w	r3, r3, #32
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <decodeFrame+0x668>)
 8002fe0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        LMIC.dataBeg = poff;
 8002fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <decodeFrame+0x668>)
 8002fea:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
        LMIC.dataLen = 0;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <decodeFrame+0x668>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8002ff6:	e016      	b.n	8003026 <decodeFrame+0x656>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <decodeFrame+0x668>)
 8002ffa:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8002ffe:	f043 0310 	orr.w	r3, r3, #16
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <decodeFrame+0x668>)
 8003006:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        LMIC.dataBeg = poff;
 800300a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <decodeFrame+0x668>)
 8003010:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
        LMIC.dataLen = pend-poff;
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	b2da      	uxtb	r2, r3
 8003018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301a:	b2db      	uxtb	r3, r3
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	b2da      	uxtb	r2, r3
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <decodeFrame+0x668>)
 8003022:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    }
    return 1;
 8003026:	2301      	movs	r3, #1
}
 8003028:	4618      	mov	r0, r3
 800302a:	3764      	adds	r7, #100	; 0x64
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}
 8003030:	2000022c 	.word	0x2000022c
 8003034:	2000023c 	.word	0x2000023c
 8003038:	20000138 	.word	0x20000138

0800303c <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <setupRx2+0x3c>)
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <setupRx2+0x3c>)
 800304a:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fae2 	bl	8001618 <dndr2rps>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	4b07      	ldr	r3, [pc, #28]	; (8003078 <setupRx2+0x3c>)
 800305a:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <setupRx2+0x3c>)
 800305e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003062:	4a05      	ldr	r2, [pc, #20]	; (8003078 <setupRx2+0x3c>)
 8003064:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <setupRx2+0x3c>)
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    os_radio(RADIO_RX);
 800306e:	2002      	movs	r0, #2
 8003070:	f002 fd1a 	bl	8005aa8 <os_radio>
}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000138 	.word	0x20000138

0800307c <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <schedRx2+0x44>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	18d1      	adds	r1, r2, r3
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <schedRx2+0x44>)
 8003090:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8003094:	461a      	mov	r2, r3
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <schedRx2+0x48>)
 8003098:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	4a06      	ldr	r2, [pc, #24]	; (80030c0 <schedRx2+0x44>)
 80030a6:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <schedRx2+0x44>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	3b40      	subs	r3, #64	; 0x40
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	4805      	ldr	r0, [pc, #20]	; (80030c8 <schedRx2+0x4c>)
 80030b4:	f001 ff3c 	bl	8004f30 <os_setTimedCallback>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000138 	.word	0x20000138
 80030c4:	0800a7ac 	.word	0x0800a7ac
 80030c8:	2000014c 	.word	0x2000014c

080030cc <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 80030d4:	4b0d      	ldr	r3, [pc, #52]	; (800310c <setupRx1+0x40>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <setupRx1+0x40>)
 80030de:	89db      	ldrh	r3, [r3, #14]
 80030e0:	2101      	movs	r1, #1
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fa4a 	bl	800157c <setNocrc>
 80030e8:	4603      	mov	r3, r0
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b07      	ldr	r3, [pc, #28]	; (800310c <setupRx1+0x40>)
 80030ee:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <setupRx1+0x40>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.osjob.func = func;
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <setupRx1+0x40>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 80030fe:	2002      	movs	r0, #2
 8003100:	f002 fcd2 	bl	8005aa8 <os_radio>
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000138 	.word	0x20000138

08003110 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 800311a:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <txDone+0x94>)
 800311c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003120:	461a      	mov	r2, r3
 8003122:	f240 6302 	movw	r3, #1538	; 0x602
 8003126:	4013      	ands	r3, r2
 8003128:	f240 4202 	movw	r2, #1026	; 0x402
 800312c:	4293      	cmp	r3, r2
 800312e:	d10b      	bne.n	8003148 <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8003130:	481d      	ldr	r0, [pc, #116]	; (80031a8 <txDone+0x98>)
 8003132:	f7fe feab 	bl	8001e8c <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <txDone+0x94>)
 8003138:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800313c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003140:	b29a      	uxth	r2, r3
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <txDone+0x94>)
 8003144:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_in866)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <txDone+0x94>)
 800314a:	7c1b      	ldrb	r3, [r3, #16]
 800314c:	2b07      	cmp	r3, #7
 800314e:	d10a      	bne.n	8003166 <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <txDone+0x94>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	3b05      	subs	r3, #5
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <txDone+0x94>)
 800315c:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <txDone+0x94>)
 8003160:	2208      	movs	r2, #8
 8003162:	741a      	strb	r2, [r3, #16]
 8003164:	e012      	b.n	800318c <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <txDone+0x94>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	18d1      	adds	r1, r2, r3
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <txDone+0x94>)
 8003170:	7c5b      	ldrb	r3, [r3, #17]
 8003172:	461a      	mov	r2, r3
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <txDone+0x9c>)
 8003176:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	440b      	add	r3, r1
 8003182:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <txDone+0x94>)
 8003184:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <txDone+0x94>)
 8003188:	2205      	movs	r2, #5
 800318a:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <txDone+0x94>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	3b40      	subs	r3, #64	; 0x40
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	4806      	ldr	r0, [pc, #24]	; (80031b0 <txDone+0xa0>)
 8003198:	f001 feca 	bl	8004f30 <os_setTimedCallback>
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000138 	.word	0x20000138
 80031a8:	2000026c 	.word	0x2000026c
 80031ac:	0800a7ac 	.word	0x0800a7ac
 80031b0:	2000014c 	.word	0x2000014c

080031b4 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 80031bc:	2008      	movs	r0, #8
 80031be:	f7ff faef 	bl	80027a0 <reportEvent>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <processJoinAccept>:


static bit_t processJoinAccept (void) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 80031d2:	4b9b      	ldr	r3, [pc, #620]	; (8003440 <processJoinAccept+0x274>)
 80031d4:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d106      	bne.n	80031ea <processJoinAccept+0x1e>
 80031dc:	4b98      	ldr	r3, [pc, #608]	; (8003440 <processJoinAccept+0x274>)
 80031de:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <processJoinAccept+0x1e>
 80031e6:	f7fe f965 	bl	80014b4 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 80031ea:	4b95      	ldr	r3, [pc, #596]	; (8003440 <processJoinAccept+0x274>)
 80031ec:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <processJoinAccept+0x30>
 80031f8:	f7fe f95c 	bl	80014b4 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 80031fc:	4b90      	ldr	r3, [pc, #576]	; (8003440 <processJoinAccept+0x274>)
 80031fe:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003202:	2b00      	cmp	r3, #0
 8003204:	d14c      	bne.n	80032a0 <processJoinAccept+0xd4>
      nojoinframe:
 8003206:	bf00      	nop
 8003208:	e000      	b.n	800320c <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 800320a:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 800320c:	4b8c      	ldr	r3, [pc, #560]	; (8003440 <processJoinAccept+0x274>)
 800320e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d123      	bne.n	8003262 <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 800321a:	4b89      	ldr	r3, [pc, #548]	; (8003440 <processJoinAccept+0x274>)
 800321c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <processJoinAccept+0x60>
 8003228:	f7fe f944 	bl	80014b4 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 800322c:	4b84      	ldr	r3, [pc, #528]	; (8003440 <processJoinAccept+0x274>)
 800322e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003236:	b29a      	uxth	r2, r3
 8003238:	4b81      	ldr	r3, [pc, #516]	; (8003440 <processJoinAccept+0x274>)
 800323a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            if( LMIC.rejoinCnt < 10 )
 800323e:	4b80      	ldr	r3, [pc, #512]	; (8003440 <processJoinAccept+0x274>)
 8003240:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003244:	2b09      	cmp	r3, #9
 8003246:	d807      	bhi.n	8003258 <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 8003248:	4b7d      	ldr	r3, [pc, #500]	; (8003440 <processJoinAccept+0x274>)
 800324a:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800324e:	3301      	adds	r3, #1
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b7b      	ldr	r3, [pc, #492]	; (8003440 <processJoinAccept+0x274>)
 8003254:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
            reportEvent(EV_REJOIN_FAILED);
 8003258:	2009      	movs	r0, #9
 800325a:	f7ff faa1 	bl	80027a0 <reportEvent>
            return 1;
 800325e:	2301      	movs	r3, #1
 8003260:	e0e9      	b.n	8003436 <processJoinAccept+0x26a>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003262:	4b77      	ldr	r3, [pc, #476]	; (8003440 <processJoinAccept+0x274>)
 8003264:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326c:	b29a      	uxth	r2, r3
 800326e:	4b74      	ldr	r3, [pc, #464]	; (8003440 <processJoinAccept+0x274>)
 8003270:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        ostime_t delay = nextJoinState();
 8003274:	f7ff fa22 	bl	80026bc <nextJoinState>
 8003278:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800327a:	f001 fdef 	bl	8004e5c <os_getTime>
 800327e:	4602      	mov	r2, r0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <processJoinAccept+0xc6>
 800328e:	4b6d      	ldr	r3, [pc, #436]	; (8003444 <processJoinAccept+0x278>)
 8003290:	e000      	b.n	8003294 <processJoinAccept+0xc8>
 8003292:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <processJoinAccept+0x27c>)
 8003294:	461a      	mov	r2, r3
 8003296:	486d      	ldr	r0, [pc, #436]	; (800344c <processJoinAccept+0x280>)
 8003298:	f001 fe4a 	bl	8004f30 <os_setTimedCallback>
        return 1;
 800329c:	2301      	movs	r3, #1
 800329e:	e0ca      	b.n	8003436 <processJoinAccept+0x26a>
    u1_t hdr  = LMIC.frame[0];
 80032a0:	4b67      	ldr	r3, [pc, #412]	; (8003440 <processJoinAccept+0x274>)
 80032a2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80032a6:	757b      	strb	r3, [r7, #21]
    u1_t dlen = LMIC.dataLen;
 80032a8:	4b65      	ldr	r3, [pc, #404]	; (8003440 <processJoinAccept+0x274>)
 80032aa:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80032ae:	75fb      	strb	r3, [r7, #23]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	3b04      	subs	r3, #4
 80032b4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80032b8:	4a61      	ldr	r2, [pc, #388]	; (8003440 <processJoinAccept+0x274>)
 80032ba:	4413      	add	r3, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fa1b 	bl	80016f8 <os_rlsbf4>
 80032c2:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	2b11      	cmp	r3, #17
 80032c8:	d002      	beq.n	80032d0 <processJoinAccept+0x104>
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	2b21      	cmp	r3, #33	; 0x21
 80032ce:	d104      	bne.n	80032da <processJoinAccept+0x10e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 80032d0:	7d7b      	ldrb	r3, [r7, #21]
 80032d2:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d00b      	beq.n	80032f2 <processJoinAccept+0x126>
      badframe:
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <processJoinAccept+0x114>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 80032de:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 80032e0:	4b57      	ldr	r3, [pc, #348]	; (8003440 <processJoinAccept+0x274>)
 80032e2:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d08d      	beq.n	800320a <processJoinAccept+0x3e>
            return 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e0a1      	b.n	8003436 <processJoinAccept+0x26a>
    aes_encrypt(LMIC.frame+1, dlen-1);
 80032f2:	4a57      	ldr	r2, [pc, #348]	; (8003450 <processJoinAccept+0x284>)
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f7fe fb9e 	bl	8001a3c <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	3b04      	subs	r3, #4
 8003304:	4619      	mov	r1, r3
 8003306:	4853      	ldr	r0, [pc, #332]	; (8003454 <processJoinAccept+0x288>)
 8003308:	f7fe fb76 	bl	80019f8 <aes_verifyMic0>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0e5      	beq.n	80032de <processJoinAccept+0x112>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 8003312:	4b51      	ldr	r3, [pc, #324]	; (8003458 <processJoinAccept+0x28c>)
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe f9ef 	bl	80016f8 <os_rlsbf4>
 800331a:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 800331c:	4a48      	ldr	r2, [pc, #288]	; (8003440 <processJoinAccept+0x274>)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8003324:	484d      	ldr	r0, [pc, #308]	; (800345c <processJoinAccept+0x290>)
 8003326:	f7fe f9e7 	bl	80016f8 <os_rlsbf4>
 800332a:	4603      	mov	r3, r0
 800332c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003330:	4a43      	ldr	r2, [pc, #268]	; (8003440 <processJoinAccept+0x274>)
 8003332:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 8003336:	2000      	movs	r0, #0
 8003338:	f7fe ff12 	bl	8002160 <initDefaultChannels>
#endif

#if defined(CFG_in866)
   initDefaultChannels(0);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fe ff0f 	bl	8002160 <initDefaultChannels>
#endif


    if( dlen > LEN_JA ) {
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	2b11      	cmp	r3, #17
 8003346:	d920      	bls.n	800338a <processJoinAccept+0x1be>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8003348:	230d      	movs	r3, #13
 800334a:	75fb      	strb	r3, [r7, #23]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 800334c:	2303      	movs	r3, #3
 800334e:	75bb      	strb	r3, [r7, #22]
 8003350:	e018      	b.n	8003384 <processJoinAccept+0x1b8>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003358:	4a39      	ldr	r2, [pc, #228]	; (8003440 <processJoinAccept+0x274>)
 800335a:	4413      	add	r3, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe ffff 	bl	8002360 <convFreq>
 8003362:	60b8      	str	r0, [r7, #8]
            if( freq )
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d006      	beq.n	8003378 <processJoinAccept+0x1ac>
                LMIC_setupChannel(chidx, freq, 0, -1);
 800336a:	7db8      	ldrb	r0, [r7, #22]
 800336c:	f04f 33ff 	mov.w	r3, #4294967295
 8003370:	2200      	movs	r2, #0
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	f7fe ff7a 	bl	800226c <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 8003378:	7dbb      	ldrb	r3, [r7, #22]
 800337a:	3301      	adds	r3, #1
 800337c:	75bb      	strb	r3, [r7, #22]
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	3303      	adds	r3, #3
 8003382:	75fb      	strb	r3, [r7, #23]
 8003384:	7dbb      	ldrb	r3, [r7, #22]
 8003386:	2b07      	cmp	r3, #7
 8003388:	d9e3      	bls.n	8003352 <processJoinAccept+0x186>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 800338a:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <processJoinAccept+0x274>)
 800338c:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8003390:	3b01      	subs	r3, #1
 8003392:	b298      	uxth	r0, r3
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <processJoinAccept+0x294>)
 8003396:	4a33      	ldr	r2, [pc, #204]	; (8003464 <processJoinAccept+0x298>)
 8003398:	492d      	ldr	r1, [pc, #180]	; (8003450 <processJoinAccept+0x284>)
 800339a:	f7fe fba9 	bl	8001af0 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 800339e:	4b28      	ldr	r3, [pc, #160]	; (8003440 <processJoinAccept+0x274>)
 80033a0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80033a4:	f003 0324 	and.w	r3, r3, #36	; 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <processJoinAccept+0x1e4>
 80033ac:	f7fe f882 	bl	80014b4 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 80033b0:	4b23      	ldr	r3, [pc, #140]	; (8003440 <processJoinAccept+0x274>)
 80033b2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00e      	beq.n	80033dc <processJoinAccept+0x210>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <processJoinAccept+0x274>)
 80033c0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80033c4:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <processJoinAccept+0x274>)
 80033c6:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe f965 	bl	800169c <lowerDR>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <processJoinAccept+0x274>)
 80033d8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 80033dc:	4b18      	ldr	r3, [pc, #96]	; (8003440 <processJoinAccept+0x274>)
 80033de:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80033e2:	f423 7329 	bic.w	r3, r3, #676	; 0x2a4
 80033e6:	f023 0302 	bic.w	r3, r3, #2
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <processJoinAccept+0x274>)
 80033ee:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.txCnt = 0;
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <processJoinAccept+0x274>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    stateJustJoined();
 80033fa:	f7ff f9ef 	bl	80027dc <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <processJoinAccept+0x274>)
 8003400:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <processJoinAccept+0x274>)
 800340c:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <processJoinAccept+0x274>)
 8003412:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <processJoinAccept+0x274>)
 8003418:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 800341c:	4b08      	ldr	r3, [pc, #32]	; (8003440 <processJoinAccept+0x274>)
 800341e:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <processJoinAccept+0x262>
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <processJoinAccept+0x274>)
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    reportEvent(EV_JOINED);
 800342e:	2006      	movs	r0, #6
 8003430:	f7ff f9b6 	bl	80027a0 <reportEvent>
    return 1;
 8003434:	2301      	movs	r3, #1
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000138 	.word	0x20000138
 8003444:	080031b5 	.word	0x080031b5
 8003448:	0800278d 	.word	0x0800278d
 800344c:	2000014c 	.word	0x2000014c
 8003450:	20000281 	.word	0x20000281
 8003454:	20000280 	.word	0x20000280
 8003458:	20000287 	.word	0x20000287
 800345c:	20000284 	.word	0x20000284
 8003460:	2000023c 	.word	0x2000023c
 8003464:	2000022c 	.word	0x2000022c

08003468 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <processRx2Jacc+0x28>)
 8003472:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <processRx2Jacc+0x28>)
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    processJoinAccept();
 8003482:	f7ff fea3 	bl	80031cc <processJoinAccept>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000138 	.word	0x20000138

08003494 <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <setupRx2Jacc+0x1c>)
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <setupRx2Jacc+0x20>)
 80034a0:	61da      	str	r2, [r3, #28]
    setupRx2();
 80034a2:	f7ff fdcb 	bl	800303c <setupRx2>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000138 	.word	0x20000138
 80034b4:	08003469 	.word	0x08003469

080034b8 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <processRx1Jacc+0x2c>)
 80034c2:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <processRx1Jacc+0x1c>
 80034ca:	f7ff fe7f 	bl	80031cc <processJoinAccept>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 80034d4:	4904      	ldr	r1, [pc, #16]	; (80034e8 <processRx1Jacc+0x30>)
 80034d6:	4805      	ldr	r0, [pc, #20]	; (80034ec <processRx1Jacc+0x34>)
 80034d8:	f7ff fdd0 	bl	800307c <schedRx2>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000138 	.word	0x20000138
 80034e8:	08003495 	.word	0x08003495
 80034ec:	0002ee00 	.word	0x0002ee00

080034f0 <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 80034f8:	4803      	ldr	r0, [pc, #12]	; (8003508 <setupRx1Jacc+0x18>)
 80034fa:	f7ff fde7 	bl	80030cc <setupRx1>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	080034b9 	.word	0x080034b9

0800350c <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8003514:	4903      	ldr	r1, [pc, #12]	; (8003524 <jreqDone+0x18>)
 8003516:	4804      	ldr	r0, [pc, #16]	; (8003528 <jreqDone+0x1c>)
 8003518:	f7ff fdfa 	bl	8003110 <txDone>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	080034f1 	.word	0x080034f1
 8003528:	00027100 	.word	0x00027100

0800352c <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    processDnData();
 8003534:	f000 fbc6 	bl	8003cc4 <processDnData>
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <processRx2DnData+0x48>)
 800354a:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 800354e:	2b00      	cmp	r3, #0
 8003550:	d115      	bne.n	800357e <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <processRx2DnData+0x48>)
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 800355a:	f001 fc7f 	bl	8004e5c <os_getTime>
 800355e:	4603      	mov	r3, r0
 8003560:	f503 34bb 	add.w	r4, r3, #95744	; 0x17600
 8003564:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8003568:	2002      	movs	r0, #2
 800356a:	f7fe fd4b 	bl	8002004 <rndDelay>
 800356e:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 8003570:	4423      	add	r3, r4
 8003572:	4a06      	ldr	r2, [pc, #24]	; (800358c <processRx2DnData+0x4c>)
 8003574:	4619      	mov	r1, r3
 8003576:	4806      	ldr	r0, [pc, #24]	; (8003590 <processRx2DnData+0x50>)
 8003578:	f001 fcda 	bl	8004f30 <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 800357c:	e001      	b.n	8003582 <processRx2DnData+0x42>
    }
    processDnData();
 800357e:	f000 fba1 	bl	8003cc4 <processDnData>
}
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bd90      	pop	{r4, r7, pc}
 8003588:	20000138 	.word	0x20000138
 800358c:	0800352d 	.word	0x0800352d
 8003590:	2000014c 	.word	0x2000014c

08003594 <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <setupRx2DnData+0x1c>)
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <setupRx2DnData+0x20>)
 80035a0:	61da      	str	r2, [r3, #28]
    setupRx2();
 80035a2:	f7ff fd4b 	bl	800303c <setupRx2>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000138 	.word	0x20000138
 80035b4:	08003541 	.word	0x08003541

080035b8 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <processRx1DnData+0x40>)
 80035c2:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <processRx1DnData+0x1c>
 80035ca:	f000 fb7b 	bl	8003cc4 <processDnData>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10c      	bne.n	80035ee <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 80035d4:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <processRx1DnData+0x40>)
 80035d6:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80035da:	3301      	adds	r3, #1
 80035dc:	461a      	mov	r2, r3
 80035de:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	4905      	ldr	r1, [pc, #20]	; (80035fc <processRx1DnData+0x44>)
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fd47 	bl	800307c <schedRx2>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000138 	.word	0x20000138
 80035fc:	08003595 	.word	0x08003595

08003600 <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 8003608:	4803      	ldr	r0, [pc, #12]	; (8003618 <setupRx1DnData+0x18>)
 800360a:	f7ff fd5f 	bl	80030cc <setupRx1>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	080035b9 	.word	0x080035b9

0800361c <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8003624:	4b07      	ldr	r3, [pc, #28]	; (8003644 <updataDone+0x28>)
 8003626:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800362a:	461a      	mov	r2, r3
 800362c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	4904      	ldr	r1, [pc, #16]	; (8003648 <updataDone+0x2c>)
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fd6a 	bl	8003110 <txDone>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000138 	.word	0x20000138
 8003648:	08003601 	.word	0x08003601

0800364c <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b087      	sub	sp, #28
 8003650:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 8003652:	4ba3      	ldr	r3, [pc, #652]	; (80038e0 <buildDataFrame+0x294>)
 8003654:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003658:	f003 0318 	and.w	r3, r3, #24
 800365c:	2b10      	cmp	r3, #16
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <buildDataFrame+0x2a>
 800366e:	4b9c      	ldr	r3, [pc, #624]	; (80038e0 <buildDataFrame+0x294>)
 8003670:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003674:	e000      	b.n	8003678 <buildDataFrame+0x2c>
 8003676:	2300      	movs	r3, #0
 8003678:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 800367a:	2308      	movs	r3, #8
 800367c:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 800367e:	4b98      	ldr	r3, [pc, #608]	; (80038e0 <buildDataFrame+0x294>)
 8003680:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003684:	461a      	mov	r2, r3
 8003686:	f240 4302 	movw	r3, #1026	; 0x402
 800368a:	4013      	ands	r3, r2
 800368c:	f240 4202 	movw	r2, #1026	; 0x402
 8003690:	4293      	cmp	r3, r2
 8003692:	d11c      	bne.n	80036ce <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 8003694:	4a92      	ldr	r2, [pc, #584]	; (80038e0 <buildDataFrame+0x294>)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4413      	add	r3, r2
 800369a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800369e:	2210      	movs	r2, #16
 80036a0:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 80036a2:	4b8f      	ldr	r3, [pc, #572]	; (80038e0 <buildDataFrame+0x294>)
 80036a4:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80036a8:	b25a      	sxtb	r2, r3
 80036aa:	4b8d      	ldr	r3, [pc, #564]	; (80038e0 <buildDataFrame+0x294>)
 80036ac:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	b25b      	sxtb	r3, r3
 80036b4:	4313      	orrs	r3, r2
 80036b6:	b25a      	sxtb	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	3301      	adds	r3, #1
 80036bc:	b2d1      	uxtb	r1, r2
 80036be:	4a88      	ldr	r2, [pc, #544]	; (80038e0 <buildDataFrame+0x294>)
 80036c0:	4413      	add	r3, r2
 80036c2:	460a      	mov	r2, r1
 80036c4:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3302      	adds	r3, #2
 80036cc:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 80036ce:	4b84      	ldr	r3, [pc, #528]	; (80038e0 <buildDataFrame+0x294>)
 80036d0:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 80036d8:	4a81      	ldr	r2, [pc, #516]	; (80038e0 <buildDataFrame+0x294>)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80036e2:	2204      	movs	r2, #4
 80036e4:	701a      	strb	r2, [r3, #0]
        end += 1;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3301      	adds	r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 80036ec:	4b7c      	ldr	r3, [pc, #496]	; (80038e0 <buildDataFrame+0x294>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
    }
    if( LMIC.dn2Ans ) {
 80036f4:	4b7a      	ldr	r3, [pc, #488]	; (80038e0 <buildDataFrame+0x294>)
 80036f6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01a      	beq.n	8003734 <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 80036fe:	4a78      	ldr	r2, [pc, #480]	; (80038e0 <buildDataFrame+0x294>)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4413      	add	r3, r2
 8003704:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003708:	2205      	movs	r2, #5
 800370a:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 800370c:	4b74      	ldr	r3, [pc, #464]	; (80038e0 <buildDataFrame+0x294>)
 800370e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3301      	adds	r3, #1
 8003716:	f002 0203 	and.w	r2, r2, #3
 800371a:	b2d1      	uxtb	r1, r2
 800371c:	4a70      	ldr	r2, [pc, #448]	; (80038e0 <buildDataFrame+0x294>)
 800371e:	4413      	add	r3, r2
 8003720:	460a      	mov	r2, r1
 8003722:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	3302      	adds	r3, #2
 800372a:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 800372c:	4b6c      	ldr	r3, [pc, #432]	; (80038e0 <buildDataFrame+0x294>)
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 8003734:	4b6a      	ldr	r3, [pc, #424]	; (80038e0 <buildDataFrame+0x294>)
 8003736:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 800373a:	2b00      	cmp	r3, #0
 800373c:	d021      	beq.n	8003782 <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 800373e:	4a68      	ldr	r2, [pc, #416]	; (80038e0 <buildDataFrame+0x294>)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4413      	add	r3, r2
 8003744:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003748:	2206      	movs	r2, #6
 800374a:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	1c5c      	adds	r4, r3, #1
 8003750:	f7fe f865 	bl	800181e <os_getBattLevel>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	4b61      	ldr	r3, [pc, #388]	; (80038e0 <buildDataFrame+0x294>)
 800375a:	4423      	add	r3, r4
 800375c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        LMIC.frame[end+2] = LMIC.margin;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	3302      	adds	r3, #2
 8003764:	4a5e      	ldr	r2, [pc, #376]	; (80038e0 <buildDataFrame+0x294>)
 8003766:	f892 1124 	ldrb.w	r1, [r2, #292]	; 0x124
 800376a:	4a5d      	ldr	r2, [pc, #372]	; (80038e0 <buildDataFrame+0x294>)
 800376c:	4413      	add	r3, r2
 800376e:	460a      	mov	r2, r1
 8003770:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 3;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	3303      	adds	r3, #3
 8003778:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 800377a:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <buildDataFrame+0x294>)
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 8003782:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <buildDataFrame+0x294>)
 8003784:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01a      	beq.n	80037c2 <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 800378c:	4a54      	ldr	r2, [pc, #336]	; (80038e0 <buildDataFrame+0x294>)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4413      	add	r3, r2
 8003792:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003796:	2203      	movs	r2, #3
 8003798:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 800379a:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <buildDataFrame+0x294>)
 800379c:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3301      	adds	r3, #1
 80037a4:	f002 0207 	and.w	r2, r2, #7
 80037a8:	b2d1      	uxtb	r1, r2
 80037aa:	4a4d      	ldr	r2, [pc, #308]	; (80038e0 <buildDataFrame+0x294>)
 80037ac:	4413      	add	r3, r2
 80037ae:	460a      	mov	r2, r1
 80037b0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	3302      	adds	r3, #2
 80037b8:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 80037ba:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <buildDataFrame+0x294>)
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <buildDataFrame+0x294>)
 80037c4:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 80037cc:	4a44      	ldr	r2, [pc, #272]	; (80038e0 <buildDataFrame+0x294>)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80037d6:	2212      	movs	r2, #18
 80037d8:	701a      	strb	r2, [r3, #0]
        end += 1;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	3301      	adds	r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 80037e0:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <buildDataFrame+0x294>)
 80037e2:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 80037ea:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <buildDataFrame+0x294>)
 80037ec:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	da03      	bge.n	80037fc <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 80037f4:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <buildDataFrame+0x294>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        LMIC.adrChanged = 0;
 80037fc:	4b38      	ldr	r3, [pc, #224]	; (80038e0 <buildDataFrame+0x294>)
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 8003804:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <buildDataFrame+0x294>)
 8003806:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01a      	beq.n	8003844 <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 800380e:	4a34      	ldr	r2, [pc, #208]	; (80038e0 <buildDataFrame+0x294>)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4413      	add	r3, r2
 8003814:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003818:	2211      	movs	r2, #17
 800381a:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 800381c:	4b30      	ldr	r3, [pc, #192]	; (80038e0 <buildDataFrame+0x294>)
 800381e:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3301      	adds	r3, #1
 8003826:	f002 0201 	and.w	r2, r2, #1
 800382a:	b2d1      	uxtb	r1, r2
 800382c:	4a2c      	ldr	r2, [pc, #176]	; (80038e0 <buildDataFrame+0x294>)
 800382e:	4413      	add	r3, r2
 8003830:	460a      	mov	r2, r1
 8003832:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3302      	adds	r3, #2
 800383a:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 800383c:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <buildDataFrame+0x294>)
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    }
    if( LMIC.snchAns ) {
 8003844:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <buildDataFrame+0x294>)
 8003846:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01a      	beq.n	8003884 <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 800384e:	4a24      	ldr	r2, [pc, #144]	; (80038e0 <buildDataFrame+0x294>)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4413      	add	r3, r2
 8003854:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003858:	2207      	movs	r2, #7
 800385a:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <buildDataFrame+0x294>)
 800385e:	f893 212a 	ldrb.w	r2, [r3, #298]	; 0x12a
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3301      	adds	r3, #1
 8003866:	f002 0203 	and.w	r2, r2, #3
 800386a:	b2d1      	uxtb	r1, r2
 800386c:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <buildDataFrame+0x294>)
 800386e:	4413      	add	r3, r2
 8003870:	460a      	mov	r2, r1
 8003872:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
        end += 2;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	3302      	adds	r3, #2
 800387a:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <buildDataFrame+0x294>)
 800387e:	2200      	movs	r2, #0
 8003880:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b18      	cmp	r3, #24
 8003888:	dd01      	ble.n	800388e <buildDataFrame+0x242>
 800388a:	f7fd fe13 	bl	80014b4 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <buildDataFrame+0x250>
 8003894:	79bb      	ldrb	r3, [r7, #6]
 8003896:	3305      	adds	r3, #5
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e000      	b.n	800389e <buildDataFrame+0x252>
 800389c:	2304      	movs	r3, #4
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	4413      	add	r3, r2
 80038a4:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d905      	bls.n	80038b8 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3304      	adds	r3, #4
 80038b6:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <buildDataFrame+0x294>)
 80038ba:	2240      	movs	r2, #64	; 0x40
 80038bc:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <buildDataFrame+0x294>)
 80038c2:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <buildDataFrame+0x294>)
 80038c8:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	b25b      	sxtb	r3, r3
 80038d2:	4a03      	ldr	r2, [pc, #12]	; (80038e0 <buildDataFrame+0x294>)
 80038d4:	f992 2121 	ldrsb.w	r2, [r2, #289]	; 0x121
 80038d8:	2a00      	cmp	r2, #0
 80038da:	db03      	blt.n	80038e4 <buildDataFrame+0x298>
 80038dc:	2240      	movs	r2, #64	; 0x40
 80038de:	e002      	b.n	80038e6 <buildDataFrame+0x29a>
 80038e0:	20000138 	.word	0x20000138
 80038e4:	2200      	movs	r2, #0
 80038e6:	4313      	orrs	r3, r2
 80038e8:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	3b08      	subs	r3, #8
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	4313      	orrs	r3, r2
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80038fa:	4b40      	ldr	r3, [pc, #256]	; (80039fc <buildDataFrame+0x3b0>)
 80038fc:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 8003900:	4a3f      	ldr	r2, [pc, #252]	; (8003a00 <buildDataFrame+0x3b4>)
 8003902:	4b3e      	ldr	r3, [pc, #248]	; (80039fc <buildDataFrame+0x3b0>)
 8003904:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f7fd ff45 	bl	800179a <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 8003910:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <buildDataFrame+0x3b0>)
 8003912:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 800391a:	4b38      	ldr	r3, [pc, #224]	; (80039fc <buildDataFrame+0x3b0>)
 800391c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003920:	3301      	adds	r3, #1
 8003922:	4a36      	ldr	r2, [pc, #216]	; (80039fc <buildDataFrame+0x3b0>)
 8003924:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 8003928:	4a36      	ldr	r2, [pc, #216]	; (8003a04 <buildDataFrame+0x3b8>)
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <buildDataFrame+0x3b0>)
 800392c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29b      	uxth	r3, r3
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f7fd ff17 	bl	800176c <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 800393e:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <buildDataFrame+0x3b0>)
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

    if( txdata ) {
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d03e      	beq.n	80039ca <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <buildDataFrame+0x3b0>)
 800394e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8003956:	4b29      	ldr	r3, [pc, #164]	; (80039fc <buildDataFrame+0x3b0>)
 8003958:	2280      	movs	r2, #128	; 0x80
 800395a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <buildDataFrame+0x3b0>)
 8003960:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003964:	2b00      	cmp	r3, #0
 8003966:	d103      	bne.n	8003970 <buildDataFrame+0x324>
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <buildDataFrame+0x3b0>)
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 8003970:	4b22      	ldr	r3, [pc, #136]	; (80039fc <buildDataFrame+0x3b0>)
 8003972:	f893 10ba 	ldrb.w	r1, [r3, #186]	; 0xba
 8003976:	4a21      	ldr	r2, [pc, #132]	; (80039fc <buildDataFrame+0x3b0>)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4413      	add	r3, r2
 800397c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003980:	460a      	mov	r2, r1
 8003982:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	3301      	adds	r3, #1
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <buildDataFrame+0x3bc>)
 800398a:	4413      	add	r3, r2
 800398c:	79ba      	ldrb	r2, [r7, #6]
 800398e:	491f      	ldr	r1, [pc, #124]	; (8003a0c <buildDataFrame+0x3c0>)
 8003990:	4618      	mov	r0, r3
 8003992:	f005 fc2d 	bl	80091f0 <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 8003996:	4b19      	ldr	r3, [pc, #100]	; (80039fc <buildDataFrame+0x3b0>)
 8003998:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <buildDataFrame+0x358>
 80039a0:	481b      	ldr	r0, [pc, #108]	; (8003a10 <buildDataFrame+0x3c4>)
 80039a2:	e000      	b.n	80039a6 <buildDataFrame+0x35a>
 80039a4:	481b      	ldr	r0, [pc, #108]	; (8003a14 <buildDataFrame+0x3c8>)
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <buildDataFrame+0x3b0>)
 80039a8:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 80039ac:	4b13      	ldr	r3, [pc, #76]	; (80039fc <buildDataFrame+0x3b0>)
 80039ae:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80039b2:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <buildDataFrame+0x3bc>)
 80039ba:	4413      	add	r3, r2
 80039bc:	79ba      	ldrb	r2, [r7, #6]
 80039be:	9201      	str	r2, [sp, #4]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	4622      	mov	r2, r4
 80039c6:	f7fe f84f 	bl	8001a68 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <buildDataFrame+0x3b0>)
 80039cc:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <buildDataFrame+0x3b0>)
 80039d2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80039d6:	1e5a      	subs	r2, r3, #1
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	3b04      	subs	r3, #4
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <buildDataFrame+0x3bc>)
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	480a      	ldr	r0, [pc, #40]	; (8003a10 <buildDataFrame+0x3c4>)
 80039e6:	f7fd ffc1 	bl	800196c <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 80039ea:	4a04      	ldr	r2, [pc, #16]	; (80039fc <buildDataFrame+0x3b0>)
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	f882 3147 	strb.w	r3, [r2, #327]	; 0x147
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd90      	pop	{r4, r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000138 	.word	0x20000138
 8003a00:	20000281 	.word	0x20000281
 8003a04:	20000286 	.word	0x20000286
 8003a08:	20000280 	.word	0x20000280
 8003a0c:	200001f5 	.word	0x200001f5
 8003a10:	2000022c 	.word	0x2000022c
 8003a14:	2000023c 	.word	0x2000023c

08003a18 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f002 f841 	bl	8005aa8 <os_radio>
    os_clearCallback(&LMIC.osjob);
 8003a26:	4823      	ldr	r0, [pc, #140]	; (8003ab4 <onBcnRx+0x9c>)
 8003a28:	f001 fa3e 	bl	8004ea8 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8003a2c:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <onBcnRx+0xa0>)
 8003a2e:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10c      	bne.n	8003a50 <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <onBcnRx+0xa0>)
 8003a38:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003a3c:	f023 0303 	bic.w	r3, r3, #3
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <onBcnRx+0xa0>)
 8003a44:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f7fe fea9 	bl	80027a0 <reportEvent>
        return;
 8003a4e:	e02d      	b.n	8003aac <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 8003a50:	f7fe ff2a 	bl	80028a8 <decodeBeacon>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	dc0f      	bgt.n	8003a7a <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <onBcnRx+0xa0>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        os_radio(RADIO_RXON);
 8003a62:	2003      	movs	r0, #3
 8003a64:	f002 f820 	bl	8005aa8 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <onBcnRx+0xa0>)
 8003a6a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003a6e:	4a13      	ldr	r2, [pc, #76]	; (8003abc <onBcnRx+0xa4>)
 8003a70:	4619      	mov	r1, r3
 8003a72:	4810      	ldr	r0, [pc, #64]	; (8003ab4 <onBcnRx+0x9c>)
 8003a74:	f001 fa5c 	bl	8004f30 <os_setTimedCallback>
        return;
 8003a78:	e018      	b.n	8003aac <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	200d      	movs	r0, #13
 8003a7e:	f7fe f97f 	bl	8001d80 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <onBcnRx+0xa0>)
 8003a84:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <onBcnRx+0xa0>)
 8003a90:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <onBcnRx+0xa0>)
 8003a96:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003a9a:	f043 0302 	orr.w	r3, r3, #2
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <onBcnRx+0xa0>)
 8003aa2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8003aa6:	2002      	movs	r0, #2
 8003aa8:	f7fe fe7a 	bl	80027a0 <reportEvent>
}
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	2000014c 	.word	0x2000014c
 8003ab8:	20000138 	.word	0x20000138
 8003abc:	08003a19 	.word	0x08003a19

08003ac0 <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <startScan+0xa4>)
 8003ac6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <startScan+0x1c>
 8003ace:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <startScan+0xa4>)
 8003ad0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <startScan+0x20>
 8003adc:	f7fd fcea 	bl	80014b4 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <startScan+0xa4>)
 8003ae2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d137      	bne.n	8003b5e <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8003aee:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <startScan+0xa4>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <startScan+0xa4>)
 8003af8:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 8003afc:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <startScan+0xa4>)
 8003afe:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <startScan+0xa4>)
 8003b04:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 8003b08:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <startScan+0xa4>)
 8003b0a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <startScan+0xa4>)
 8003b10:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <startScan+0xa4>)
 8003b22:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    setBcnRxParams();
 8003b26:	f7fe fd6d 	bl	8002604 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8003b2a:	f001 f997 	bl	8004e5c <os_getTime>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f503 137b 	add.w	r3, r3, #4112384	; 0x3ec000
 8003b34:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <startScan+0xa4>)
 8003b3a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <startScan+0xa4>)
 8003b40:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003b44:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <startScan+0xa4>)
 8003b46:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <startScan+0xa4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a06      	ldr	r2, [pc, #24]	; (8003b68 <startScan+0xa8>)
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4806      	ldr	r0, [pc, #24]	; (8003b6c <startScan+0xac>)
 8003b52:	f001 f9ed 	bl	8004f30 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 8003b56:	2003      	movs	r0, #3
 8003b58:	f001 ffa6 	bl	8005aa8 <os_radio>
 8003b5c:	e000      	b.n	8003b60 <startScan+0xa0>
        return;
 8003b5e:	bf00      	nop
}
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000138 	.word	0x20000138
 8003b68:	08003a19 	.word	0x08003a19
 8003b6c:	2000014c 	.word	0x2000014c

08003b70 <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <buildJoinRequest+0x64>)
 8003b7c:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	79fa      	ldrb	r2, [r7, #7]
 8003b82:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3301      	adds	r3, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fdab 	bl	80046e4 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3309      	adds	r3, #9
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fdba 	bl	800470c <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3311      	adds	r3, #17
 8003b9c:	4a0e      	ldr	r2, [pc, #56]	; (8003bd8 <buildJoinRequest+0x68>)
 8003b9e:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	; 0xf2
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fd fde1 	bl	800176c <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 8003baa:	2113      	movs	r1, #19
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7fd ff05 	bl	80019bc <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <buildJoinRequest+0x68>)
 8003bb4:	2217      	movs	r2, #23
 8003bb6:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    LMIC.devNonce++;
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <buildJoinRequest+0x68>)
 8003bbc:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <buildJoinRequest+0x68>)
 8003bc6:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000280 	.word	0x20000280
 8003bd8:	20000138 	.word	0x20000138

08003bdc <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 8003be4:	2005      	movs	r0, #5
 8003be6:	f7fe fddb 	bl	80027a0 <reportEvent>
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8003bf8:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <LMIC_startJoining+0x88>)
 8003bfa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d138      	bne.n	8003c74 <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c04:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003c08:	f003 0390 	and.w	r3, r3, #144	; 0x90
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <LMIC_startJoining+0x20>
 8003c10:	f7fd fc50 	bl	80014b4 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8003c1c:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c1e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003c22:	f423 53c1 	bic.w	r3, r3, #6176	; 0x1820
 8003c26:	f023 0301 	bic.w	r3, r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c2e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c3c:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c42:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c48:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c4e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
        initJoinLoop();
 8003c52:	f7fe fcfd 	bl	8002650 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c58:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003c5c:	f043 0304 	orr.w	r3, r3, #4
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <LMIC_startJoining+0x88>)
 8003c64:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8003c68:	4905      	ldr	r1, [pc, #20]	; (8003c80 <LMIC_startJoining+0x8c>)
 8003c6a:	4806      	ldr	r0, [pc, #24]	; (8003c84 <LMIC_startJoining+0x90>)
 8003c6c:	f001 f93a 	bl	8004ee4 <os_setCallback>
        return 1;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000138 	.word	0x20000138
 8003c80:	08003bdd 	.word	0x08003bdd
 8003c84:	2000014c 	.word	0x2000014c

08003c88 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <processPingRx+0x38>)
 8003c92:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <processPingRx+0x38>)
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        if( decodeFrame() ) {
 8003ca2:	f7fe fe95 	bl	80029d0 <decodeFrame>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 8003cac:	200d      	movs	r0, #13
 8003cae:	f7fe fd77 	bl	80027a0 <reportEvent>
            return;
 8003cb2:	e001      	b.n	8003cb8 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 8003cb4:	f000 fa2a 	bl	800410c <engineUpdate>
}
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000138 	.word	0x20000138

08003cc4 <processDnData>:


static bit_t processDnData (void) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003cc8:	4b76      	ldr	r3, [pc, #472]	; (8003ea4 <processDnData+0x1e0>)
 8003cca:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <processDnData+0x16>
 8003cd6:	f7fd fbed 	bl	80014b4 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003cda:	4b72      	ldr	r3, [pc, #456]	; (8003ea4 <processDnData+0x1e0>)
 8003cdc:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f040 80ce 	bne.w	8003e82 <processDnData+0x1be>
      norx:
 8003ce6:	bf00      	nop
 8003ce8:	e000      	b.n	8003cec <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8003cea:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 8003cec:	4b6d      	ldr	r3, [pc, #436]	; (8003ea4 <processDnData+0x1e0>)
 8003cee:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d038      	beq.n	8003d68 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 8003cf6:	4b6b      	ldr	r3, [pc, #428]	; (8003ea4 <processDnData+0x1e0>)
 8003cf8:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003cfc:	2b07      	cmp	r3, #7
 8003cfe:	d82e      	bhi.n	8003d5e <processDnData+0x9a>
                LMIC.txCnt += 1;
 8003d00:	4b68      	ldr	r3, [pc, #416]	; (8003ea4 <processDnData+0x1e0>)
 8003d02:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8003d06:	3301      	adds	r3, #1
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4b66      	ldr	r3, [pc, #408]	; (8003ea4 <processDnData+0x1e0>)
 8003d0c:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8003d10:	4b64      	ldr	r3, [pc, #400]	; (8003ea4 <processDnData+0x1e0>)
 8003d12:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003d16:	4a63      	ldr	r2, [pc, #396]	; (8003ea4 <processDnData+0x1e0>)
 8003d18:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4a62      	ldr	r2, [pc, #392]	; (8003ea8 <processDnData+0x1e4>)
 8003d20:	5c52      	ldrb	r2, [r2, r1]
 8003d22:	4611      	mov	r1, r2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fd fcb9 	bl	800169c <lowerDR>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003d30:	4619      	mov	r1, r3
 8003d32:	2002      	movs	r0, #2
 8003d34:	f7fe f9e6 	bl	8002104 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8003d38:	4b5a      	ldr	r3, [pc, #360]	; (8003ea4 <processDnData+0x1e0>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2103      	movs	r1, #3
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe f99e 	bl	8002080 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 8003d44:	4b57      	ldr	r3, [pc, #348]	; (8003ea4 <processDnData+0x1e0>)
 8003d46:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	4b54      	ldr	r3, [pc, #336]	; (8003ea4 <processDnData+0x1e0>)
 8003d52:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
                engineUpdate();
 8003d56:	f000 f9d9 	bl	800410c <engineUpdate>
                return 1;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e09f      	b.n	8003e9e <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8003d5e:	4b51      	ldr	r3, [pc, #324]	; (8003ea4 <processDnData+0x1e0>)
 8003d60:	2260      	movs	r2, #96	; 0x60
 8003d62:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 8003d66:	e003      	b.n	8003d70 <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 8003d68:	4b4e      	ldr	r3, [pc, #312]	; (8003ea4 <processDnData+0x1e0>)
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8003d70:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <processDnData+0x1e0>)
 8003d72:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003d76:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8003d7a:	d009      	beq.n	8003d90 <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 8003d7c:	4b49      	ldr	r3, [pc, #292]	; (8003ea4 <processDnData+0x1e0>)
 8003d7e:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	3301      	adds	r3, #1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	b25a      	sxtb	r2, r3
 8003d8a:	4b46      	ldr	r3, [pc, #280]	; (8003ea4 <processDnData+0x1e0>)
 8003d8c:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 8003d90:	4b44      	ldr	r3, [pc, #272]	; (8003ea4 <processDnData+0x1e0>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8003d98:	4b42      	ldr	r3, [pc, #264]	; (8003ea4 <processDnData+0x1e0>)
 8003d9a:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
 8003d9e:	4b41      	ldr	r3, [pc, #260]	; (8003ea4 <processDnData+0x1e0>)
 8003da0:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8003da4:	e000      	b.n	8003da8 <processDnData+0xe4>
    }
    goto txcomplete;
 8003da6:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8003da8:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <processDnData+0x1e0>)
 8003daa:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003dae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <processDnData+0x1e0>)
 8003db6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8003dba:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <processDnData+0x1e0>)
 8003dbc:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d012      	beq.n	8003dee <processDnData+0x12a>
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <processDnData+0x1e0>)
 8003dca:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 8003dd6:	4b33      	ldr	r3, [pc, #204]	; (8003ea4 <processDnData+0x1e0>)
 8003dd8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <processDnData+0x1e0>)
 8003de4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LINK_ALIVE);
 8003de8:	200f      	movs	r0, #15
 8003dea:	f7fe fcd9 	bl	80027a0 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8003dee:	200a      	movs	r0, #10
 8003df0:	f7fe fcd6 	bl	80027a0 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8003df4:	4b2b      	ldr	r3, [pc, #172]	; (8003ea4 <processDnData+0x1e0>)
 8003df6:	f993 3121 	ldrsb.w	r3, [r3, #289]	; 0x121
 8003dfa:	2b18      	cmp	r3, #24
 8003dfc:	dd1c      	ble.n	8003e38 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8003dfe:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <processDnData+0x1e0>)
 8003e00:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fd fc1b 	bl	8001640 <decDR>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003e10:	4619      	mov	r1, r3
 8003e12:	2003      	movs	r0, #3
 8003e14:	f7fe f976 	bl	8002104 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8003e18:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <processDnData+0x1e0>)
 8003e1a:	220c      	movs	r2, #12
 8003e1c:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8003e20:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <processDnData+0x1e0>)
 8003e22:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003e26:	f443 5381 	orr.w	r3, r3, #4128	; 0x1020
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <processDnData+0x1e0>)
 8003e2e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LINK_DEAD);
 8003e32:	200e      	movs	r0, #14
 8003e34:	f7fe fcb4 	bl	80027a0 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8003e38:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <processDnData+0x1e0>)
 8003e3a:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01d      	beq.n	8003e7e <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8003e42:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <processDnData+0x1e0>)
 8003e44:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 8003e50:	2002      	movs	r0, #2
 8003e52:	f7fe fca5 	bl	80027a0 <reportEvent>
                LMIC.bcninfoTries = 0;
 8003e56:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <processDnData+0x1e0>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8003e5e:	e00e      	b.n	8003e7e <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <processDnData+0x1e0>)
 8003e62:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <processDnData+0x1e0>)
 8003e6c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <processDnData+0x1e0>)
 8003e72:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 8003e7a:	f7ff fe21 	bl	8003ac0 <startScan>
        return 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e00d      	b.n	8003e9e <processDnData+0x1da>
    if( !decodeFrame() ) {
 8003e82:	f7fe fda5 	bl	80029d0 <decodeFrame>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d18c      	bne.n	8003da6 <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <processDnData+0x1e0>)
 8003e8e:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f43f af27 	beq.w	8003cea <processDnData+0x26>
            return 0;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000138 	.word	0x20000138
 8003ea8:	0800a7a0 	.word	0x0800a7a0

08003eac <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 8003eb4:	4b81      	ldr	r3, [pc, #516]	; (80040bc <processBeacon+0x210>)
 8003eb6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003eba:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8003ebc:	4b7f      	ldr	r3, [pc, #508]	; (80040bc <processBeacon+0x210>)
 8003ebe:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003ec2:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8003ec4:	4b7d      	ldr	r3, [pc, #500]	; (80040bc <processBeacon+0x210>)
 8003ec6:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8087 	beq.w	8003fde <processBeacon+0x132>
 8003ed0:	f7fe fcea 	bl	80028a8 <decodeBeacon>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f340 8081 	ble.w	8003fde <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 8003edc:	2304      	movs	r3, #4
 8003ede:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8003eea:	2100      	movs	r1, #0
 8003eec:	200d      	movs	r0, #13
 8003eee:	f7fd ff47 	bl	8001d80 <calcBcnRxWindowFromMillis>
            goto rev;
 8003ef2:	e0d2      	b.n	800409a <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	4b70      	ldr	r3, [pc, #448]	; (80040bc <processBeacon+0x210>)
 8003efa:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8003f0c:	4b6b      	ldr	r3, [pc, #428]	; (80040bc <processBeacon+0x210>)
 8003f0e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d013      	beq.n	8003f3e <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8003f16:	4b69      	ldr	r3, [pc, #420]	; (80040bc <processBeacon+0x210>)
 8003f18:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f22:	4966      	ldr	r1, [pc, #408]	; (80040bc <processBeacon+0x210>)
 8003f24:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	; 0xb4
 8003f28:	1a59      	subs	r1, r3, r1
 8003f2a:	4b64      	ldr	r3, [pc, #400]	; (80040bc <processBeacon+0x210>)
 8003f2c:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003f30:	3301      	adds	r3, #1
 8003f32:	fb91 f3f3 	sdiv	r3, r1, r3
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8003f3e:	4b5f      	ldr	r3, [pc, #380]	; (80040bc <processBeacon+0x210>)
 8003f40:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d127      	bne.n	8003f9c <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 8003f4c:	4b5b      	ldr	r3, [pc, #364]	; (80040bc <processBeacon+0x210>)
 8003f4e:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	8abb      	ldrh	r3, [r7, #20]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8003f5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	da03      	bge.n	8003f6c <processBeacon+0xc0>
 8003f64:	8a7b      	ldrh	r3, [r7, #18]
 8003f66:	425b      	negs	r3, r3
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8003f6c:	4a53      	ldr	r2, [pc, #332]	; (80040bc <processBeacon+0x210>)
 8003f6e:	8a7b      	ldrh	r3, [r7, #18]
 8003f70:	f8a2 30b6 	strh.w	r3, [r2, #182]	; 0xb6
            if( LMIC.maxDriftDiff < diff )
 8003f74:	4b51      	ldr	r3, [pc, #324]	; (80040bc <processBeacon+0x210>)
 8003f76:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8003f7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	dd03      	ble.n	8003f8a <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 8003f82:	4a4e      	ldr	r2, [pc, #312]	; (80040bc <processBeacon+0x210>)
 8003f84:	8a7b      	ldrh	r3, [r7, #18]
 8003f86:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8003f8a:	4b4c      	ldr	r3, [pc, #304]	; (80040bc <processBeacon+0x210>)
 8003f8c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003f90:	f023 0308 	bic.w	r3, r3, #8
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4b49      	ldr	r3, [pc, #292]	; (80040bc <processBeacon+0x210>)
 8003f98:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
        }
        LMIC.drift = drift;
 8003f9c:	4a47      	ldr	r2, [pc, #284]	; (80040bc <processBeacon+0x210>)
 8003f9e:	8abb      	ldrh	r3, [r7, #20]
 8003fa0:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8003fa4:	4b45      	ldr	r3, [pc, #276]	; (80040bc <processBeacon+0x210>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8003fac:	4b43      	ldr	r3, [pc, #268]	; (80040bc <processBeacon+0x210>)
 8003fae:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 8003fb2:	4b42      	ldr	r3, [pc, #264]	; (80040bc <processBeacon+0x210>)
 8003fb4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8003fb8:	4b40      	ldr	r3, [pc, #256]	; (80040bc <processBeacon+0x210>)
 8003fba:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003fbe:	f023 0304 	bic.w	r3, r3, #4
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	4b3d      	ldr	r3, [pc, #244]	; (80040bc <processBeacon+0x210>)
 8003fc6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8003fca:	4b3c      	ldr	r3, [pc, #240]	; (80040bc <processBeacon+0x210>)
 8003fcc:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d14c      	bne.n	8004072 <processBeacon+0x1c6>
 8003fd8:	f7fd fa6c 	bl	80014b4 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8003fdc:	e049      	b.n	8004072 <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8003fe2:	4b36      	ldr	r3, [pc, #216]	; (80040bc <processBeacon+0x210>)
 8003fe4:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8003fe8:	4b34      	ldr	r3, [pc, #208]	; (80040bc <processBeacon+0x210>)
 8003fea:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8003fee:	f5c3 137a 	rsb	r3, r3, #4096000	; 0x3e8000
 8003ff2:	4413      	add	r3, r2
 8003ff4:	4a31      	ldr	r2, [pc, #196]	; (80040bc <processBeacon+0x210>)
 8003ff6:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8003ffa:	4b30      	ldr	r3, [pc, #192]	; (80040bc <processBeacon+0x210>)
 8003ffc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004000:	3380      	adds	r3, #128	; 0x80
 8004002:	4a2e      	ldr	r2, [pc, #184]	; (80040bc <processBeacon+0x210>)
 8004004:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
        LMIC.missedBcns++;
 8004008:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <processBeacon+0x210>)
 800400a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800400e:	3301      	adds	r3, #1
 8004010:	b2da      	uxtb	r2, r3
 8004012:	4b2a      	ldr	r3, [pc, #168]	; (80040bc <processBeacon+0x210>)
 8004014:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8004018:	4b28      	ldr	r3, [pc, #160]	; (80040bc <processBeacon+0x210>)
 800401a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800401e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8004022:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004026:	2104      	movs	r1, #4
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe f829 	bl	8002080 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 800402e:	4b23      	ldr	r3, [pc, #140]	; (80040bc <processBeacon+0x210>)
 8004030:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004034:	2b14      	cmp	r3, #20
 8004036:	d908      	bls.n	800404a <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8004038:	4b20      	ldr	r3, [pc, #128]	; (80040bc <processBeacon+0x210>)
 800403a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800403e:	f043 0320 	orr.w	r3, r3, #32
 8004042:	b29a      	uxth	r2, r3
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <processBeacon+0x210>)
 8004046:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <processBeacon+0x210>)
 800404c:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8004050:	2b64      	cmp	r3, #100	; 0x64
 8004052:	d90f      	bls.n	8004074 <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <processBeacon+0x210>)
 8004056:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800405a:	f423 63c4 	bic.w	r3, r3, #1568	; 0x620
 800405e:	f023 0302 	bic.w	r3, r3, #2
 8004062:	b29a      	uxth	r2, r3
 8004064:	4b15      	ldr	r3, [pc, #84]	; (80040bc <processBeacon+0x210>)
 8004066:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            reportEvent(EV_LOST_TSYNC);
 800406a:	200b      	movs	r0, #11
 800406c:	f7fe fb98 	bl	80027a0 <reportEvent>
            return;
 8004070:	e021      	b.n	80040b6 <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004072:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <processBeacon+0x210>)
 8004076:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800407a:	f503 147a 	add.w	r4, r3, #4096000	; 0x3e8000
 800407e:	2103      	movs	r1, #3
 8004080:	2000      	movs	r0, #0
 8004082:	f7fd fe29 	bl	8001cd8 <calcRxWindow>
 8004086:	4603      	mov	r3, r0
 8004088:	1ae3      	subs	r3, r4, r3
 800408a:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <processBeacon+0x210>)
 800408c:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <processBeacon+0x210>)
 8004092:	7c1a      	ldrb	r2, [r3, #16]
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <processBeacon+0x210>)
 8004096:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <processBeacon+0x210>)
 800409c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80040a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 80040a8:	4805      	ldr	r0, [pc, #20]	; (80040c0 <processBeacon+0x214>)
 80040aa:	f7fd feef 	bl	8001e8c <rxschedInit>
    reportEvent(ev);
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fb75 	bl	80027a0 <reportEvent>
}
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd90      	pop	{r4, r7, pc}
 80040bc:	20000138 	.word	0x20000138
 80040c0:	2000026c 	.word	0x2000026c

080040c4 <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <startRxBcn+0x1c>)
 80040ce:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <startRxBcn+0x20>)
 80040d0:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80040d2:	2002      	movs	r0, #2
 80040d4:	f001 fce8 	bl	8005aa8 <os_radio>
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000138 	.word	0x20000138
 80040e4:	08003ead 	.word	0x08003ead

080040e8 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <startRxPing+0x1c>)
 80040f2:	4a05      	ldr	r2, [pc, #20]	; (8004108 <startRxPing+0x20>)
 80040f4:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 80040f6:	2002      	movs	r0, #2
 80040f8:	f001 fcd6 	bl	8005aa8 <os_radio>
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000138 	.word	0x20000138
 8004108:	08003c89 	.word	0x08003c89

0800410c <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 8004112:	4b90      	ldr	r3, [pc, #576]	; (8004354 <engineUpdate+0x248>)
 8004114:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004118:	f003 03c1 	and.w	r3, r3, #193	; 0xc1
 800411c:	2b00      	cmp	r3, #0
 800411e:	f040 81ab 	bne.w	8004478 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 8004122:	4b8c      	ldr	r3, [pc, #560]	; (8004354 <engineUpdate+0x248>)
 8004124:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <engineUpdate+0x34>
 800412c:	4b89      	ldr	r3, [pc, #548]	; (8004354 <engineUpdate+0x248>)
 800412e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <engineUpdate+0x34>
        LMIC_startJoining();
 800413a:	f7ff fd5b 	bl	8003bf4 <LMIC_startJoining>
        return;
 800413e:	e19e      	b.n	800447e <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 8004140:	f000 fe8c 	bl	8004e5c <os_getTime>
 8004144:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 800414e:	4b81      	ldr	r3, [pc, #516]	; (8004354 <engineUpdate+0x248>)
 8004150:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00f      	beq.n	800417c <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004162:	4b7c      	ldr	r3, [pc, #496]	; (8004354 <engineUpdate+0x248>)
 8004164:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	dd01      	ble.n	8004172 <engineUpdate+0x66>
 800416e:	f7fd f9a1 	bl	80014b4 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8004172:	4b78      	ldr	r3, [pc, #480]	; (8004354 <engineUpdate+0x248>)
 8004174:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004178:	3b40      	subs	r3, #64	; 0x40
 800417a:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 800417c:	4b75      	ldr	r3, [pc, #468]	; (8004354 <engineUpdate+0x248>)
 800417e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004182:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80f2 	beq.w	8004370 <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 800418c:	4b71      	ldr	r3, [pc, #452]	; (8004354 <engineUpdate+0x248>)
 800418e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004192:	f003 0324 	and.w	r3, r3, #36	; 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf14      	ite	ne
 800419a:	2301      	movne	r3, #1
 800419c:	2300      	moveq	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 80041a2:	4b6c      	ldr	r3, [pc, #432]	; (8004354 <engineUpdate+0x248>)
 80041a4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 80041b0:	68b8      	ldr	r0, [r7, #8]
 80041b2:	f7fe f98b 	bl	80024cc <nextTx>
 80041b6:	4603      	mov	r3, r0
 80041b8:	4a66      	ldr	r2, [pc, #408]	; (8004354 <engineUpdate+0x248>)
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b65      	ldr	r3, [pc, #404]	; (8004354 <engineUpdate+0x248>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 80041c2:	4b64      	ldr	r3, [pc, #400]	; (8004354 <engineUpdate+0x248>)
 80041c4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	4b61      	ldr	r3, [pc, #388]	; (8004354 <engineUpdate+0x248>)
 80041d0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80041d4:	e002      	b.n	80041dc <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 80041d6:	4b5f      	ldr	r3, [pc, #380]	; (8004354 <engineUpdate+0x248>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 80041dc:	4b5d      	ldr	r3, [pc, #372]	; (8004354 <engineUpdate+0x248>)
 80041de:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <engineUpdate+0xe8>
 80041e6:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <engineUpdate+0x248>)
 80041e8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <engineUpdate+0xfe>
 80041f4:	4b57      	ldr	r3, [pc, #348]	; (8004354 <engineUpdate+0x248>)
 80041f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	da03      	bge.n	800420a <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 8004202:	4b54      	ldr	r3, [pc, #336]	; (8004354 <engineUpdate+0x248>)
 8004204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004208:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 800420a:	4b52      	ldr	r3, [pc, #328]	; (8004354 <engineUpdate+0x248>)
 800420c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d017      	beq.n	8004248 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <engineUpdate+0x116>
 800421e:	4a4e      	ldr	r2, [pc, #312]	; (8004358 <engineUpdate+0x24c>)
 8004220:	e000      	b.n	8004224 <engineUpdate+0x118>
 8004222:	4a4e      	ldr	r2, [pc, #312]	; (800435c <engineUpdate+0x250>)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	441a      	add	r2, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 800422c:	2b00      	cmp	r3, #0
 800422e:	dd0b      	ble.n	8004248 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8004236:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800423a:	2110      	movs	r1, #16
 800423c:	4618      	mov	r0, r3
 800423e:	f7fd ff1f 	bl	8002080 <txDelay>
            txbeg = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
            goto checkrx;
 8004246:	e09b      	b.n	8004380 <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	3340      	adds	r3, #64	; 0x40
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	da70      	bge.n	8004336 <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004258:	4b3e      	ldr	r3, [pc, #248]	; (8004354 <engineUpdate+0x248>)
 800425a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800425e:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01d      	beq.n	80042a2 <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8004266:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <engineUpdate+0x248>)
 8004268:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00c      	beq.n	800428e <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8004274:	4b37      	ldr	r3, [pc, #220]	; (8004354 <engineUpdate+0x248>)
 8004276:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	4611      	mov	r1, r2
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd fa0c 	bl	800169c <lowerDR>
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 8004288:	23c0      	movs	r3, #192	; 0xc0
 800428a:	73bb      	strb	r3, [r7, #14]
 800428c:	e001      	b.n	8004292 <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 800428e:	2300      	movs	r3, #0
 8004290:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 8004292:	7bbb      	ldrb	r3, [r7, #14]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fc6b 	bl	8003b70 <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 800429a:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <engineUpdate+0x248>)
 800429c:	4a30      	ldr	r2, [pc, #192]	; (8004360 <engineUpdate+0x254>)
 800429e:	61da      	str	r2, [r3, #28]
 80042a0:	e01d      	b.n	80042de <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 80042a2:	4b2c      	ldr	r3, [pc, #176]	; (8004354 <engineUpdate+0x248>)
 80042a4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80042a8:	f113 0f81 	cmn.w	r3, #129	; 0x81
 80042ac:	d907      	bls.n	80042be <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 80042b2:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 80042b4:	492b      	ldr	r1, [pc, #172]	; (8004364 <engineUpdate+0x258>)
 80042b6:	482c      	ldr	r0, [pc, #176]	; (8004368 <engineUpdate+0x25c>)
 80042b8:	f000 fe14 	bl	8004ee4 <os_setCallback>
                    return;
 80042bc:	e0df      	b.n	800447e <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 80042be:	4b25      	ldr	r3, [pc, #148]	; (8004354 <engineUpdate+0x248>)
 80042c0:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <engineUpdate+0x1c8>
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <engineUpdate+0x248>)
 80042ca:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d2:	d0ee      	beq.n	80042b2 <engineUpdate+0x1a6>
                }
                buildDataFrame();
 80042d4:	f7ff f9ba 	bl	800364c <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 80042d8:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <engineUpdate+0x248>)
 80042da:	4a24      	ldr	r2, [pc, #144]	; (800436c <engineUpdate+0x260>)
 80042dc:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd f987 	bl	80015f4 <updr2rps>
 80042e6:	4603      	mov	r3, r0
 80042e8:	461a      	mov	r2, r3
 80042ea:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <engineUpdate+0x248>)
 80042ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f7fd f919 	bl	800152a <setCr>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	4b15      	ldr	r3, [pc, #84]	; (8004354 <engineUpdate+0x248>)
 80042fe:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8004300:	4a14      	ldr	r2, [pc, #80]	; (8004354 <engineUpdate+0x248>)
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <engineUpdate+0x248>)
 8004308:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800430c:	b21b      	sxth	r3, r3
 800430e:	f423 6319 	bic.w	r3, r3, #2448	; 0x990
 8004312:	b21b      	sxth	r3, r3
 8004314:	f443 6308 	orr.w	r3, r3, #2176	; 0x880
 8004318:	b21b      	sxth	r3, r3
 800431a:	b29a      	uxth	r2, r3
 800431c:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <engineUpdate+0x248>)
 800431e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
            updateTx(txbeg);
 8004322:	6938      	ldr	r0, [r7, #16]
 8004324:	f7fe f888 	bl	8002438 <updateTx>
            reportEvent(EV_TXSTART);
 8004328:	2011      	movs	r0, #17
 800432a:	f7fe fa39 	bl	80027a0 <reportEvent>
            os_radio(RADIO_TX);
 800432e:	2001      	movs	r0, #1
 8004330:	f001 fbba 	bl	8005aa8 <os_radio>
            return;
 8004334:	e0a3      	b.n	800447e <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <engineUpdate+0x248>)
 8004338:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 808c 	beq.w	800445e <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d119      	bne.n	8004380 <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	3301      	adds	r3, #1
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	e015      	b.n	8004380 <engineUpdate+0x274>
 8004354:	20000138 	.word	0x20000138
 8004358:	00046500 	.word	0x00046500
 800435c:	0002ee00 	.word	0x0002ee00
 8004360:	0800350d 	.word	0x0800350d
 8004364:	080027bf 	.word	0x080027bf
 8004368:	2000014c 	.word	0x2000014c
 800436c:	0800361d 	.word	0x0800361d
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8004370:	4b44      	ldr	r3, [pc, #272]	; (8004484 <engineUpdate+0x378>)
 8004372:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d07e      	beq.n	800447c <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 800437e:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 8004380:	4b40      	ldr	r3, [pc, #256]	; (8004484 <engineUpdate+0x378>)
 8004382:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800438a:	2b00      	cmp	r3, #0
 800438c:	d041      	beq.n	8004412 <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3340      	adds	r3, #64	; 0x40
 8004392:	4619      	mov	r1, r3
 8004394:	483c      	ldr	r0, [pc, #240]	; (8004488 <engineUpdate+0x37c>)
 8004396:	f7fd fde7 	bl	8001f68 <rxschedNext>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d038      	beq.n	8004412 <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d006      	beq.n	80043b4 <engineUpdate+0x2a8>
 80043a6:	4b37      	ldr	r3, [pc, #220]	; (8004484 <engineUpdate+0x378>)
 80043a8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	db56      	blt.n	8004462 <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 80043b4:	4b33      	ldr	r3, [pc, #204]	; (8004484 <engineUpdate+0x378>)
 80043b6:	f893 2137 	ldrb.w	r2, [r3, #311]	; 0x137
 80043ba:	4b32      	ldr	r3, [pc, #200]	; (8004484 <engineUpdate+0x378>)
 80043bc:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 80043be:	4b31      	ldr	r3, [pc, #196]	; (8004484 <engineUpdate+0x378>)
 80043c0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80043c4:	4a2f      	ldr	r2, [pc, #188]	; (8004484 <engineUpdate+0x378>)
 80043c6:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 80043c8:	4b2e      	ldr	r3, [pc, #184]	; (8004484 <engineUpdate+0x378>)
 80043ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80043ce:	4a2d      	ldr	r2, [pc, #180]	; (8004484 <engineUpdate+0x378>)
 80043d0:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 80043d2:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <engineUpdate+0x378>)
 80043d4:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fd f91d 	bl	8001618 <dndr2rps>
 80043de:	4603      	mov	r3, r0
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b28      	ldr	r3, [pc, #160]	; (8004484 <engineUpdate+0x378>)
 80043e4:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 80043e6:	4b27      	ldr	r3, [pc, #156]	; (8004484 <engineUpdate+0x378>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 80043ee:	4b25      	ldr	r3, [pc, #148]	; (8004484 <engineUpdate+0x378>)
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f113 0f40 	cmn.w	r3, #64	; 0x40
 80043fa:	da01      	bge.n	8004400 <engineUpdate+0x2f4>
 80043fc:	f7fd f85a 	bl	80014b4 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <engineUpdate+0x378>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	3b40      	subs	r3, #64	; 0x40
 8004406:	4a21      	ldr	r2, [pc, #132]	; (800448c <engineUpdate+0x380>)
 8004408:	4619      	mov	r1, r3
 800440a:	4821      	ldr	r0, [pc, #132]	; (8004490 <engineUpdate+0x384>)
 800440c:	f000 fd90 	bl	8004f30 <os_setTimedCallback>
            return;
 8004410:	e035      	b.n	800447e <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <engineUpdate+0x316>
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	db21      	blt.n	8004466 <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 8004422:	f7fe f8ef 	bl	8002604 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 8004426:	4b17      	ldr	r3, [pc, #92]	; (8004484 <engineUpdate+0x378>)
 8004428:	f893 2189 	ldrb.w	r2, [r3, #393]	; 0x189
 800442c:	4b15      	ldr	r3, [pc, #84]	; (8004484 <engineUpdate+0x378>)
 800442e:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 8004430:	4b14      	ldr	r3, [pc, #80]	; (8004484 <engineUpdate+0x378>)
 8004432:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8004436:	4a13      	ldr	r2, [pc, #76]	; (8004484 <engineUpdate+0x378>)
 8004438:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	db06      	blt.n	8004452 <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <engineUpdate+0x378>)
 8004446:	4a13      	ldr	r2, [pc, #76]	; (8004494 <engineUpdate+0x388>)
 8004448:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 800444a:	2002      	movs	r0, #2
 800444c:	f001 fb2c 	bl	8005aa8 <os_radio>
        return;
 8004450:	e015      	b.n	800447e <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 8004452:	4a11      	ldr	r2, [pc, #68]	; (8004498 <engineUpdate+0x38c>)
 8004454:	6979      	ldr	r1, [r7, #20]
 8004456:	480e      	ldr	r0, [pc, #56]	; (8004490 <engineUpdate+0x384>)
 8004458:	f000 fd6a 	bl	8004f30 <os_setTimedCallback>
    return;
 800445c:	e00f      	b.n	800447e <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <engineUpdate+0x35c>
                goto txdelay;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <engineUpdate+0x35c>
        goto txdelay;
 8004466:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	3b40      	subs	r3, #64	; 0x40
 800446c:	4a0b      	ldr	r2, [pc, #44]	; (800449c <engineUpdate+0x390>)
 800446e:	4619      	mov	r1, r3
 8004470:	4807      	ldr	r0, [pc, #28]	; (8004490 <engineUpdate+0x384>)
 8004472:	f000 fd5d 	bl	8004f30 <os_setTimedCallback>
 8004476:	e002      	b.n	800447e <engineUpdate+0x372>
        return;
 8004478:	bf00      	nop
 800447a:	e000      	b.n	800447e <engineUpdate+0x372>
            return;
 800447c:	bf00      	nop
}
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000138 	.word	0x20000138
 8004488:	2000026c 	.word	0x2000026c
 800448c:	080040e9 	.word	0x080040e9
 8004490:	2000014c 	.word	0x2000014c
 8004494:	08003ead 	.word	0x08003ead
 8004498:	080040c5 	.word	0x080040c5
 800449c:	0800278d 	.word	0x0800278d

080044a0 <LMIC_setDrTxpow>:
    LMIC.adrEnabled = enabled ? FCT_ADREN : 0;
}


//  Should we have/need an ext. API like this?
void LMIC_setDrTxpow (dr_t dr, s1_t txpow) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	460a      	mov	r2, r1
 80044aa:	71fb      	strb	r3, [r7, #7]
 80044ac:	4613      	mov	r3, r2
 80044ae:	71bb      	strb	r3, [r7, #6]
    setDrTxpow(DRCHG_SET, dr, txpow);
 80044b0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	4619      	mov	r1, r3
 80044b8:	2000      	movs	r0, #0
 80044ba:	f7fd fe23 	bl	8002104 <setDrTxpow>
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 80044c8:	b598      	push	{r3, r4, r7, lr}
 80044ca:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 80044cc:	2000      	movs	r0, #0
 80044ce:	f001 faeb 	bl	8005aa8 <os_radio>
    os_clearCallback(&LMIC.osjob);
 80044d2:	4821      	ldr	r0, [pc, #132]	; (8004558 <LMIC_reset+0x90>)
 80044d4:	f000 fce8 	bl	8004ea8 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 80044d8:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80044dc:	2100      	movs	r1, #0
 80044de:	481f      	ldr	r0, [pc, #124]	; (800455c <LMIC_reset+0x94>)
 80044e0:	f004 fe94 	bl	800920c <memset>
    LMIC.devaddr      =  0;
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <LMIC_reset+0x94>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    LMIC.devNonce     =  os_getRndU2();
 80044ec:	f001 f9e0 	bl	80058b0 <radio_rand1>
 80044f0:	4603      	mov	r3, r0
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	b21c      	sxth	r4, r3
 80044f6:	f001 f9db 	bl	80058b0 <radio_rand1>
 80044fa:	4603      	mov	r3, r0
 80044fc:	b21b      	sxth	r3, r3
 80044fe:	4323      	orrs	r3, r4
 8004500:	b21b      	sxth	r3, r3
 8004502:	b29a      	uxth	r2, r3
 8004504:	4b15      	ldr	r3, [pc, #84]	; (800455c <LMIC_reset+0x94>)
 8004506:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
    LMIC.opmode       =  OP_NONE;
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <LMIC_reset+0x94>)
 800450c:	2200      	movs	r2, #0
 800450e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.errcr        =  CR_4_5;
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <LMIC_reset+0x94>)
 8004514:	2200      	movs	r2, #0
 8004516:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <LMIC_reset+0x94>)
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <LMIC_reset+0x94>)
 8004524:	2200      	movs	r2, #0
 8004526:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 800452a:	4b0c      	ldr	r3, [pc, #48]	; (800455c <LMIC_reset+0x94>)
 800452c:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <LMIC_reset+0x98>)
 800452e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <LMIC_reset+0x94>)
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <LMIC_reset+0x94>)
 800453c:	4a08      	ldr	r2, [pc, #32]	; (8004560 <LMIC_reset+0x98>)
 800453e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <LMIC_reset+0x94>)
 8004544:	2203      	movs	r2, #3
 8004546:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    LMIC.ping.intvExp =  0xFF;
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <LMIC_reset+0x94>)
 800454c:	22ff      	movs	r2, #255	; 0xff
 800454e:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8004552:	bf00      	nop
 8004554:	bd98      	pop	{r3, r4, r7, pc}
 8004556:	bf00      	nop
 8004558:	2000014c 	.word	0x2000014c
 800455c:	20000138 	.word	0x20000138
 8004560:	33ab9d88 	.word	0x33ab9d88

08004564 <LMIC_init>:


void LMIC_init (void) {
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <LMIC_init+0x18>)
 800456a:	2240      	movs	r2, #64	; 0x40
 800456c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000138 	.word	0x20000138

08004580 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <LMIC_setTxData+0x34>)
 8004586:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800458a:	f043 0308 	orr.w	r3, r3, #8
 800458e:	b29a      	uxth	r2, r3
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <LMIC_setTxData+0x34>)
 8004592:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 8004596:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <LMIC_setTxData+0x34>)
 8004598:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 80045a4:	4b03      	ldr	r3, [pc, #12]	; (80045b4 <LMIC_setTxData+0x34>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
    engineUpdate();
 80045ac:	f7ff fdae 	bl	800410c <engineUpdate>
}
 80045b0:	bf00      	nop
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000138 	.word	0x20000138

080045b8 <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6039      	str	r1, [r7, #0]
 80045c0:	4611      	mov	r1, r2
 80045c2:	461a      	mov	r2, r3
 80045c4:	4603      	mov	r3, r0
 80045c6:	71fb      	strb	r3, [r7, #7]
 80045c8:	460b      	mov	r3, r1
 80045ca:	71bb      	strb	r3, [r7, #6]
 80045cc:	4613      	mov	r3, r2
 80045ce:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 80045d0:	79bb      	ldrb	r3, [r7, #6]
 80045d2:	2b34      	cmp	r3, #52	; 0x34
 80045d4:	d902      	bls.n	80045dc <LMIC_setTxData2+0x24>
        return -2;
 80045d6:	f06f 0301 	mvn.w	r3, #1
 80045da:	e017      	b.n	800460c <LMIC_setTxData2+0x54>
    if( data != (xref2u1_t)0 )
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 80045e2:	79bb      	ldrb	r3, [r7, #6]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6839      	ldr	r1, [r7, #0]
 80045e8:	480a      	ldr	r0, [pc, #40]	; (8004614 <LMIC_setTxData2+0x5c>)
 80045ea:	f004 fe01 	bl	80091f0 <memcpy>
    LMIC.pendTxConf = confirmed;
 80045ee:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <LMIC_setTxData2+0x60>)
 80045f0:	797b      	ldrb	r3, [r7, #5]
 80045f2:	f882 30bb 	strb.w	r3, [r2, #187]	; 0xbb
    LMIC.pendTxPort = port;
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <LMIC_setTxData2+0x60>)
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	f882 30ba 	strb.w	r3, [r2, #186]	; 0xba
    LMIC.pendTxLen  = dlen;
 80045fe:	4a06      	ldr	r2, [pc, #24]	; (8004618 <LMIC_setTxData2+0x60>)
 8004600:	79bb      	ldrb	r3, [r7, #6]
 8004602:	f882 30bc 	strb.w	r3, [r2, #188]	; 0xbc
    LMIC_setTxData();
 8004606:	f7ff ffbb 	bl	8004580 <LMIC_setTxData>
    return 0;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	200001f5 	.word	0x200001f5
 8004618:	20000138 	.word	0x20000138

0800461c <LMIC_setSession>:
//!    to ensure that different devices use different numbers with high probability.
//! \param nwkKey  the 16 byte network session key used for message integrity.
//!     If NULL the caller has copied the key into `LMIC.nwkKey` before.
//! \param artKey  the 16 byte application router session key used for message confidentiality.
//!     If NULL the caller has copied the key into `LMIC.artKey` before.
void LMIC_setSession (u4_t netid, devaddr_t devaddr, xref2u1_t nwkKey, xref2u1_t artKey) {
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
    LMIC.netid = netid;
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <LMIC_setSession+0x8c>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    LMIC.devaddr = devaddr;
 8004632:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <LMIC_setSession+0x8c>)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    if( nwkKey != (xref2u1_t)0 )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <LMIC_setSession+0x38>
        os_copyMem(LMIC.nwkKey, nwkKey, 16);
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <LMIC_setSession+0x8c>)
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
 8004648:	4613      	mov	r3, r2
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if( artKey != (xref2u1_t)0 )
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <LMIC_setSession+0x52>
        os_copyMem(LMIC.artKey, artKey, 16);
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <LMIC_setSession+0x8c>)
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	f503 7482 	add.w	r4, r3, #260	; 0x104
 8004662:	4613      	mov	r3, r2
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    
#if defined(CFG_in866)
    initDefaultChannels(0);
 800466e:	2000      	movs	r0, #0
 8004670:	f7fd fd76 	bl	8002160 <initDefaultChannels>
#endif
 
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <LMIC_setSession+0x8c>)
 8004676:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800467a:	f423 7329 	bic.w	r3, r3, #676	; 0x2a4
 800467e:	f023 0302 	bic.w	r3, r3, #2
 8004682:	b29a      	uxth	r2, r3
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <LMIC_setSession+0x8c>)
 8004686:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    LMIC.opmode |= OP_NEXTCHNL;
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <LMIC_setSession+0x8c>)
 800468c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8004690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004694:	b29a      	uxth	r2, r3
 8004696:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <LMIC_setSession+0x8c>)
 8004698:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    stateJustJoined();
 800469c:	f7fe f89e 	bl	80027dc <stateJustJoined>
    DO_DEVDB(LMIC.devaddr, devaddr);
    DO_DEVDB(LMIC.nwkKey,  nwkkey);
    DO_DEVDB(LMIC.artKey,  artkey);
    DO_DEVDB(LMIC.seqnoUp, seqnoUp);
    DO_DEVDB(LMIC.seqnoDn, seqnoDn);
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd90      	pop	{r4, r7, pc}
 80046a8:	20000138 	.word	0x20000138

080046ac <LMIC_setLinkCheckMode>:
// connectivity with a span of UP frames. If this no such prove is coming
// then the datarate is lowered and a LINK_DEAD event is generated.
// This mode can be disabled and no connectivity prove (ADRACKREQ) is requested
// nor is the datarate changed.
// This must be called only if a session is established (e.g. after EV_JOINED)
void LMIC_setLinkCheckMode (bit_t enabled) {
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
    LMIC.adrChanged = 0;
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <LMIC_setLinkCheckMode+0x34>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    LMIC.adrAckReq = enabled ? LINK_CHECK_INIT : LINK_CHECK_OFF;
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <LMIC_setLinkCheckMode+0x1e>
 80046c4:	f06f 020b 	mvn.w	r2, #11
 80046c8:	e001      	b.n	80046ce <LMIC_setLinkCheckMode+0x22>
 80046ca:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <LMIC_setLinkCheckMode+0x34>)
 80046d0:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	20000138 	.word	0x20000138

080046e4 <os_getArtEui>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    memcpy(buf, APPEUI, 8);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4906      	ldr	r1, [pc, #24]	; (8004708 <os_getArtEui+0x24>)
 80046f0:	461a      	mov	r2, r3
 80046f2:	460b      	mov	r3, r1
 80046f4:	cb03      	ldmia	r3!, {r0, r1}
 80046f6:	6010      	str	r0, [r2, #0]
 80046f8:	6051      	str	r1, [r2, #4]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	0800a7d8 	.word	0x0800a7d8

0800470c <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVEUI, 8);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4906      	ldr	r1, [pc, #24]	; (8004730 <os_getDevEui+0x24>)
 8004718:	461a      	mov	r2, r3
 800471a:	460b      	mov	r3, r1
 800471c:	cb03      	ldmia	r3!, {r0, r1}
 800471e:	6010      	str	r0, [r2, #0]
 8004720:	6051      	str	r1, [r2, #4]
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	0800a7e0 	.word	0x0800a7e0

08004734 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 8004734:	b4b0      	push	{r4, r5, r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVKEY, 16);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a06      	ldr	r2, [pc, #24]	; (8004758 <os_getDevKey+0x24>)
 8004740:	461c      	mov	r4, r3
 8004742:	4615      	mov	r5, r2
 8004744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004746:	6020      	str	r0, [r4, #0]
 8004748:	6061      	str	r1, [r4, #4]
 800474a:	60a2      	str	r2, [r4, #8]
 800474c:	60e3      	str	r3, [r4, #12]
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bcb0      	pop	{r4, r5, r7}
 8004756:	4770      	bx	lr
 8004758:	0800a7e8 	.word	0x0800a7e8

0800475c <initsensor>:

void initsensor(){
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
	 // Here you init your sensors
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <readsensor>:
u2_t readsensor(){
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
	u2_t value = 0xDC;    /// read from evrything ...make your own sensor
 8004770:	23dc      	movs	r3, #220	; 0xdc
 8004772:	80fb      	strh	r3, [r7, #6]
	return value;
 8004774:	88fb      	ldrh	r3, [r7, #6]
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <reportfunc>:

static osjob_t reportjob;
//uint8_t mydata[] = "hello tanuj";
// report sensor value every minute
static void reportfunc (osjob_t* j) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
    // read sensor
    u2_t val = readsensor();
 800478c:	f7ff ffed 	bl	800476a <readsensor>
 8004790:	4603      	mov	r3, r0
 8004792:	81fb      	strh	r3, [r7, #14]
   // static uint8_t mydata[] = "hello tanuj"; //add by tanuj
    debug_val("val = ", val);
 8004794:	89fb      	ldrh	r3, [r7, #14]
 8004796:	4619      	mov	r1, r3
 8004798:	4810      	ldr	r0, [pc, #64]	; (80047dc <reportfunc+0x58>)
 800479a:	f7fc fcbf 	bl	800111c <debug_val>
    // prepare and schedule data for transmission
    LMIC.frame[0] = val << 8;
 800479e:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <reportfunc+0x5c>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    LMIC.frame[1] = val;
 80047a6:	89fb      	ldrh	r3, [r7, #14]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <reportfunc+0x5c>)
 80047ac:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
  LMIC_setTxData2(1, LMIC.frame, 2, 0); // (port 1, 2 bytes, unconfirmed) // comment by tanuj
 80047b0:	2300      	movs	r3, #0
 80047b2:	2202      	movs	r2, #2
 80047b4:	490b      	ldr	r1, [pc, #44]	; (80047e4 <reportfunc+0x60>)
 80047b6:	2001      	movs	r0, #1
 80047b8:	f7ff fefe 	bl	80045b8 <LMIC_setTxData2>
   // LMIC_setTxData2(1, mydata, sizeof(mydata)-1, 0); // add by tanuj
    // reschedule job in 60 seconds
   os_setTimedCallback(j, os_getTime()+sec2osticks(20), reportfunc);
 80047bc:	f000 fb4e 	bl	8004e5c <os_getTime>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f503 13ea 	add.w	r3, r3, #1916928	; 0x1d4000
 80047c6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80047ca:	4a07      	ldr	r2, [pc, #28]	; (80047e8 <reportfunc+0x64>)
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fbae 	bl	8004f30 <os_setTimedCallback>
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	08009354 	.word	0x08009354
 80047e0:	20000138 	.word	0x20000138
 80047e4:	20000280 	.word	0x20000280
 80047e8:	08004785 	.word	0x08004785

080047ec <initfunc>:


void initfunc (osjob_t* j) {
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b08b      	sub	sp, #44	; 0x2c
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
    // intialize sensor hardware
    initsensor();
 80047f4:	f7ff ffb2 	bl	800475c <initsensor>
    // reset MAC state
    LMIC_reset();
 80047f8:	f7ff fe66 	bl	80044c8 <LMIC_reset>
    // start joining
    LMIC_startJoining();
 80047fc:	f7ff f9fa 	bl	8003bf4 <LMIC_startJoining>
    // init done - onEvent() callback will be invoked...

       uint8_t appskey[sizeof(APPSKEY)];
       uint8_t nwkskey[sizeof(NWKSKEY)];
       memcpy(appskey, APPSKEY, sizeof(APPSKEY));
 8004800:	4b1e      	ldr	r3, [pc, #120]	; (800487c <initfunc+0x90>)
 8004802:	f107 0418 	add.w	r4, r7, #24
 8004806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004808:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       memcpy(nwkskey, NWKSKEY, sizeof(NWKSKEY));
 800480c:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <initfunc+0x94>)
 800480e:	f107 0408 	add.w	r4, r7, #8
 8004812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       LMIC_setSession (0x1, DEVADDR, nwkskey, appskey);
 8004818:	491a      	ldr	r1, [pc, #104]	; (8004884 <initfunc+0x98>)
 800481a:	f107 0318 	add.w	r3, r7, #24
 800481e:	f107 0208 	add.w	r2, r7, #8
 8004822:	2001      	movs	r0, #1
 8004824:	f7ff fefa 	bl	800461c <LMIC_setSession>
    // LMIC_setupChannel(4, 867300000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
   //  LMIC_setupChannel(5, 867500000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
   //  LMIC_setupChannel(6, 867700000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
   //  LMIC_setupChannel(7, 867900000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
   //  LMIC_setupChannel(8, 868800000, DR_RANGE_MAP(DR_FSK,  DR_FSK),  BAND_MILLI);      // g2-band
       LMIC_setupChannel(0, 865062500, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);
 8004828:	2300      	movs	r3, #0
 800482a:	223f      	movs	r2, #63	; 0x3f
 800482c:	4916      	ldr	r1, [pc, #88]	; (8004888 <initfunc+0x9c>)
 800482e:	2000      	movs	r0, #0
 8004830:	f7fd fd1c 	bl	800226c <LMIC_setupChannel>
       LMIC_setupChannel(1, 865402500, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);
 8004834:	2300      	movs	r3, #0
 8004836:	223f      	movs	r2, #63	; 0x3f
 8004838:	4914      	ldr	r1, [pc, #80]	; (800488c <initfunc+0xa0>)
 800483a:	2001      	movs	r0, #1
 800483c:	f7fd fd16 	bl	800226c <LMIC_setupChannel>
       LMIC_setupChannel(2, 865985000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);
 8004840:	2300      	movs	r3, #0
 8004842:	223f      	movs	r2, #63	; 0x3f
 8004844:	4912      	ldr	r1, [pc, #72]	; (8004890 <initfunc+0xa4>)
 8004846:	2002      	movs	r0, #2
 8004848:	f7fd fd10 	bl	800226c <LMIC_setupChannel>
//      LMIC_setupChannel(6, 867300000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);
    //  LMIC_setupChannel(7, 867892500, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_MILLI);
     //  LMIC_setupChannel(8, 868000000, DR_RANGE_MAP(DR_FSK, DR_FSK),  BAND_CENTI);

//      IN865_F4 = 866550000,  // g2 SF7-12
//     	  IN865_F5 = 866885000,  // g2 SF7-12
 800484c:	2000      	movs	r0, #0
 800484e:	f7ff ff2d 	bl	80046ac <LMIC_setLinkCheckMode>
//     	  IN865_J4 = 867100000,  // g2 SF7-12 used during join
//     	  IN865_J5 = 867300000,
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <initfunc+0xa8>)
 8004854:	2203      	movs	r2, #3
 8004856:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b

       // Disable link check validation
 800485a:	210e      	movs	r1, #14
 800485c:	2005      	movs	r0, #5
 800485e:	f7ff fe1f 	bl	80044a0 <LMIC_setDrTxpow>
       LMIC_setLinkCheckMode(0);
       // TTN uses SF9 for its RX2 window.
 8004862:	f000 fafb 	bl	8004e5c <os_getTime>
 8004866:	4603      	mov	r3, r0
 8004868:	4a0b      	ldr	r2, [pc, #44]	; (8004898 <initfunc+0xac>)
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fb5f 	bl	8004f30 <os_setTimedCallback>
       LMIC.dn2Dr = DR_SF9;
       // Set data rate and transmit power for uplink (note: txpow seems to be ignored by the library)
 8004872:	bf00      	nop
 8004874:	372c      	adds	r7, #44	; 0x2c
 8004876:	46bd      	mov	sp, r7
 8004878:	bd90      	pop	{r4, r7, pc}
 800487a:	bf00      	nop
 800487c:	0800a808 	.word	0x0800a808
 8004880:	0800a7f8 	.word	0x0800a7f8
 8004884:	260117a4 	.word	0x260117a4
 8004888:	338fce64 	.word	0x338fce64
 800488c:	3394fe84 	.word	0x3394fe84
 8004890:	339de1e8 	.word	0x339de1e8
 8004894:	20000138 	.word	0x20000138
 8004898:	08004785 	.word	0x08004785

0800489c <onEvent>:
     // os_setTimedCallback(j, os_getTime()+sec2osticks(), reportfunc);
}




 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
//////////////////////////////////////////////////
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fc fc4d 	bl	8001148 <debug_event>
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	2b0e      	cmp	r3, #14
 80048b4:	d879      	bhi.n	80049aa <onEvent+0x10e>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <onEvent+0x20>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	08004917 	.word	0x08004917
 80048c0:	0800491f 	.word	0x0800491f
 80048c4:	08004927 	.word	0x08004927
 80048c8:	0800492f 	.word	0x0800492f
 80048cc:	080048f9 	.word	0x080048f9
 80048d0:	08004901 	.word	0x08004901
 80048d4:	08004937 	.word	0x08004937
 80048d8:	0800490f 	.word	0x0800490f
 80048dc:	0800493f 	.word	0x0800493f
 80048e0:	08004947 	.word	0x08004947
 80048e4:	08004983 	.word	0x08004983
 80048e8:	0800498b 	.word	0x0800498b
 80048ec:	08004993 	.word	0x08004993
 80048f0:	0800499b 	.word	0x0800499b
 80048f4:	080049a3 	.word	0x080049a3

void onEvent (ev_t ev) {
    debug_event(ev);

 80048f8:	4830      	ldr	r0, [pc, #192]	; (80049bc <onEvent+0x120>)
 80048fa:	f7fc fbfa 	bl	80010f2 <debug_str>
    switch(ev) {
 80048fe:	e059      	b.n	80049b4 <onEvent+0x118>

      // network joined, session established
 8004900:	2001      	movs	r0, #1
 8004902:	f7fc fb93 	bl	800102c <debug_led>
      case EV_JOINING:
       	  debug_str("try joining\r\n");
 8004906:	482e      	ldr	r0, [pc, #184]	; (80049c0 <onEvent+0x124>)
 8004908:	f7ff ff3c 	bl	8004784 <reportfunc>
       	  break;
 800490c:	e052      	b.n	80049b4 <onEvent+0x118>
      case EV_JOINED:
          debug_led(1);
 800490e:	482d      	ldr	r0, [pc, #180]	; (80049c4 <onEvent+0x128>)
 8004910:	f7fc fbef 	bl	80010f2 <debug_str>
          // kick-off periodic sensor job
 8004914:	e04e      	b.n	80049b4 <onEvent+0x118>
          reportfunc(&reportjob);
          break;
 8004916:	482c      	ldr	r0, [pc, #176]	; (80049c8 <onEvent+0x12c>)
 8004918:	f7fc fbeb 	bl	80010f2 <debug_str>
      case EV_JOIN_FAILED:
 800491c:	e04a      	b.n	80049b4 <onEvent+0x118>
    	  debug_str("join failed\r\n");
    	  break;
 800491e:	482b      	ldr	r0, [pc, #172]	; (80049cc <onEvent+0x130>)
 8004920:	f7fc fbe7 	bl	80010f2 <debug_str>
      case EV_SCAN_TIMEOUT:
 8004924:	e046      	b.n	80049b4 <onEvent+0x118>
    	  debug_str("EV_SCAN_TIMEOUT\r\n");
		  break;
 8004926:	482a      	ldr	r0, [pc, #168]	; (80049d0 <onEvent+0x134>)
 8004928:	f7fc fbe3 	bl	80010f2 <debug_str>
	  case EV_BEACON_FOUND:
 800492c:	e042      	b.n	80049b4 <onEvent+0x118>
		  debug_str("EV_BEACON_FOUND\r\n");
		  break;
 800492e:	4829      	ldr	r0, [pc, #164]	; (80049d4 <onEvent+0x138>)
 8004930:	f7fc fbdf 	bl	80010f2 <debug_str>
	  case EV_BEACON_MISSED:
 8004934:	e03e      	b.n	80049b4 <onEvent+0x118>
		  debug_str("EV_BEACON_MISSED\r\n");
		  break;
 8004936:	4828      	ldr	r0, [pc, #160]	; (80049d8 <onEvent+0x13c>)
 8004938:	f7fc fbdb 	bl	80010f2 <debug_str>
	  case EV_BEACON_TRACKED:
 800493c:	e03a      	b.n	80049b4 <onEvent+0x118>
		  debug_str("EV_BEACON_TRACKED\r\n");
		  break;
 800493e:	4827      	ldr	r0, [pc, #156]	; (80049dc <onEvent+0x140>)
 8004940:	f7fc fbd7 	bl	80010f2 <debug_str>
	  case EV_RFU1:
 8004944:	e036      	b.n	80049b4 <onEvent+0x118>
		  debug_str("EV_RFU1\r\n");
		  break;
 8004946:	4826      	ldr	r0, [pc, #152]	; (80049e0 <onEvent+0x144>)
 8004948:	f7fc fbd3 	bl	80010f2 <debug_str>
	  case EV_REJOIN_FAILED:
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <onEvent+0x148>)
 800494e:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8004952:	b25b      	sxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	da02      	bge.n	800495e <onEvent+0xc2>
		  debug_str("EV_REJOIN_FAILED\r\n");
 8004958:	4823      	ldr	r0, [pc, #140]	; (80049e8 <onEvent+0x14c>)
 800495a:	f7fc fbca 	bl	80010f2 <debug_str>
		  break;
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <onEvent+0x148>)
 8004960:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8004964:	2b00      	cmp	r3, #0
 8004966:	d024      	beq.n	80049b2 <onEvent+0x116>
	  case EV_TXCOMPLETE:
 8004968:	4820      	ldr	r0, [pc, #128]	; (80049ec <onEvent+0x150>)
 800496a:	f7fc fbc2 	bl	80010f2 <debug_str>
		  debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 800496e:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <onEvent+0x148>)
 8004970:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc fbbc 	bl	80010f2 <debug_str>
		//  frequency_display(k);
 800497a:	481d      	ldr	r0, [pc, #116]	; (80049f0 <onEvent+0x154>)
 800497c:	f7fc fbb9 	bl	80010f2 <debug_str>
		  if (LMIC.txrxFlags & TXRX_ACK)
			  debug_str("Received ack\r\n");
		  if (LMIC.dataLen) {
 8004980:	e017      	b.n	80049b2 <onEvent+0x116>
			  debug_str("Received ");
			  debug_str(LMIC.dataLen);
 8004982:	481c      	ldr	r0, [pc, #112]	; (80049f4 <onEvent+0x158>)
 8004984:	f7fc fbb5 	bl	80010f2 <debug_str>
			  debug_str(" bytes of payload\r\n");
 8004988:	e014      	b.n	80049b4 <onEvent+0x118>
		  }
//		  os_setTimedCallback(j, os_getTime()+sec2osticks(30), reportfunc);
 800498a:	481b      	ldr	r0, [pc, #108]	; (80049f8 <onEvent+0x15c>)
 800498c:	f7fc fbb1 	bl	80010f2 <debug_str>
		  break;
 8004990:	e010      	b.n	80049b4 <onEvent+0x118>
	  case EV_LOST_TSYNC:
		  debug_str("EV_LOST_TSYNC\r\n");
		  break;
 8004992:	481a      	ldr	r0, [pc, #104]	; (80049fc <onEvent+0x160>)
 8004994:	f7fc fbad 	bl	80010f2 <debug_str>
	  case EV_RESET:
 8004998:	e00c      	b.n	80049b4 <onEvent+0x118>
		  debug_str("EV_RESET\r\n");
		  break;
 800499a:	4819      	ldr	r0, [pc, #100]	; (8004a00 <onEvent+0x164>)
 800499c:	f7fc fba9 	bl	80010f2 <debug_str>
	  case EV_RXCOMPLETE:
 80049a0:	e008      	b.n	80049b4 <onEvent+0x118>
		  // data received in ping slot
		  debug_str("EV_RXCOMPLETE\r\n");
 80049a2:	4818      	ldr	r0, [pc, #96]	; (8004a04 <onEvent+0x168>)
 80049a4:	f7fc fba5 	bl	80010f2 <debug_str>
		  break;
 80049a8:	e004      	b.n	80049b4 <onEvent+0x118>
	  case EV_LINK_DEAD:
		  debug_str("EV_LINK_DEAD\r\n");
 80049aa:	4817      	ldr	r0, [pc, #92]	; (8004a08 <onEvent+0x16c>)
 80049ac:	f7fc fba1 	bl	80010f2 <debug_str>
		  break;
 80049b0:	e000      	b.n	80049b4 <onEvent+0x118>
		  if (LMIC.dataLen) {
 80049b2:	bf00      	nop
	  case EV_LINK_ALIVE:
		  debug_str("EV_LINK_ALIVE\r\n");
 80049b4:	bf00      	nop
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	0800935c 	.word	0x0800935c
 80049c0:	200003c8 	.word	0x200003c8
 80049c4:	0800936c 	.word	0x0800936c
 80049c8:	0800937c 	.word	0x0800937c
 80049cc:	08009390 	.word	0x08009390
 80049d0:	080093a4 	.word	0x080093a4
 80049d4:	080093b8 	.word	0x080093b8
 80049d8:	080093cc 	.word	0x080093cc
 80049dc:	080093d8 	.word	0x080093d8
 80049e0:	080093ec 	.word	0x080093ec
 80049e4:	20000138 	.word	0x20000138
 80049e8:	08009420 	.word	0x08009420
 80049ec:	08009430 	.word	0x08009430
 80049f0:	0800943c 	.word	0x0800943c
 80049f4:	08009450 	.word	0x08009450
 80049f8:	08009460 	.word	0x08009460
 80049fc:	0800946c 	.word	0x0800946c
 8004a00:	0800947c 	.word	0x0800947c
 8004a04:	0800948c 	.word	0x0800948c
 8004a08:	0800949c 	.word	0x0800949c

08004a0c <main>:
		   debug_str("Unknown event\r\n");
		  break;
    }
}
/* USER CODE END 0 */

 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

 8004a12:	f001 f9d9 	bl	8005dc8 <HAL_Init>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

 8004a16:	f000 f829 	bl	8004a6c <SystemClock_Config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

 8004a1a:	f000 f947 	bl	8004cac <MX_GPIO_Init>
  /* USER CODE BEGIN SysInit */
 8004a1e:	f000 f88d 	bl	8004b3c <MX_SPI1_Init>

 8004a22:	f000 f8c1 	bl	8004ba8 <MX_TIM4_Init>
  /* USER CODE END SysInit */
 8004a26:	f000 f917 	bl	8004c58 <MX_USART1_UART_Init>

  /* Initialize all configured peripherals */
 8004a2a:	480d      	ldr	r0, [pc, #52]	; (8004a60 <main+0x54>)
 8004a2c:	f003 f826 	bl	8007a7c <HAL_TIM_Base_Start_IT>
  MX_GPIO_Init();
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <main+0x58>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <main+0x58>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a3e:	601a      	str	r2, [r3, #0]
  MX_SPI1_Init();
  MX_TIM4_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);    // <-----------  change to your setup
 8004a40:	f000 f9fa 	bl	8004e38 <os_init>
   __HAL_SPI_ENABLE(&hspi1);         // <-----------  change to your setup

   osjob_t initjob;
 8004a44:	f7fc fae6 	bl	8001014 <debug_init>

   // initialize runtime env
 8004a48:	1d3b      	adds	r3, r7, #4
 8004a4a:	4907      	ldr	r1, [pc, #28]	; (8004a68 <main+0x5c>)
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fa49 	bl	8004ee4 <os_setCallback>
   os_init();

 8004a52:	f000 faa3 	bl	8004f9c <os_runloop>
   // initialize debug library
   debug_init();
 8004a56:	2300      	movs	r3, #0
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	2000033c 	.word	0x2000033c
 8004a64:	200002e4 	.word	0x200002e4
 8004a68:	080047ed 	.word	0x080047ed

08004a6c <SystemClock_Config>:

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b094      	sub	sp, #80	; 0x50
 8004a70:	af00      	add	r7, sp, #0
/**
 8004a72:	f107 0320 	add.w	r3, r7, #32
 8004a76:	2230      	movs	r2, #48	; 0x30
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f004 fbc6 	bl	800920c <memset>
  * @brief System Clock Configuration
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	611a      	str	r2, [r3, #16]
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	4b27      	ldr	r3, [pc, #156]	; (8004b34 <SystemClock_Config+0xc8>)
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	4a26      	ldr	r2, [pc, #152]	; (8004b34 <SystemClock_Config+0xc8>)
 8004a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa0:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <SystemClock_Config+0xc8>)
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004aac:	2300      	movs	r3, #0
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <SystemClock_Config+0xcc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	; (8004b38 <SystemClock_Config+0xcc>)
 8004ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <SystemClock_Config+0xcc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ac8:	2302      	movs	r3, #2
 8004aca:	623b      	str	r3, [r7, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004acc:	2301      	movs	r3, #1
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c

 8004ad0:	2310      	movs	r3, #16
 8004ad2:	633b      	str	r3, [r7, #48]	; 0x30
  /** Initializes the RCC Oscillators according to the specified parameters
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  * in the RCC_OscInitTypeDef structure.
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  */
 8004adc:	2308      	movs	r3, #8
 8004ade:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ae0:	2348      	movs	r3, #72	; 0x48
 8004ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ae8:	2304      	movs	r3, #4
 8004aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004aec:	f107 0320 	add.w	r3, r7, #32
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fdff 	bl	80066f4 <HAL_RCC_OscConfig>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <SystemClock_Config+0x94>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004afc:	f000 f98c 	bl	8004e18 <Error_Handler>
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
 8004b00:	230f      	movs	r3, #15
 8004b02:	60fb      	str	r3, [r7, #12]
    Error_Handler();
  }
 8004b04:	2302      	movs	r3, #2
 8004b06:	613b      	str	r3, [r7, #16]

 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
  /** Initializes the CPU, AHB and APB buses clocks
 8004b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b10:	61bb      	str	r3, [r7, #24]
  */
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8004b16:	f107 030c 	add.w	r3, r7, #12
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f002 f911 	bl	8006d44 <HAL_RCC_ClockConfig>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <SystemClock_Config+0xc0>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b28:	f000 f976 	bl	8004e18 <Error_Handler>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b2c:	bf00      	nop
 8004b2e:	3750      	adds	r7, #80	; 0x50
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40007000 	.word	0x40007000

08004b3c <MX_SPI1_Init>:
  {
    Error_Handler();
  }
}

/**
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b42:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <MX_SPI1_Init+0x68>)
 8004b44:	601a      	str	r2, [r3, #0]

 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b4c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN SPI1_Init 1 */
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	609a      	str	r2, [r3, #8]

 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	60da      	str	r2, [r3, #12]
  /* USER CODE END SPI1_Init 1 */
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	611a      	str	r2, [r3, #16]
  /* SPI1 parameter configuration*/
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	615a      	str	r2, [r3, #20]
  hspi1.Instance = SPI1;
 8004b66:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b70:	2228      	movs	r2, #40	; 0x28
 8004b72:	61da      	str	r2, [r3, #28]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004b74:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	621a      	str	r2, [r3, #32]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b88:	220a      	movs	r2, #10
 8004b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b8c:	4804      	ldr	r0, [pc, #16]	; (8004ba0 <MX_SPI1_Init+0x64>)
 8004b8e:	f002 fb61 	bl	8007254 <HAL_SPI_Init>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <MX_SPI1_Init+0x60>
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b98:	f000 f93e 	bl	8004e18 <Error_Handler>
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
 8004b9c:	bf00      	nop
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	200002e4 	.word	0x200002e4
 8004ba4:	40013000 	.word	0x40013000

08004ba8 <MX_TIM4_Init>:

  /* USER CODE END SPI1_Init 2 */

}

/**
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af00      	add	r7, sp, #0
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004bae:	f107 0320 	add.w	r3, r7, #32
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	605a      	str	r2, [r3, #4]

 8004bb8:	1d3b      	adds	r3, r7, #4
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	605a      	str	r2, [r3, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	611a      	str	r2, [r3, #16]
 8004bc6:	615a      	str	r2, [r3, #20]
 8004bc8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bca:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <MX_TIM4_Init+0xa8>)
 8004bcc:	4a21      	ldr	r2, [pc, #132]	; (8004c54 <MX_TIM4_Init+0xac>)
 8004bce:	601a      	str	r2, [r3, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd0:	4b1f      	ldr	r3, [pc, #124]	; (8004c50 <MX_TIM4_Init+0xa8>)
 8004bd2:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8004bd6:	605a      	str	r2, [r3, #4]

 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <MX_TIM4_Init+0xa8>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */
 8004bde:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <MX_TIM4_Init+0xa8>)
 8004be0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004be4:	60da      	str	r2, [r3, #12]

 8004be6:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <MX_TIM4_Init+0xa8>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM4_Init 1 */
 8004bec:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <MX_TIM4_Init+0xa8>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	619a      	str	r2, [r3, #24]
  htim4.Instance = TIM4;
 8004bf2:	4817      	ldr	r0, [pc, #92]	; (8004c50 <MX_TIM4_Init+0xa8>)
 8004bf4:	f002 ffd4 	bl	8007ba0 <HAL_TIM_OC_Init>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <MX_TIM4_Init+0x5a>
  htim4.Init.Prescaler = 2250-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bfe:	f000 f90b 	bl	8004e18 <Error_Handler>
  htim4.Init.Period = 65535-1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c02:	2300      	movs	r3, #0
 8004c04:	623b      	str	r3, [r7, #32]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004c0a:	f107 0320 	add.w	r3, r7, #32
 8004c0e:	4619      	mov	r1, r3
 8004c10:	480f      	ldr	r0, [pc, #60]	; (8004c50 <MX_TIM4_Init+0xa8>)
 8004c12:	f003 fd87 	bl	8008724 <HAL_TIMEx_MasterConfigSynchronization>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004c1c:	f000 f8fc 	bl	8004e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c20:	2300      	movs	r3, #0
 8004c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
  {
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
    Error_Handler();
 8004c30:	1d3b      	adds	r3, r7, #4
 8004c32:	2200      	movs	r2, #0
 8004c34:	4619      	mov	r1, r3
 8004c36:	4806      	ldr	r0, [pc, #24]	; (8004c50 <MX_TIM4_Init+0xa8>)
 8004c38:	f003 f980 	bl	8007f3c <HAL_TIM_OC_ConfigChannel>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <MX_TIM4_Init+0x9e>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004c42:	f000 f8e9 	bl	8004e18 <Error_Handler>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
 8004c46:	bf00      	nop
 8004c48:	3728      	adds	r7, #40	; 0x28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	2000033c 	.word	0x2000033c
 8004c54:	40000800 	.word	0x40000800

08004c58 <MX_USART1_UART_Init>:

  /* USER CODE END TIM4_Init 2 */

}

/**
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

 8004c5c:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <MX_USART1_UART_Init+0x4c>)
 8004c5e:	4a12      	ldr	r2, [pc, #72]	; (8004ca8 <MX_USART1_UART_Init+0x50>)
 8004c60:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */
 8004c62:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <MX_USART1_UART_Init+0x4c>)
 8004c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c68:	605a      	str	r2, [r3, #4]

 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <MX_USART1_UART_Init+0x4c>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN USART1_Init 1 */
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <MX_USART1_UART_Init+0x4c>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	60da      	str	r2, [r3, #12]

 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <MX_USART1_UART_Init+0x4c>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	611a      	str	r2, [r3, #16]
  /* USER CODE END USART1_Init 1 */
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <MX_USART1_UART_Init+0x4c>)
 8004c7e:	220c      	movs	r2, #12
 8004c80:	615a      	str	r2, [r3, #20]
  huart1.Instance = USART1;
 8004c82:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <MX_USART1_UART_Init+0x4c>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	619a      	str	r2, [r3, #24]
  huart1.Init.BaudRate = 115200;
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <MX_USART1_UART_Init+0x4c>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	61da      	str	r2, [r3, #28]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c8e:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <MX_USART1_UART_Init+0x4c>)
 8004c90:	f003 fe1a 	bl	80088c8 <HAL_UART_Init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <MX_USART1_UART_Init+0x46>
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c9a:	f000 f8bd 	bl	8004e18 <Error_Handler>
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000384 	.word	0x20000384
 8004ca8:	40011000 	.word	0x40011000

08004cac <MX_GPIO_Init>:

  /* USER CODE END USART1_Init 2 */

}

/**
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af00      	add	r7, sp, #0
  * @brief GPIO Initialization Function
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	60da      	str	r2, [r3, #12]
 8004cc0:	611a      	str	r2, [r3, #16]
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	4b50      	ldr	r3, [pc, #320]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	4a4f      	ldr	r2, [pc, #316]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004ccc:	f043 0304 	orr.w	r3, r3, #4
 8004cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd2:	4b4d      	ldr	r3, [pc, #308]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	693b      	ldr	r3, [r7, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	4b49      	ldr	r3, [pc, #292]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	4a48      	ldr	r2, [pc, #288]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cec:	6313      	str	r3, [r2, #48]	; 0x30
 8004cee:	4b46      	ldr	r3, [pc, #280]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	4b42      	ldr	r3, [pc, #264]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	4a41      	ldr	r2, [pc, #260]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	6313      	str	r3, [r2, #48]	; 0x30
 8004d0a:	4b3f      	ldr	r3, [pc, #252]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
/* USER CODE END MX_GPIO_Init_1 */
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	4b3b      	ldr	r3, [pc, #236]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	4a3a      	ldr	r2, [pc, #232]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	6313      	str	r3, [r2, #48]	; 0x30
 8004d26:	4b38      	ldr	r3, [pc, #224]	; (8004e08 <MX_GPIO_Init+0x15c>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d32:	2200      	movs	r2, #0
 8004d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d38:	4834      	ldr	r0, [pc, #208]	; (8004e0c <MX_GPIO_Init+0x160>)
 8004d3a:	f001 fc91 	bl	8006660 <HAL_GPIO_WritePin>
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2104      	movs	r1, #4
 8004d42:	4833      	ldr	r0, [pc, #204]	; (8004e10 <MX_GPIO_Init+0x164>)
 8004d44:	f001 fc8c 	bl	8006660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	4831      	ldr	r0, [pc, #196]	; (8004e14 <MX_GPIO_Init+0x168>)
 8004d4e:	f001 fc87 	bl	8006660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8004d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d56:	617b      	str	r3, [r7, #20]

 8004d58:	2301      	movs	r3, #1
 8004d5a:	61bb      	str	r3, [r7, #24]
  /*Configure GPIO pin Output Level */
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]

 8004d64:	f107 0314 	add.w	r3, r7, #20
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4828      	ldr	r0, [pc, #160]	; (8004e0c <MX_GPIO_Init+0x160>)
 8004d6c:	f001 f9de 	bl	800612c <HAL_GPIO_Init>
  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d70:	2304      	movs	r3, #4
 8004d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d74:	2301      	movs	r3, #1
 8004d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	623b      	str	r3, [r7, #32]

 8004d80:	f107 0314 	add.w	r3, r7, #20
 8004d84:	4619      	mov	r1, r3
 8004d86:	4822      	ldr	r0, [pc, #136]	; (8004e10 <MX_GPIO_Init+0x164>)
 8004d88:	f001 f9d0 	bl	800612c <HAL_GPIO_Init>
  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d90:	2301      	movs	r3, #1
 8004d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	623b      	str	r3, [r7, #32]

 8004d9c:	f107 0314 	add.w	r3, r7, #20
 8004da0:	4619      	mov	r1, r3
 8004da2:	481c      	ldr	r0, [pc, #112]	; (8004e14 <MX_GPIO_Init+0x168>)
 8004da4:	f001 f9c2 	bl	800612c <HAL_GPIO_Init>
  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004da8:	f240 4302 	movw	r3, #1026	; 0x402
 8004dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8004db8:	f107 0314 	add.w	r3, r7, #20
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4815      	ldr	r0, [pc, #84]	; (8004e14 <MX_GPIO_Init+0x168>)
 8004dc0:	f001 f9b4 	bl	800612c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8004dc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004dca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd4:	f107 0314 	add.w	r3, r7, #20
 8004dd8:	4619      	mov	r1, r3
 8004dda:	480d      	ldr	r0, [pc, #52]	; (8004e10 <MX_GPIO_Init+0x164>)
 8004ddc:	f001 f9a6 	bl	800612c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 8004de0:	2200      	movs	r2, #0
 8004de2:	2100      	movs	r1, #0
 8004de4:	2007      	movs	r0, #7
 8004de6:	f001 f951 	bl	800608c <HAL_NVIC_SetPriority>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004dea:	2007      	movs	r0, #7
 8004dec:	f001 f97a 	bl	80060e4 <HAL_NVIC_EnableIRQ>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 8004df0:	2200      	movs	r2, #0
 8004df2:	2100      	movs	r1, #0
 8004df4:	2028      	movs	r0, #40	; 0x28
 8004df6:	f001 f949 	bl	800608c <HAL_NVIC_SetPriority>

 8004dfa:	2028      	movs	r0, #40	; 0x28
 8004dfc:	f001 f972 	bl	80060e4 <HAL_NVIC_EnableIRQ>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

 8004e00:	bf00      	nop
 8004e02:	3728      	adds	r7, #40	; 0x28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	40020800 	.word	0x40020800
 8004e10:	40020000 	.word	0x40020000
 8004e14:	40020400 	.word	0x40020400

08004e18 <Error_Handler>:
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004e1c:	b672      	cpsid	i
}
 8004e1e:	bf00      	nop
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
 8004e20:	e7fe      	b.n	8004e20 <Error_Handler+0x8>

08004e22 <assert_failed>:
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	6039      	str	r1, [r7, #0]
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4805      	ldr	r0, [pc, #20]	; (8004e58 <os_init+0x20>)
 8004e42:	f004 f9e3 	bl	800920c <memset>
    hal_init();
 8004e46:	f7fc fb1f 	bl	8001488 <hal_init>
    radio_init();
 8004e4a:	f000 fcbd 	bl	80057c8 <radio_init>
    LMIC_init();
 8004e4e:	f7ff fb89 	bl	8004564 <LMIC_init>
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200003d4 	.word	0x200003d4

08004e5c <os_getTime>:

ostime_t os_getTime () {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
    return hal_ticks();
 8004e60:	f7fc fa30 	bl	80012c4 <hal_ticks>
 8004e64:	4603      	mov	r3, r0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004e74:	e00d      	b.n	8004e92 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d105      	bne.n	8004e8c <unlinkjob+0x22>
            *pnext = job->next;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	601a      	str	r2, [r3, #0]
            return 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e007      	b.n	8004e9c <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	607b      	str	r3, [r7, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1ed      	bne.n	8004e76 <unlinkjob+0xc>
        }
    }
    return 0;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 8004eb0:	f7fc fabe 	bl	8001430 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4809      	ldr	r0, [pc, #36]	; (8004edc <os_clearCallback+0x34>)
 8004eb8:	f7ff ffd7 	bl	8004e6a <unlinkjob>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <os_clearCallback+0x26>
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4806      	ldr	r0, [pc, #24]	; (8004ee0 <os_clearCallback+0x38>)
 8004ec6:	f7ff ffd0 	bl	8004e6a <unlinkjob>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 8004ece:	f7fc fabf 	bl	8001450 <hal_enableIRQs>
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200003d4 	.word	0x200003d4
 8004ee0:	200003d8 	.word	0x200003d8

08004ee4 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 8004eee:	f7fc fa9f 	bl	8001430 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	480d      	ldr	r0, [pc, #52]	; (8004f2c <os_setCallback+0x48>)
 8004ef6:	f7ff ffb8 	bl	8004e6a <unlinkjob>
    // fill-in job
    job->func = cb;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <os_setCallback+0x48>)
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	e002      	b.n	8004f12 <os_setCallback+0x2e>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f8      	bne.n	8004f0c <os_setCallback+0x28>
    *pnext = job;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004f20:	f7fc fa96 	bl	8001450 <hal_enableIRQs>
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	200003d8 	.word	0x200003d8

08004f30 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 8004f3c:	f7fc fa78 	bl	8001430 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 8004f40:	68f9      	ldr	r1, [r7, #12]
 8004f42:	4815      	ldr	r0, [pc, #84]	; (8004f98 <os_setTimedCallback+0x68>)
 8004f44:	f7ff ff91 	bl	8004e6a <unlinkjob>
    // fill-in job
    job->deadline = time;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	605a      	str	r2, [r3, #4]
    job->func = cb;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <os_setTimedCallback+0x68>)
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e00e      	b.n	8004f7e <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	dd04      	ble.n	8004f78 <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	601a      	str	r2, [r3, #0]
            break;
 8004f76:	e006      	b.n	8004f86 <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ec      	bne.n	8004f60 <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8004f8c:	f7fc fa60 	bl	8001450 <hal_enableIRQs>
}
 8004f90:	bf00      	nop
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	200003d4 	.word	0x200003d4

08004f9c <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 8004fa6:	f7fc fa43 	bl	8001430 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8004faa:	4b16      	ldr	r3, [pc, #88]	; (8005004 <os_runloop+0x68>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d007      	beq.n	8004fc2 <os_runloop+0x26>
            j = OS.runnablejobs;
 8004fb2:	4b14      	ldr	r3, [pc, #80]	; (8005004 <os_runloop+0x68>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a11      	ldr	r2, [pc, #68]	; (8005004 <os_runloop+0x68>)
 8004fbe:	6053      	str	r3, [r2, #4]
 8004fc0:	e016      	b.n	8004ff0 <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <os_runloop+0x68>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <os_runloop+0x50>
 8004fca:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <os_runloop+0x68>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fc f9d5 	bl	8001380 <hal_checkTimer>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <os_runloop+0x50>
            j = OS.scheduledjobs;
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <os_runloop+0x68>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a07      	ldr	r2, [pc, #28]	; (8005004 <os_runloop+0x68>)
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e001      	b.n	8004ff0 <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 8004fec:	f7fc fa44 	bl	8001478 <hal_sleep>
        }
        hal_enableIRQs();
 8004ff0:	f7fc fa2e 	bl	8001450 <hal_enableIRQs>
        if(j) { // run job callback
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0d3      	beq.n	8004fa2 <os_runloop+0x6>
            j->func(j);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
    while(1) {
 8005002:	e7ce      	b.n	8004fa2 <os_runloop+0x6>
 8005004:	200003d4 	.word	0x200003d4

08005008 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	460a      	mov	r2, r1
 8005012:	71fb      	strb	r3, [r7, #7]
 8005014:	4613      	mov	r3, r2
 8005016:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8005018:	2000      	movs	r0, #0
 800501a:	f7fc f8c5 	bl	80011a8 <hal_pin_nss>
    hal_spi(addr | 0x80);
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005024:	b2db      	uxtb	r3, r3
 8005026:	4618      	mov	r0, r3
 8005028:	f7fc f926 	bl	8001278 <hal_spi>
    hal_spi(data);
 800502c:	79bb      	ldrb	r3, [r7, #6]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fc f922 	bl	8001278 <hal_spi>
    hal_pin_nss(1);
 8005034:	2001      	movs	r0, #1
 8005036:	f7fc f8b7 	bl	80011a8 <hal_pin_nss>
}
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <readReg>:

static u1_t readReg (u1_t addr) {
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	4603      	mov	r3, r0
 800504a:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 800504c:	2000      	movs	r0, #0
 800504e:	f7fc f8ab 	bl	80011a8 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005058:	b2db      	uxtb	r3, r3
 800505a:	4618      	mov	r0, r3
 800505c:	f7fc f90c 	bl	8001278 <hal_spi>
    u1_t val = hal_spi(0x00);
 8005060:	2000      	movs	r0, #0
 8005062:	f7fc f909 	bl	8001278 <hal_spi>
 8005066:	4603      	mov	r3, r0
 8005068:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 800506a:	2001      	movs	r0, #1
 800506c:	f7fc f89c 	bl	80011a8 <hal_pin_nss>
    return val;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	4603      	mov	r3, r0
 8005082:	6039      	str	r1, [r7, #0]
 8005084:	71fb      	strb	r3, [r7, #7]
 8005086:	4613      	mov	r3, r2
 8005088:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 800508a:	2000      	movs	r0, #0
 800508c:	f7fc f88c 	bl	80011a8 <hal_pin_nss>
    hal_spi(addr | 0x80);
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005096:	b2db      	uxtb	r3, r3
 8005098:	4618      	mov	r0, r3
 800509a:	f7fc f8ed 	bl	8001278 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
 80050a2:	e009      	b.n	80050b8 <writeBuf+0x3e>
        hal_spi(buf[i]);
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	4413      	add	r3, r2
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fc f8e3 	bl	8001278 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	3301      	adds	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	7bfa      	ldrb	r2, [r7, #15]
 80050ba:	79bb      	ldrb	r3, [r7, #6]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3f1      	bcc.n	80050a4 <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 80050c0:	2001      	movs	r0, #1
 80050c2:	f7fc f871 	bl	80011a8 <hal_pin_nss>
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 80050ce:	b590      	push	{r4, r7, lr}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	4603      	mov	r3, r0
 80050d6:	6039      	str	r1, [r7, #0]
 80050d8:	71fb      	strb	r3, [r7, #7]
 80050da:	4613      	mov	r3, r2
 80050dc:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 80050de:	2000      	movs	r0, #0
 80050e0:	f7fc f862 	bl	80011a8 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fc f8c3 	bl	8001278 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
 80050f6:	e00a      	b.n	800510e <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	18d4      	adds	r4, r2, r3
 80050fe:	2000      	movs	r0, #0
 8005100:	f7fc f8ba 	bl	8001278 <hal_spi>
 8005104:	4603      	mov	r3, r0
 8005106:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	3301      	adds	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
 800510e:	7bfa      	ldrb	r2, [r7, #15]
 8005110:	79bb      	ldrb	r3, [r7, #6]
 8005112:	429a      	cmp	r2, r3
 8005114:	d3f0      	bcc.n	80050f8 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 8005116:	2001      	movs	r0, #1
 8005118:	f7fc f846 	bl	80011a8 <hal_pin_nss>
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	bd90      	pop	{r4, r7, pc}

08005124 <opmode>:

static void opmode (u1_t mode) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 800512e:	2001      	movs	r0, #1
 8005130:	f7ff ff87 	bl	8005042 <readReg>
 8005134:	4603      	mov	r3, r0
 8005136:	b25b      	sxtb	r3, r3
 8005138:	f023 0307 	bic.w	r3, r3, #7
 800513c:	b25a      	sxtb	r2, r3
 800513e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005142:	4313      	orrs	r3, r2
 8005144:	b25b      	sxtb	r3, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	4619      	mov	r1, r3
 800514a:	2001      	movs	r0, #1
 800514c:	f7ff ff5c 	bl	8005008 <writeReg>
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <opmodeLora>:

static void opmodeLora() {
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	f043 0308 	orr.w	r3, r3, #8
 8005168:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	4619      	mov	r1, r3
 800516e:	2001      	movs	r0, #1
 8005170:	f7ff ff4a 	bl	8005008 <writeReg>
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <opmodeFSK>:

static void opmodeFSK() {
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
    u1_t u = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	f043 0308 	orr.w	r3, r3, #8
 800518c:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	4619      	mov	r1, r3
 8005192:	2001      	movs	r0, #1
 8005194:	f7ff ff38 	bl	8005008 <writeReg>
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 80051a6:	4b54      	ldr	r3, [pc, #336]	; (80052f8 <configLoraModem+0x158>)
 80051a8:	89db      	ldrh	r3, [r3, #14]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc f989 	bl	80014c2 <getSf>
 80051b0:	4603      	mov	r3, r0
 80051b2:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	71fb      	strb	r3, [r7, #7]
 80051b8:	2300      	movs	r3, #0
 80051ba:	71bb      	strb	r3, [r7, #6]
 80051bc:	2300      	movs	r3, #0
 80051be:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 80051c0:	4b4d      	ldr	r3, [pc, #308]	; (80052f8 <configLoraModem+0x158>)
 80051c2:	89db      	ldrh	r3, [r3, #14]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fc f98c 	bl	80014e2 <getBw>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d010      	beq.n	80051f2 <configLoraModem+0x52>
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	dc13      	bgt.n	80051fc <configLoraModem+0x5c>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <configLoraModem+0x3e>
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d005      	beq.n	80051e8 <configLoraModem+0x48>
 80051dc:	e00e      	b.n	80051fc <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80051e4:	71fb      	strb	r3, [r7, #7]
 80051e6:	e00b      	b.n	8005200 <configLoraModem+0x60>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051ee:	71fb      	strb	r3, [r7, #7]
 80051f0:	e006      	b.n	8005200 <configLoraModem+0x60>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80051f8:	71fb      	strb	r3, [r7, #7]
 80051fa:	e001      	b.n	8005200 <configLoraModem+0x60>
        default:
            ASSERT(0);
 80051fc:	f7fc f95a 	bl	80014b4 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 8005200:	4b3d      	ldr	r3, [pc, #244]	; (80052f8 <configLoraModem+0x158>)
 8005202:	89db      	ldrh	r3, [r3, #14]
 8005204:	4618      	mov	r0, r3
 8005206:	f7fc f97e 	bl	8001506 <getCr>
 800520a:	4603      	mov	r3, r0
 800520c:	2b03      	cmp	r3, #3
 800520e:	d81f      	bhi.n	8005250 <configLoraModem+0xb0>
 8005210:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <configLoraModem+0x78>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005229 	.word	0x08005229
 800521c:	08005233 	.word	0x08005233
 8005220:	0800523d 	.word	0x0800523d
 8005224:	08005247 	.word	0x08005247
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	f043 0302 	orr.w	r3, r3, #2
 800522e:	71fb      	strb	r3, [r7, #7]
 8005230:	e010      	b.n	8005254 <configLoraModem+0xb4>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	f043 0304 	orr.w	r3, r3, #4
 8005238:	71fb      	strb	r3, [r7, #7]
 800523a:	e00b      	b.n	8005254 <configLoraModem+0xb4>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	f043 0306 	orr.w	r3, r3, #6
 8005242:	71fb      	strb	r3, [r7, #7]
 8005244:	e006      	b.n	8005254 <configLoraModem+0xb4>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	f043 0308 	orr.w	r3, r3, #8
 800524c:	71fb      	strb	r3, [r7, #7]
 800524e:	e001      	b.n	8005254 <configLoraModem+0xb4>
        default:
            ASSERT(0);
 8005250:	f7fc f930 	bl	80014b4 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 8005254:	4b28      	ldr	r3, [pc, #160]	; (80052f8 <configLoraModem+0x158>)
 8005256:	89db      	ldrh	r3, [r3, #14]
 8005258:	4618      	mov	r0, r3
 800525a:	f7fc f9a6 	bl	80015aa <getIh>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00e      	beq.n	8005282 <configLoraModem+0xe2>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 800526c:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <configLoraModem+0x158>)
 800526e:	89db      	ldrh	r3, [r3, #14]
 8005270:	4618      	mov	r0, r3
 8005272:	f7fc f99a 	bl	80015aa <getIh>
 8005276:	4603      	mov	r3, r0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	4619      	mov	r1, r3
 800527c:	2022      	movs	r0, #34	; 0x22
 800527e:	f7ff fec3 	bl	8005008 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	4619      	mov	r1, r3
 8005286:	201d      	movs	r0, #29
 8005288:	f7ff febe 	bl	8005008 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 800528c:	793b      	ldrb	r3, [r7, #4]
 800528e:	3b01      	subs	r3, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	b2db      	uxtb	r3, r3
 8005296:	3370      	adds	r3, #112	; 0x70
 8005298:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 800529a:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <configLoraModem+0x158>)
 800529c:	89db      	ldrh	r3, [r3, #14]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fc f95c 	bl	800155c <getNocrc>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <configLoraModem+0x112>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 80052aa:	79bb      	ldrb	r3, [r7, #6]
 80052ac:	f043 0304 	orr.w	r3, r3, #4
 80052b0:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 80052b2:	79bb      	ldrb	r3, [r7, #6]
 80052b4:	4619      	mov	r1, r3
 80052b6:	201e      	movs	r0, #30
 80052b8:	f7ff fea6 	bl	8005008 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 80052bc:	2304      	movs	r3, #4
 80052be:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 80052c0:	793b      	ldrb	r3, [r7, #4]
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	d002      	beq.n	80052cc <configLoraModem+0x12c>
 80052c6:	793b      	ldrb	r3, [r7, #4]
 80052c8:	2b06      	cmp	r3, #6
 80052ca:	d10b      	bne.n	80052e4 <configLoraModem+0x144>
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <configLoraModem+0x158>)
 80052ce:	89db      	ldrh	r3, [r3, #14]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fc f906 	bl	80014e2 <getBw>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d103      	bne.n	80052e4 <configLoraModem+0x144>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 80052dc:	797b      	ldrb	r3, [r7, #5]
 80052de:	f043 0308 	orr.w	r3, r3, #8
 80052e2:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 80052e4:	797b      	ldrb	r3, [r7, #5]
 80052e6:	4619      	mov	r1, r3
 80052e8:	2026      	movs	r0, #38	; 0x26
 80052ea:	f7ff fe8d 	bl	8005008 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000138 	.word	0x20000138

080052fc <configChannel>:

static void configChannel () {
 80052fc:	b5b0      	push	{r4, r5, r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 8005302:	4c1b      	ldr	r4, [pc, #108]	; (8005370 <configChannel+0x74>)
 8005304:	68a4      	ldr	r4, [r4, #8]
 8005306:	2500      	movs	r5, #0
 8005308:	4622      	mov	r2, r4
 800530a:	462b      	mov	r3, r5
 800530c:	0b51      	lsrs	r1, r2, #13
 800530e:	04d0      	lsls	r0, r2, #19
 8005310:	4a18      	ldr	r2, [pc, #96]	; (8005374 <configChannel+0x78>)
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	f7fa ffaf 	bl	8000278 <__aeabi_uldivmod>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8005322:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	0c02      	lsrs	r2, r0, #16
 8005330:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005334:	0c0b      	lsrs	r3, r1, #16
 8005336:	b2d3      	uxtb	r3, r2
 8005338:	4619      	mov	r1, r3
 800533a:	2006      	movs	r0, #6
 800533c:	f7ff fe64 	bl	8005008 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	0a02      	lsrs	r2, r0, #8
 800534e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005352:	0a0b      	lsrs	r3, r1, #8
 8005354:	b2d3      	uxtb	r3, r2
 8005356:	4619      	mov	r1, r3
 8005358:	2007      	movs	r0, #7
 800535a:	f7ff fe55 	bl	8005008 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 800535e:	783b      	ldrb	r3, [r7, #0]
 8005360:	4619      	mov	r1, r3
 8005362:	2008      	movs	r0, #8
 8005364:	f7ff fe50 	bl	8005008 <writeReg>
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bdb0      	pop	{r4, r5, r7, pc}
 8005370:	20000138 	.word	0x20000138
 8005374:	01e84800 	.word	0x01e84800

08005378 <configPower>:



static void configPower () {
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 800537e:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <configPower+0x5c>)
 8005380:	7c9b      	ldrb	r3, [r3, #18]
 8005382:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 8005384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005388:	2b10      	cmp	r3, #16
 800538a:	dd02      	ble.n	8005392 <configPower+0x1a>
        pw = 15;
 800538c:	230f      	movs	r3, #15
 800538e:	71fb      	strb	r3, [r7, #7]
 8005390:	e005      	b.n	800539e <configPower+0x26>
    } else if(pw < 2) {
 8005392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005396:	2b01      	cmp	r3, #1
 8005398:	dc01      	bgt.n	800539e <configPower+0x26>
        pw = 2;
 800539a:	2302      	movs	r3, #2
 800539c:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	b25b      	sxtb	r3, r3
 80053a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	4619      	mov	r1, r3
 80053b0:	2009      	movs	r0, #9
 80053b2:	f7ff fe29 	bl	8005008 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 80053b6:	205a      	movs	r0, #90	; 0x5a
 80053b8:	f7ff fe43 	bl	8005042 <readReg>
 80053bc:	4603      	mov	r3, r0
 80053be:	f043 0304 	orr.w	r3, r3, #4
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	4619      	mov	r1, r3
 80053c6:	205a      	movs	r0, #90	; 0x5a
 80053c8:	f7ff fe1e 	bl	8005008 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000138 	.word	0x20000138

080053d8 <txfsk>:

static void txfsk () {
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 80053dc:	2110      	movs	r1, #16
 80053de:	2001      	movs	r0, #1
 80053e0:	f7ff fe12 	bl	8005008 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 80053e4:	2001      	movs	r0, #1
 80053e6:	f7ff fe2c 	bl	8005042 <readReg>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d001      	beq.n	80053f4 <txfsk+0x1c>
 80053f0:	f7fc f860 	bl	80014b4 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 80053f4:	2001      	movs	r0, #1
 80053f6:	f7ff fe95 	bl	8005124 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 80053fa:	2102      	movs	r1, #2
 80053fc:	2002      	movs	r0, #2
 80053fe:	f7ff fe03 	bl	8005008 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005402:	2180      	movs	r1, #128	; 0x80
 8005404:	2003      	movs	r0, #3
 8005406:	f7ff fdff 	bl	8005008 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 800540a:	2101      	movs	r1, #1
 800540c:	2004      	movs	r0, #4
 800540e:	f7ff fdfb 	bl	8005008 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005412:	2199      	movs	r1, #153	; 0x99
 8005414:	2005      	movs	r0, #5
 8005416:	f7ff fdf7 	bl	8005008 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 800541a:	2100      	movs	r1, #0
 800541c:	2025      	movs	r0, #37	; 0x25
 800541e:	f7ff fdf3 	bl	8005008 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 8005422:	2105      	movs	r1, #5
 8005424:	2026      	movs	r0, #38	; 0x26
 8005426:	f7ff fdef 	bl	8005008 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 800542a:	2112      	movs	r1, #18
 800542c:	2027      	movs	r0, #39	; 0x27
 800542e:	f7ff fdeb 	bl	8005008 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 8005432:	21d0      	movs	r1, #208	; 0xd0
 8005434:	2030      	movs	r0, #48	; 0x30
 8005436:	f7ff fde7 	bl	8005008 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	2031      	movs	r0, #49	; 0x31
 800543e:	f7ff fde3 	bl	8005008 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 8005442:	21c1      	movs	r1, #193	; 0xc1
 8005444:	2028      	movs	r0, #40	; 0x28
 8005446:	f7ff fddf 	bl	8005008 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 800544a:	2194      	movs	r1, #148	; 0x94
 800544c:	2029      	movs	r0, #41	; 0x29
 800544e:	f7ff fddb 	bl	8005008 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005452:	21c1      	movs	r1, #193	; 0xc1
 8005454:	202a      	movs	r0, #42	; 0x2a
 8005456:	f7ff fdd7 	bl	8005008 <writeReg>
    // configure frequency
    configChannel();
 800545a:	f7ff ff4f 	bl	80052fc <configChannel>
    // configure output power
    configPower();
 800545e:	f7ff ff8b 	bl	8005378 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 8005462:	2134      	movs	r1, #52	; 0x34
 8005464:	2040      	movs	r0, #64	; 0x40
 8005466:	f7ff fdcf 	bl	8005008 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 800546a:	4b10      	ldr	r3, [pc, #64]	; (80054ac <txfsk+0xd4>)
 800546c:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005470:	3301      	adds	r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	4619      	mov	r1, r3
 8005476:	2032      	movs	r0, #50	; 0x32
 8005478:	f7ff fdc6 	bl	8005008 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <txfsk+0xd4>)
 800547e:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005482:	4619      	mov	r1, r3
 8005484:	2000      	movs	r0, #0
 8005486:	f7ff fdbf 	bl	8005008 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800548a:	4b08      	ldr	r3, [pc, #32]	; (80054ac <txfsk+0xd4>)
 800548c:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005490:	461a      	mov	r2, r3
 8005492:	4907      	ldr	r1, [pc, #28]	; (80054b0 <txfsk+0xd8>)
 8005494:	2000      	movs	r0, #0
 8005496:	f7ff fdf0 	bl	800507a <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 800549a:	2001      	movs	r0, #1
 800549c:	f7fb fe79 	bl	8001192 <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 80054a0:	2003      	movs	r0, #3
 80054a2:	f7ff fe3f 	bl	8005124 <opmode>
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000138 	.word	0x20000138
 80054b0:	20000280 	.word	0x20000280

080054b4 <txlora>:

static void txlora () {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 80054b8:	f7ff fe4e 	bl	8005158 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80054bc:	2001      	movs	r0, #1
 80054be:	f7ff fdc0 	bl	8005042 <readReg>
 80054c2:	4603      	mov	r3, r0
 80054c4:	b25b      	sxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	db01      	blt.n	80054ce <txlora+0x1a>
 80054ca:	f7fb fff3 	bl	80014b4 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 80054ce:	2001      	movs	r0, #1
 80054d0:	f7ff fe28 	bl	8005124 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 80054d4:	f7ff fe64 	bl	80051a0 <configLoraModem>
    // configure frequency
    configChannel();
 80054d8:	f7ff ff10 	bl	80052fc <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 80054dc:	200a      	movs	r0, #10
 80054de:	f7ff fdb0 	bl	8005042 <readReg>
 80054e2:	4603      	mov	r3, r0
 80054e4:	b25b      	sxtb	r3, r3
 80054e6:	f023 030f 	bic.w	r3, r3, #15
 80054ea:	b25b      	sxtb	r3, r3
 80054ec:	f043 0308 	orr.w	r3, r3, #8
 80054f0:	b25b      	sxtb	r3, r3
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	4619      	mov	r1, r3
 80054f6:	200a      	movs	r0, #10
 80054f8:	f7ff fd86 	bl	8005008 <writeReg>
    configPower();
 80054fc:	f7ff ff3c 	bl	8005378 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005500:	2134      	movs	r1, #52	; 0x34
 8005502:	2039      	movs	r0, #57	; 0x39
 8005504:	f7ff fd80 	bl	8005008 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8005508:	21f0      	movs	r1, #240	; 0xf0
 800550a:	2040      	movs	r0, #64	; 0x40
 800550c:	f7ff fd7c 	bl	8005008 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005510:	21ff      	movs	r1, #255	; 0xff
 8005512:	2012      	movs	r0, #18
 8005514:	f7ff fd78 	bl	8005008 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8005518:	21f7      	movs	r1, #247	; 0xf7
 800551a:	2011      	movs	r0, #17
 800551c:	f7ff fd74 	bl	8005008 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005520:	2100      	movs	r1, #0
 8005522:	200e      	movs	r0, #14
 8005524:	f7ff fd70 	bl	8005008 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 8005528:	2100      	movs	r1, #0
 800552a:	200d      	movs	r0, #13
 800552c:	f7ff fd6c 	bl	8005008 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <txlora+0xac>)
 8005532:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005536:	4619      	mov	r1, r3
 8005538:	2022      	movs	r0, #34	; 0x22
 800553a:	f7ff fd65 	bl	8005008 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800553e:	4b08      	ldr	r3, [pc, #32]	; (8005560 <txlora+0xac>)
 8005540:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005544:	461a      	mov	r2, r3
 8005546:	4907      	ldr	r1, [pc, #28]	; (8005564 <txlora+0xb0>)
 8005548:	2000      	movs	r0, #0
 800554a:	f7ff fd96 	bl	800507a <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 800554e:	2001      	movs	r0, #1
 8005550:	f7fb fe1f 	bl	8001192 <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005554:	2003      	movs	r0, #3
 8005556:	f7ff fde5 	bl	8005124 <opmode>
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000138 	.word	0x20000138
 8005564:	20000280 	.word	0x20000280

08005568 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 800556c:	2001      	movs	r0, #1
 800556e:	f7ff fd68 	bl	8005042 <readReg>
 8005572:	4603      	mov	r3, r0
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <starttx+0x18>
 800557c:	f7fb ff9a 	bl	80014b4 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <starttx+0x38>)
 8005582:	89db      	ldrh	r3, [r3, #14]
 8005584:	4618      	mov	r0, r3
 8005586:	f7fb ff9c 	bl	80014c2 <getSf>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <starttx+0x2e>
        txfsk();
 8005590:	f7ff ff22 	bl	80053d8 <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8005594:	e001      	b.n	800559a <starttx+0x32>
        txlora();
 8005596:	f7ff ff8d 	bl	80054b4 <txlora>
}
 800559a:	bf00      	nop
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000138 	.word	0x20000138

080055a4 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 80055ae:	f7ff fdd3 	bl	8005158 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80055b2:	2001      	movs	r0, #1
 80055b4:	f7ff fd45 	bl	8005042 <readReg>
 80055b8:	4603      	mov	r3, r0
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	db01      	blt.n	80055c4 <rxlora+0x20>
 80055c0:	f7fb ff78 	bl	80014b4 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80055c4:	2001      	movs	r0, #1
 80055c6:	f7ff fdad 	bl	8005124 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d108      	bne.n	80055e2 <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 80055d0:	210a      	movs	r1, #10
 80055d2:	201d      	movs	r0, #29
 80055d4:	f7ff fd18 	bl	8005008 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 80055d8:	2170      	movs	r1, #112	; 0x70
 80055da:	201e      	movs	r0, #30
 80055dc:	f7ff fd14 	bl	8005008 <writeReg>
 80055e0:	e003      	b.n	80055ea <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 80055e2:	f7ff fddd 	bl	80051a0 <configLoraModem>
        // configure frequency
        configChannel();
 80055e6:	f7ff fe89 	bl	80052fc <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 80055ea:	2121      	movs	r1, #33	; 0x21
 80055ec:	200c      	movs	r0, #12
 80055ee:	f7ff fd0b 	bl	8005008 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 80055f2:	2140      	movs	r1, #64	; 0x40
 80055f4:	2023      	movs	r0, #35	; 0x23
 80055f6:	f7ff fd07 	bl	8005008 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 80055fa:	4b26      	ldr	r3, [pc, #152]	; (8005694 <rxlora+0xf0>)
 80055fc:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8005604:	2033      	movs	r0, #51	; 0x33
 8005606:	f7ff fd1c 	bl	8005042 <readReg>
 800560a:	4603      	mov	r3, r0
 800560c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005610:	b2db      	uxtb	r3, r3
 8005612:	4619      	mov	r1, r3
 8005614:	2033      	movs	r0, #51	; 0x33
 8005616:	f7ff fcf7 	bl	8005008 <writeReg>
 800561a:	e00a      	b.n	8005632 <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 800561c:	2033      	movs	r0, #51	; 0x33
 800561e:	f7ff fd10 	bl	8005042 <readReg>
 8005622:	4603      	mov	r3, r0
 8005624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4619      	mov	r1, r3
 800562c:	2033      	movs	r0, #51	; 0x33
 800562e:	f7ff fceb 	bl	8005008 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8005632:	4b18      	ldr	r3, [pc, #96]	; (8005694 <rxlora+0xf0>)
 8005634:	7c1b      	ldrb	r3, [r3, #16]
 8005636:	4619      	mov	r1, r3
 8005638:	201f      	movs	r0, #31
 800563a:	f7ff fce5 	bl	8005008 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 800563e:	2134      	movs	r1, #52	; 0x34
 8005640:	2039      	movs	r0, #57	; 0x39
 8005642:	f7ff fce1 	bl	8005008 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 8005646:	21c0      	movs	r1, #192	; 0xc0
 8005648:	2040      	movs	r0, #64	; 0x40
 800564a:	f7ff fcdd 	bl	8005008 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 800564e:	21ff      	movs	r1, #255	; 0xff
 8005650:	2012      	movs	r0, #18
 8005652:	f7ff fcd9 	bl	8005008 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	4a0f      	ldr	r2, [pc, #60]	; (8005698 <rxlora+0xf4>)
 800565a:	5cd3      	ldrb	r3, [r2, r3]
 800565c:	43db      	mvns	r3, r3
 800565e:	b2db      	uxtb	r3, r3
 8005660:	4619      	mov	r1, r3
 8005662:	2011      	movs	r0, #17
 8005664:	f7ff fcd0 	bl	8005008 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005668:	2000      	movs	r0, #0
 800566a:	f7fb fd92 	bl	8001192 <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d108      	bne.n	8005686 <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005674:	4b07      	ldr	r3, [pc, #28]	; (8005694 <rxlora+0xf0>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	f7fb fe70 	bl	800135e <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 800567e:	2006      	movs	r0, #6
 8005680:	f7ff fd50 	bl	8005124 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8005684:	e002      	b.n	800568c <rxlora+0xe8>
        opmode(OPMODE_RX); 
 8005686:	2005      	movs	r0, #5
 8005688:	f7ff fd4c 	bl	8005124 <opmode>
}
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20000138 	.word	0x20000138
 8005698:	0800a818 	.word	0x0800a818

0800569c <rxfsk>:

static void rxfsk (u1_t rxmode) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <rxfsk+0x14>
 80056ac:	f7fb ff02 	bl	80014b4 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 80056b0:	f7ff fd64 	bl	800517c <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 80056b4:	2001      	movs	r0, #1
 80056b6:	f7ff fcc4 	bl	8005042 <readReg>
 80056ba:	4603      	mov	r3, r0
 80056bc:	b25b      	sxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da01      	bge.n	80056c6 <rxfsk+0x2a>
 80056c2:	f7fb fef7 	bl	80014b4 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 80056c6:	2001      	movs	r0, #1
 80056c8:	f7ff fd2c 	bl	8005124 <opmode>
    // configure frequency
    configChannel();
 80056cc:	f7ff fe16 	bl	80052fc <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 80056d0:	2121      	movs	r1, #33	; 0x21
 80056d2:	200c      	movs	r0, #12
 80056d4:	f7ff fc98 	bl	8005008 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 80056d8:	211e      	movs	r1, #30
 80056da:	200d      	movs	r0, #13
 80056dc:	f7ff fc94 	bl	8005008 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 80056e0:	210b      	movs	r1, #11
 80056e2:	2012      	movs	r0, #18
 80056e4:	f7ff fc90 	bl	8005008 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 80056e8:	2112      	movs	r1, #18
 80056ea:	2013      	movs	r0, #19
 80056ec:	f7ff fc8c 	bl	8005008 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 80056f0:	21aa      	movs	r1, #170	; 0xaa
 80056f2:	201f      	movs	r0, #31
 80056f4:	f7ff fc88 	bl	8005008 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 80056f8:	2112      	movs	r1, #18
 80056fa:	2027      	movs	r0, #39	; 0x27
 80056fc:	f7ff fc84 	bl	8005008 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8005700:	21d8      	movs	r1, #216	; 0xd8
 8005702:	2030      	movs	r0, #48	; 0x30
 8005704:	f7ff fc80 	bl	8005008 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8005708:	2140      	movs	r1, #64	; 0x40
 800570a:	2031      	movs	r0, #49	; 0x31
 800570c:	f7ff fc7c 	bl	8005008 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8005710:	21c1      	movs	r1, #193	; 0xc1
 8005712:	2028      	movs	r0, #40	; 0x28
 8005714:	f7ff fc78 	bl	8005008 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005718:	2194      	movs	r1, #148	; 0x94
 800571a:	2029      	movs	r0, #41	; 0x29
 800571c:	f7ff fc74 	bl	8005008 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005720:	21c1      	movs	r1, #193	; 0xc1
 8005722:	202a      	movs	r0, #42	; 0x2a
 8005724:	f7ff fc70 	bl	8005008 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 8005728:	21ff      	movs	r1, #255	; 0xff
 800572a:	2021      	movs	r0, #33	; 0x21
 800572c:	f7ff fc6c 	bl	8005008 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005730:	2102      	movs	r1, #2
 8005732:	2002      	movs	r0, #2
 8005734:	f7ff fc68 	bl	8005008 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005738:	2180      	movs	r1, #128	; 0x80
 800573a:	2003      	movs	r0, #3
 800573c:	f7ff fc64 	bl	8005008 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005740:	2101      	movs	r1, #1
 8005742:	2004      	movs	r0, #4
 8005744:	f7ff fc60 	bl	8005008 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005748:	2199      	movs	r1, #153	; 0x99
 800574a:	2005      	movs	r0, #5
 800574c:	f7ff fc5c 	bl	8005008 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 8005750:	2138      	movs	r1, #56	; 0x38
 8005752:	2040      	movs	r0, #64	; 0x40
 8005754:	f7ff fc58 	bl	8005008 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005758:	2000      	movs	r0, #0
 800575a:	f7fb fd1a 	bl	8001192 <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <rxfsk+0xdc>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4618      	mov	r0, r3
 8005764:	f7fb fdfb 	bl	800135e <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 8005768:	2005      	movs	r0, #5
 800576a:	f7ff fcdb 	bl	8005124 <opmode>
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000138 	.word	0x20000138

0800577c <startrx>:

static void startrx (u1_t rxmode) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005786:	2001      	movs	r0, #1
 8005788:	f7ff fc5b 	bl	8005042 <readReg>
 800578c:	4603      	mov	r3, r0
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <startrx+0x1e>
 8005796:	f7fb fe8d 	bl	80014b4 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <startrx+0x48>)
 800579c:	89db      	ldrh	r3, [r3, #14]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fb fe8f 	bl	80014c2 <getSf>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d104      	bne.n	80057b4 <startrx+0x38>
        rxfsk(rxmode);
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff ff75 	bl	800569c <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 80057b2:	e003      	b.n	80057bc <startrx+0x40>
        rxlora(rxmode);
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff fef4 	bl	80055a4 <rxlora>
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000138 	.word	0x20000138

080057c8 <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 80057ce:	f7fb fe2f 	bl	8001430 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 80057d2:	2000      	movs	r0, #0
 80057d4:	f7fb fcfa 	bl	80011cc <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 80057d8:	f7ff fb40 	bl	8004e5c <os_getTime>
 80057dc:	4603      	mov	r3, r0
 80057de:	3320      	adds	r3, #32
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fb fdbc 	bl	800135e <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 80057e6:	2002      	movs	r0, #2
 80057e8:	f7fb fcf0 	bl	80011cc <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 80057ec:	f7ff fb36 	bl	8004e5c <os_getTime>
 80057f0:	4603      	mov	r3, r0
 80057f2:	33a0      	adds	r3, #160	; 0xa0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fb fdb2 	bl	800135e <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 80057fa:	2000      	movs	r0, #0
 80057fc:	f7ff fc92 	bl	8005124 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 8005800:	2042      	movs	r0, #66	; 0x42
 8005802:	f7ff fc1e 	bl	8005042 <readReg>
 8005806:	4603      	mov	r3, r0
 8005808:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	2b12      	cmp	r3, #18
 800580e:	d001      	beq.n	8005814 <radio_init+0x4c>
 8005810:	f7fb fe50 	bl	80014b4 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 8005814:	2002      	movs	r0, #2
 8005816:	f7ff fec5 	bl	80055a4 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 800581a:	bf00      	nop
 800581c:	2001      	movs	r0, #1
 800581e:	f7ff fc10 	bl	8005042 <readReg>
 8005822:	4603      	mov	r3, r0
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	2b05      	cmp	r3, #5
 800582a:	d1f7      	bne.n	800581c <radio_init+0x54>
    for(int i=1; i<16; i++) {
 800582c:	2301      	movs	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e02c      	b.n	800588c <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 8005832:	2300      	movs	r3, #0
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	e023      	b.n	8005880 <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 8005838:	bf00      	nop
 800583a:	202c      	movs	r0, #44	; 0x2c
 800583c:	f7ff fc01 	bl	8005042 <readReg>
 8005840:	4603      	mov	r3, r0
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	71bb      	strb	r3, [r7, #6]
 8005848:	79bc      	ldrb	r4, [r7, #6]
 800584a:	202c      	movs	r0, #44	; 0x2c
 800584c:	f7ff fbf9 	bl	8005042 <readReg>
 8005850:	4603      	mov	r3, r0
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	429c      	cmp	r4, r3
 8005858:	d0ef      	beq.n	800583a <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 800585a:	4a14      	ldr	r2, [pc, #80]	; (80058ac <radio_init+0xe4>)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	b25a      	sxtb	r2, r3
 8005866:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800586a:	4313      	orrs	r3, r2
 800586c:	b25b      	sxtb	r3, r3
 800586e:	b2d9      	uxtb	r1, r3
 8005870:	4a0e      	ldr	r2, [pc, #56]	; (80058ac <radio_init+0xe4>)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	460a      	mov	r2, r1
 8005878:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	3301      	adds	r3, #1
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b07      	cmp	r3, #7
 8005884:	ddd8      	ble.n	8005838 <radio_init+0x70>
    for(int i=1; i<16; i++) {
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b0f      	cmp	r3, #15
 8005890:	ddcf      	ble.n	8005832 <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 8005892:	4b06      	ldr	r3, [pc, #24]	; (80058ac <radio_init+0xe4>)
 8005894:	2210      	movs	r2, #16
 8005896:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 8005898:	2000      	movs	r0, #0
 800589a:	f7ff fc43 	bl	8005124 <opmode>

    hal_enableIRQs();
 800589e:	f7fb fdd7 	bl	8001450 <hal_enableIRQs>
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd90      	pop	{r4, r7, pc}
 80058aa:	bf00      	nop
 80058ac:	200003dc 	.word	0x200003dc

080058b0 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 80058b6:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <radio_rand1+0x48>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <radio_rand1+0x16>
 80058c2:	f7fb fdf7 	bl	80014b4 <hal_failed>
    if( i==16 ) {
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d106      	bne.n	80058da <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 80058cc:	2210      	movs	r2, #16
 80058ce:	490a      	ldr	r1, [pc, #40]	; (80058f8 <radio_rand1+0x48>)
 80058d0:	2000      	movs	r0, #0
 80058d2:	f7fa fecf 	bl	8000674 <os_aes>
        i = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	71fa      	strb	r2, [r7, #7]
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <radio_rand1+0x48>)
 80058e4:	5c9b      	ldrb	r3, [r3, r2]
 80058e6:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 80058e8:	4a03      	ldr	r2, [pc, #12]	; (80058f8 <radio_rand1+0x48>)
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	7013      	strb	r3, [r2, #0]
    return v;
 80058ee:	79bb      	ldrb	r3, [r7, #6]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	200003dc 	.word	0x200003dc

080058fc <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 8005906:	f7ff faa9 	bl	8004e5c <os_getTime>
 800590a:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 800590c:	2001      	movs	r0, #1
 800590e:	f7ff fb98 	bl	8005042 <readReg>
 8005912:	4603      	mov	r3, r0
 8005914:	b25b      	sxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	da74      	bge.n	8005a04 <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 800591a:	2012      	movs	r0, #18
 800591c:	f7ff fb91 	bl	8005042 <readReg>
 8005920:	4603      	mov	r3, r0
 8005922:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 8005924:	7a7b      	ldrb	r3, [r7, #9]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3b01      	subs	r3, #1
 8005932:	4a59      	ldr	r2, [pc, #356]	; (8005a98 <radio_irq_handler+0x19c>)
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e05c      	b.n	80059f2 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 8005938:	7a7b      	ldrb	r3, [r7, #9]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d04f      	beq.n	80059e2 <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 8005942:	4b55      	ldr	r3, [pc, #340]	; (8005a98 <radio_irq_handler+0x19c>)
 8005944:	89db      	ldrh	r3, [r3, #14]
 8005946:	4618      	mov	r0, r3
 8005948:	f7fb fdcb 	bl	80014e2 <getBw>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10d      	bne.n	800596e <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8005952:	4b51      	ldr	r3, [pc, #324]	; (8005a98 <radio_irq_handler+0x19c>)
 8005954:	89db      	ldrh	r3, [r3, #14]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fb fdb3 	bl	80014c2 <getSf>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	4b4e      	ldr	r3, [pc, #312]	; (8005a9c <radio_irq_handler+0x1a0>)
 8005962:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005966:	461a      	mov	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 800596e:	4a4a      	ldr	r2, [pc, #296]	; (8005a98 <radio_irq_handler+0x19c>)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8005974:	201d      	movs	r0, #29
 8005976:	f7ff fb64 	bl	8005042 <readReg>
 800597a:	4603      	mov	r3, r0
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <radio_irq_handler+0x94>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 8005984:	2022      	movs	r0, #34	; 0x22
 8005986:	f7ff fb5c 	bl	8005042 <readReg>
 800598a:	4603      	mov	r3, r0
 800598c:	461a      	mov	r2, r3
 800598e:	e004      	b.n	800599a <radio_irq_handler+0x9e>
 8005990:	2013      	movs	r0, #19
 8005992:	f7ff fb56 	bl	8005042 <readReg>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 800599a:	4b3f      	ldr	r3, [pc, #252]	; (8005a98 <radio_irq_handler+0x19c>)
 800599c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 80059a0:	2010      	movs	r0, #16
 80059a2:	f7ff fb4e 	bl	8005042 <readReg>
 80059a6:	4603      	mov	r3, r0
 80059a8:	4619      	mov	r1, r3
 80059aa:	200d      	movs	r0, #13
 80059ac:	f7ff fb2c 	bl	8005008 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80059b0:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <radio_irq_handler+0x19c>)
 80059b2:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80059b6:	461a      	mov	r2, r3
 80059b8:	4939      	ldr	r1, [pc, #228]	; (8005aa0 <radio_irq_handler+0x1a4>)
 80059ba:	2000      	movs	r0, #0
 80059bc:	f7ff fb87 	bl	80050ce <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 80059c0:	2019      	movs	r0, #25
 80059c2:	f7ff fb3e 	bl	8005042 <readReg>
 80059c6:	4603      	mov	r3, r0
 80059c8:	b25a      	sxtb	r2, r3
 80059ca:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <radio_irq_handler+0x19c>)
 80059cc:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 80059ce:	201a      	movs	r0, #26
 80059d0:	f7ff fb37 	bl	8005042 <readReg>
 80059d4:	4603      	mov	r3, r0
 80059d6:	3b3d      	subs	r3, #61	; 0x3d
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	b25a      	sxtb	r2, r3
 80059dc:	4b2e      	ldr	r3, [pc, #184]	; (8005a98 <radio_irq_handler+0x19c>)
 80059de:	731a      	strb	r2, [r3, #12]
 80059e0:	e007      	b.n	80059f2 <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 80059e2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da03      	bge.n	80059f2 <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 80059ea:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <radio_irq_handler+0x19c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 80059f2:	21ff      	movs	r1, #255	; 0xff
 80059f4:	2011      	movs	r0, #17
 80059f6:	f7ff fb07 	bl	8005008 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 80059fa:	21ff      	movs	r1, #255	; 0xff
 80059fc:	2012      	movs	r0, #18
 80059fe:	f7ff fb03 	bl	8005008 <writeReg>
 8005a02:	e03c      	b.n	8005a7e <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 8005a04:	203e      	movs	r0, #62	; 0x3e
 8005a06:	f7ff fb1c 	bl	8005042 <readReg>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 8005a0e:	203f      	movs	r0, #63	; 0x3f
 8005a10:	f7ff fb17 	bl	8005042 <readReg>
 8005a14:	4603      	mov	r3, r0
 8005a16:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 8005a18:	7abb      	ldrb	r3, [r7, #10]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 8005a22:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <radio_irq_handler+0x19c>)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	e029      	b.n	8005a7e <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 8005a2a:	7abb      	ldrb	r3, [r7, #10]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d019      	beq.n	8005a68 <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 8005a34:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <radio_irq_handler+0x19c>)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 8005a3a:	2032      	movs	r0, #50	; 0x32
 8005a3c:	f7ff fb01 	bl	8005042 <readReg>
 8005a40:	4603      	mov	r3, r0
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <radio_irq_handler+0x19c>)
 8005a46:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005a4a:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <radio_irq_handler+0x19c>)
 8005a4c:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8005a50:	461a      	mov	r2, r3
 8005a52:	4913      	ldr	r1, [pc, #76]	; (8005aa0 <radio_irq_handler+0x1a4>)
 8005a54:	2000      	movs	r0, #0
 8005a56:	f7ff fb3a 	bl	80050ce <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <radio_irq_handler+0x19c>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <radio_irq_handler+0x19c>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	731a      	strb	r2, [r3, #12]
 8005a66:	e00a      	b.n	8005a7e <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 8005a68:	7afb      	ldrb	r3, [r7, #11]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 8005a72:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <radio_irq_handler+0x19c>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8005a7a:	e000      	b.n	8005a7e <radio_irq_handler+0x182>
        } else {
            while(1);
 8005a7c:	e7fe      	b.n	8005a7c <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f7ff fb50 	bl	8005124 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <radio_irq_handler+0x19c>)
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4806      	ldr	r0, [pc, #24]	; (8005aa4 <radio_irq_handler+0x1a8>)
 8005a8c:	f7ff fa2a 	bl	8004ee4 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000138 	.word	0x20000138
 8005a9c:	0800a81c 	.word	0x0800a81c
 8005aa0:	20000280 	.word	0x20000280
 8005aa4:	2000014c 	.word	0x2000014c

08005aa8 <os_radio>:

void os_radio (u1_t mode) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 8005ab2:	f7fb fcbd 	bl	8001430 <hal_disableIRQs>
    switch (mode) {
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d81a      	bhi.n	8005af2 <os_radio+0x4a>
 8005abc:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <os_radio+0x1c>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005ad5 	.word	0x08005ad5
 8005ac8:	08005add 	.word	0x08005add
 8005acc:	08005ae3 	.word	0x08005ae3
 8005ad0:	08005aeb 	.word	0x08005aeb
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f7ff fb25 	bl	8005124 <opmode>
        break;
 8005ada:	e00a      	b.n	8005af2 <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8005adc:	f7ff fd44 	bl	8005568 <starttx>
        break;
 8005ae0:	e007      	b.n	8005af2 <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f7ff fe4a 	bl	800577c <startrx>
        break;
 8005ae8:	e003      	b.n	8005af2 <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 8005aea:	2001      	movs	r0, #1
 8005aec:	f7ff fe46 	bl	800577c <startrx>
        break;
 8005af0:	bf00      	nop
    }
    hal_enableIRQs();
 8005af2:	f7fb fcad 	bl	8001450 <hal_enableIRQs>
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop

08005b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <HAL_MspInit+0x4c>)
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0e:	4a0f      	ldr	r2, [pc, #60]	; (8005b4c <HAL_MspInit+0x4c>)
 8005b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b14:	6453      	str	r3, [r2, #68]	; 0x44
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <HAL_MspInit+0x4c>)
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b22:	2300      	movs	r3, #0
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <HAL_MspInit+0x4c>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	4a08      	ldr	r2, [pc, #32]	; (8005b4c <HAL_MspInit+0x4c>)
 8005b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b30:	6413      	str	r3, [r2, #64]	; 0x40
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <HAL_MspInit+0x4c>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40023800 	.word	0x40023800

08005b50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	605a      	str	r2, [r3, #4]
 8005b62:	609a      	str	r2, [r3, #8]
 8005b64:	60da      	str	r2, [r3, #12]
 8005b66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a19      	ldr	r2, [pc, #100]	; (8005bd4 <HAL_SPI_MspInit+0x84>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d12b      	bne.n	8005bca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <HAL_SPI_MspInit+0x88>)
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7a:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <HAL_SPI_MspInit+0x88>)
 8005b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b80:	6453      	str	r3, [r2, #68]	; 0x44
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <HAL_SPI_MspInit+0x88>)
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <HAL_SPI_MspInit+0x88>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	4a10      	ldr	r2, [pc, #64]	; (8005bd8 <HAL_SPI_MspInit+0x88>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <HAL_SPI_MspInit+0x88>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005baa:	23e0      	movs	r3, #224	; 0xe0
 8005bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005bba:	2305      	movs	r3, #5
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bbe:	f107 0314 	add.w	r3, r7, #20
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4805      	ldr	r0, [pc, #20]	; (8005bdc <HAL_SPI_MspInit+0x8c>)
 8005bc6:	f000 fab1 	bl	800612c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005bca:	bf00      	nop
 8005bcc:	3728      	adds	r7, #40	; 0x28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40013000 	.word	0x40013000
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	40020000 	.word	0x40020000

08005be0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a0e      	ldr	r2, [pc, #56]	; (8005c28 <HAL_TIM_OC_MspInit+0x48>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d115      	bne.n	8005c1e <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <HAL_TIM_OC_MspInit+0x4c>)
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <HAL_TIM_OC_MspInit+0x4c>)
 8005bfc:	f043 0304 	orr.w	r3, r3, #4
 8005c00:	6413      	str	r3, [r2, #64]	; 0x40
 8005c02:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <HAL_TIM_OC_MspInit+0x4c>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2100      	movs	r1, #0
 8005c12:	201e      	movs	r0, #30
 8005c14:	f000 fa3a 	bl	800608c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005c18:	201e      	movs	r0, #30
 8005c1a:	f000 fa63 	bl	80060e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40000800 	.word	0x40000800
 8005c2c:	40023800 	.word	0x40023800

08005c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	; 0x28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c38:	f107 0314 	add.w	r3, r7, #20
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	60da      	str	r2, [r3, #12]
 8005c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a19      	ldr	r2, [pc, #100]	; (8005cb4 <HAL_UART_MspInit+0x84>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d12c      	bne.n	8005cac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	4b18      	ldr	r3, [pc, #96]	; (8005cb8 <HAL_UART_MspInit+0x88>)
 8005c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5a:	4a17      	ldr	r2, [pc, #92]	; (8005cb8 <HAL_UART_MspInit+0x88>)
 8005c5c:	f043 0310 	orr.w	r3, r3, #16
 8005c60:	6453      	str	r3, [r2, #68]	; 0x44
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <HAL_UART_MspInit+0x88>)
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <HAL_UART_MspInit+0x88>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	4a10      	ldr	r2, [pc, #64]	; (8005cb8 <HAL_UART_MspInit+0x88>)
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <HAL_UART_MspInit+0x88>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005c8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c90:	2302      	movs	r3, #2
 8005c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c9c:	2307      	movs	r3, #7
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca0:	f107 0314 	add.w	r3, r7, #20
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4805      	ldr	r0, [pc, #20]	; (8005cbc <HAL_UART_MspInit+0x8c>)
 8005ca8:	f000 fa40 	bl	800612c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005cac:	bf00      	nop
 8005cae:	3728      	adds	r7, #40	; 0x28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40011000 	.word	0x40011000
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	40020000 	.word	0x40020000

08005cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005cc4:	e7fe      	b.n	8005cc4 <NMI_Handler+0x4>

08005cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cca:	e7fe      	b.n	8005cca <HardFault_Handler+0x4>

08005ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cd0:	e7fe      	b.n	8005cd0 <MemManage_Handler+0x4>

08005cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cd6:	e7fe      	b.n	8005cd6 <BusFault_Handler+0x4>

08005cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cdc:	e7fe      	b.n	8005cdc <UsageFault_Handler+0x4>

08005cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ce2:	bf00      	nop
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cf0:	bf00      	nop
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cfe:	bf00      	nop
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d0c:	f000 f8ae 	bl	8005e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d10:	bf00      	nop
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8005d18:	2002      	movs	r0, #2
 8005d1a:	f000 fcd3 	bl	80066c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005d1e:	bf00      	nop
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005d28:	4802      	ldr	r0, [pc, #8]	; (8005d34 <TIM4_IRQHandler+0x10>)
 8005d2a:	f001 ffff 	bl	8007d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005d2e:	bf00      	nop
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	2000033c 	.word	0x2000033c

08005d38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8005d3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005d40:	f000 fcc0 	bl	80066c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 8005d44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005d48:	f000 fcbc 	bl	80066c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005d4c:	bf00      	nop
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <SystemInit+0x20>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	4a05      	ldr	r2, [pc, #20]	; (8005d70 <SystemInit+0x20>)
 8005d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d64:	bf00      	nop
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	e000ed00 	.word	0xe000ed00

08005d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d78:	480d      	ldr	r0, [pc, #52]	; (8005db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005d7a:	490e      	ldr	r1, [pc, #56]	; (8005db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d7c:	4a0e      	ldr	r2, [pc, #56]	; (8005db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d80:	e002      	b.n	8005d88 <LoopCopyDataInit>

08005d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d86:	3304      	adds	r3, #4

08005d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d8c:	d3f9      	bcc.n	8005d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d8e:	4a0b      	ldr	r2, [pc, #44]	; (8005dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005d90:	4c0b      	ldr	r4, [pc, #44]	; (8005dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d94:	e001      	b.n	8005d9a <LoopFillZerobss>

08005d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d98:	3204      	adds	r2, #4

08005d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d9c:	d3fb      	bcc.n	8005d96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005d9e:	f7ff ffd7 	bl	8005d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005da2:	f003 fa01 	bl	80091a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005da6:	f7fe fe31 	bl	8004a0c <main>
  bx  lr    
 8005daa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005db4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8005db8:	0800a854 	.word	0x0800a854
  ldr r2, =_sbss
 8005dbc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8005dc0:	200003f0 	.word	0x200003f0

08005dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dc4:	e7fe      	b.n	8005dc4 <ADC_IRQHandler>
	...

08005dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005dcc:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <HAL_Init+0x40>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a0d      	ldr	r2, [pc, #52]	; (8005e08 <HAL_Init+0x40>)
 8005dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_Init+0x40>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <HAL_Init+0x40>)
 8005dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <HAL_Init+0x40>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a07      	ldr	r2, [pc, #28]	; (8005e08 <HAL_Init+0x40>)
 8005dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005df0:	2003      	movs	r0, #3
 8005df2:	f000 f92b 	bl	800604c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005df6:	200f      	movs	r0, #15
 8005df8:	f000 f808 	bl	8005e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005dfc:	f7ff fe80 	bl	8005b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	40023c00 	.word	0x40023c00

08005e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e14:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <HAL_InitTick+0x54>)
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <HAL_InitTick+0x58>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 f972 	bl	8006114 <HAL_SYSTICK_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e00e      	b.n	8005e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b0f      	cmp	r3, #15
 8005e3e:	d80a      	bhi.n	8005e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e40:	2200      	movs	r2, #0
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	f000 f920 	bl	800608c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e4c:	4a06      	ldr	r2, [pc, #24]	; (8005e68 <HAL_InitTick+0x5c>)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e000      	b.n	8005e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000048 	.word	0x20000048
 8005e64:	20000050 	.word	0x20000050
 8005e68:	2000004c 	.word	0x2000004c

08005e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e70:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <HAL_IncTick+0x20>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_IncTick+0x24>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	4a04      	ldr	r2, [pc, #16]	; (8005e90 <HAL_IncTick+0x24>)
 8005e7e:	6013      	str	r3, [r2, #0]
}
 8005e80:	bf00      	nop
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20000050 	.word	0x20000050
 8005e90:	200003ec 	.word	0x200003ec

08005e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  return uwTick;
 8005e98:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <HAL_GetTick+0x14>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	200003ec 	.word	0x200003ec

08005eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ede:	4a04      	ldr	r2, [pc, #16]	; (8005ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	60d3      	str	r3, [r2, #12]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	e000ed00 	.word	0xe000ed00

08005ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ef8:	4b04      	ldr	r3, [pc, #16]	; (8005f0c <__NVIC_GetPriorityGrouping+0x18>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	f003 0307 	and.w	r3, r3, #7
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	e000ed00 	.word	0xe000ed00

08005f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	db0b      	blt.n	8005f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	f003 021f 	and.w	r2, r3, #31
 8005f28:	4907      	ldr	r1, [pc, #28]	; (8005f48 <__NVIC_EnableIRQ+0x38>)
 8005f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	2001      	movs	r0, #1
 8005f32:	fa00 f202 	lsl.w	r2, r0, r2
 8005f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	e000e100 	.word	0xe000e100

08005f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	6039      	str	r1, [r7, #0]
 8005f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	db0a      	blt.n	8005f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	490c      	ldr	r1, [pc, #48]	; (8005f98 <__NVIC_SetPriority+0x4c>)
 8005f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f6a:	0112      	lsls	r2, r2, #4
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	440b      	add	r3, r1
 8005f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f74:	e00a      	b.n	8005f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	4908      	ldr	r1, [pc, #32]	; (8005f9c <__NVIC_SetPriority+0x50>)
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	3b04      	subs	r3, #4
 8005f84:	0112      	lsls	r2, r2, #4
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	440b      	add	r3, r1
 8005f8a:	761a      	strb	r2, [r3, #24]
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	e000e100 	.word	0xe000e100
 8005f9c:	e000ed00 	.word	0xe000ed00

08005fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b089      	sub	sp, #36	; 0x24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f1c3 0307 	rsb	r3, r3, #7
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	bf28      	it	cs
 8005fbe:	2304      	movcs	r3, #4
 8005fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	2b06      	cmp	r3, #6
 8005fc8:	d902      	bls.n	8005fd0 <NVIC_EncodePriority+0x30>
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3b03      	subs	r3, #3
 8005fce:	e000      	b.n	8005fd2 <NVIC_EncodePriority+0x32>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43da      	mvns	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	43d9      	mvns	r1, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ff8:	4313      	orrs	r3, r2
         );
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3724      	adds	r7, #36	; 0x24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3b01      	subs	r3, #1
 8006014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006018:	d301      	bcc.n	800601e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800601a:	2301      	movs	r3, #1
 800601c:	e00f      	b.n	800603e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800601e:	4a0a      	ldr	r2, [pc, #40]	; (8006048 <SysTick_Config+0x40>)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3b01      	subs	r3, #1
 8006024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006026:	210f      	movs	r1, #15
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	f7ff ff8e 	bl	8005f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <SysTick_Config+0x40>)
 8006032:	2200      	movs	r2, #0
 8006034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006036:	4b04      	ldr	r3, [pc, #16]	; (8006048 <SysTick_Config+0x40>)
 8006038:	2207      	movs	r2, #7
 800603a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	e000e010 	.word	0xe000e010

0800604c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b07      	cmp	r3, #7
 8006058:	d00f      	beq.n	800607a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b06      	cmp	r3, #6
 800605e:	d00c      	beq.n	800607a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b05      	cmp	r3, #5
 8006064:	d009      	beq.n	800607a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b04      	cmp	r3, #4
 800606a:	d006      	beq.n	800607a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d003      	beq.n	800607a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006072:	2190      	movs	r1, #144	; 0x90
 8006074:	4804      	ldr	r0, [pc, #16]	; (8006088 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8006076:	f7fe fed4 	bl	8004e22 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff ff16 	bl	8005eac <__NVIC_SetPriorityGrouping>
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	080094ac 	.word	0x080094ac

0800608c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b0f      	cmp	r3, #15
 80060a2:	d903      	bls.n	80060ac <HAL_NVIC_SetPriority+0x20>
 80060a4:	21a8      	movs	r1, #168	; 0xa8
 80060a6:	480e      	ldr	r0, [pc, #56]	; (80060e0 <HAL_NVIC_SetPriority+0x54>)
 80060a8:	f7fe febb 	bl	8004e22 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	d903      	bls.n	80060ba <HAL_NVIC_SetPriority+0x2e>
 80060b2:	21a9      	movs	r1, #169	; 0xa9
 80060b4:	480a      	ldr	r0, [pc, #40]	; (80060e0 <HAL_NVIC_SetPriority+0x54>)
 80060b6:	f7fe feb4 	bl	8004e22 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060ba:	f7ff ff1b 	bl	8005ef4 <__NVIC_GetPriorityGrouping>
 80060be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	6978      	ldr	r0, [r7, #20]
 80060c6:	f7ff ff6b 	bl	8005fa0 <NVIC_EncodePriority>
 80060ca:	4602      	mov	r2, r0
 80060cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060d0:	4611      	mov	r1, r2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff ff3a 	bl	8005f4c <__NVIC_SetPriority>
}
 80060d8:	bf00      	nop
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	080094ac 	.word	0x080094ac

080060e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80060ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da03      	bge.n	80060fe <HAL_NVIC_EnableIRQ+0x1a>
 80060f6:	21bc      	movs	r1, #188	; 0xbc
 80060f8:	4805      	ldr	r0, [pc, #20]	; (8006110 <HAL_NVIC_EnableIRQ+0x2c>)
 80060fa:	f7fe fe92 	bl	8004e22 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff ff04 	bl	8005f10 <__NVIC_EnableIRQ>
}
 8006108:	bf00      	nop
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	080094ac 	.word	0x080094ac

08006114 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff ff73 	bl	8006008 <SysTick_Config>
 8006122:	4603      	mov	r3, r0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800613a:	2300      	movs	r3, #0
 800613c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800613e:	2300      	movs	r3, #0
 8006140:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a33      	ldr	r2, [pc, #204]	; (8006214 <HAL_GPIO_Init+0xe8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d017      	beq.n	800617a <HAL_GPIO_Init+0x4e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a32      	ldr	r2, [pc, #200]	; (8006218 <HAL_GPIO_Init+0xec>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_GPIO_Init+0x4e>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a31      	ldr	r2, [pc, #196]	; (800621c <HAL_GPIO_Init+0xf0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00f      	beq.n	800617a <HAL_GPIO_Init+0x4e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a30      	ldr	r2, [pc, #192]	; (8006220 <HAL_GPIO_Init+0xf4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <HAL_GPIO_Init+0x4e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2f      	ldr	r2, [pc, #188]	; (8006224 <HAL_GPIO_Init+0xf8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <HAL_GPIO_Init+0x4e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a2e      	ldr	r2, [pc, #184]	; (8006228 <HAL_GPIO_Init+0xfc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <HAL_GPIO_Init+0x4e>
 8006172:	21ac      	movs	r1, #172	; 0xac
 8006174:	482d      	ldr	r0, [pc, #180]	; (800622c <HAL_GPIO_Init+0x100>)
 8006176:	f7fe fe54 	bl	8004e22 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <HAL_GPIO_Init+0x64>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	041b      	lsls	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_GPIO_Init+0x6c>
 8006190:	21ad      	movs	r1, #173	; 0xad
 8006192:	4826      	ldr	r0, [pc, #152]	; (800622c <HAL_GPIO_Init+0x100>)
 8006194:	f7fe fe45 	bl	8004e22 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d035      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d031      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b11      	cmp	r3, #17
 80061ae:	d02d      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d029      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b12      	cmp	r3, #18
 80061be:	d025      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80061c8:	d020      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80061d2:	d01b      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80061dc:	d016      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80061e6:	d011      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80061f0:	d00c      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80061fa:	d007      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b03      	cmp	r3, #3
 8006202:	d003      	beq.n	800620c <HAL_GPIO_Init+0xe0>
 8006204:	21ae      	movs	r1, #174	; 0xae
 8006206:	4809      	ldr	r0, [pc, #36]	; (800622c <HAL_GPIO_Init+0x100>)
 8006208:	f7fe fe0b 	bl	8004e22 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e20c      	b.n	800662c <HAL_GPIO_Init+0x500>
 8006212:	bf00      	nop
 8006214:	40020000 	.word	0x40020000
 8006218:	40020400 	.word	0x40020400
 800621c:	40020800 	.word	0x40020800
 8006220:	40020c00 	.word	0x40020c00
 8006224:	40021000 	.word	0x40021000
 8006228:	40021c00 	.word	0x40021c00
 800622c:	080094e8 	.word	0x080094e8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006230:	2201      	movs	r2, #1
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4013      	ands	r3, r2
 8006242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	429a      	cmp	r2, r3
 800624a:	f040 81ec 	bne.w	8006626 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b01      	cmp	r3, #1
 8006258:	d005      	beq.n	8006266 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006262:	2b02      	cmp	r3, #2
 8006264:	d144      	bne.n	80062f0 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00f      	beq.n	800628e <HAL_GPIO_Init+0x162>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d00b      	beq.n	800628e <HAL_GPIO_Init+0x162>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d007      	beq.n	800628e <HAL_GPIO_Init+0x162>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	2b03      	cmp	r3, #3
 8006284:	d003      	beq.n	800628e <HAL_GPIO_Init+0x162>
 8006286:	21c0      	movs	r1, #192	; 0xc0
 8006288:	4884      	ldr	r0, [pc, #528]	; (800649c <HAL_GPIO_Init+0x370>)
 800628a:	f7fe fdca 	bl	8004e22 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	2203      	movs	r2, #3
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	43db      	mvns	r3, r3
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	4013      	ands	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062c4:	2201      	movs	r2, #1
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	43db      	mvns	r3, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4013      	ands	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	091b      	lsrs	r3, r3, #4
 80062da:	f003 0201 	and.w	r2, r3, #1
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d027      	beq.n	800634c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <HAL_GPIO_Init+0x1f0>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d007      	beq.n	800631c <HAL_GPIO_Init+0x1f0>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d003      	beq.n	800631c <HAL_GPIO_Init+0x1f0>
 8006314:	21d1      	movs	r1, #209	; 0xd1
 8006316:	4861      	ldr	r0, [pc, #388]	; (800649c <HAL_GPIO_Init+0x370>)
 8006318:	f7fe fd83 	bl	8004e22 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	2203      	movs	r2, #3
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	43db      	mvns	r3, r3
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	4013      	ands	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4313      	orrs	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b02      	cmp	r3, #2
 8006356:	f040 80a3 	bne.w	80064a0 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d077      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b09      	cmp	r3, #9
 8006368:	d073      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d06f      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d06b      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d067      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d063      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d05f      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d05b      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d057      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d053      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d04f      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d04b      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d047      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d043      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d03f      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b05      	cmp	r3, #5
 80063d8:	d03b      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b05      	cmp	r3, #5
 80063e0:	d037      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b06      	cmp	r3, #6
 80063e8:	d033      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b06      	cmp	r3, #6
 80063f0:	d02f      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b05      	cmp	r3, #5
 80063f8:	d02b      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b06      	cmp	r3, #6
 8006400:	d027      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b07      	cmp	r3, #7
 8006408:	d023      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	2b07      	cmp	r3, #7
 8006410:	d01f      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b07      	cmp	r3, #7
 8006418:	d01b      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b08      	cmp	r3, #8
 8006420:	d017      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b0a      	cmp	r3, #10
 8006428:	d013      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b09      	cmp	r3, #9
 8006430:	d00f      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b09      	cmp	r3, #9
 8006438:	d00b      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b0c      	cmp	r3, #12
 8006440:	d007      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b0f      	cmp	r3, #15
 8006448:	d003      	beq.n	8006452 <HAL_GPIO_Init+0x326>
 800644a:	21de      	movs	r1, #222	; 0xde
 800644c:	4813      	ldr	r0, [pc, #76]	; (800649c <HAL_GPIO_Init+0x370>)
 800644e:	f7fe fce8 	bl	8004e22 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	08da      	lsrs	r2, r3, #3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3208      	adds	r2, #8
 800645a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	220f      	movs	r2, #15
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	43db      	mvns	r3, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4013      	ands	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	4313      	orrs	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	08da      	lsrs	r2, r3, #3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3208      	adds	r2, #8
 8006494:	69b9      	ldr	r1, [r7, #24]
 8006496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800649a:	e001      	b.n	80064a0 <HAL_GPIO_Init+0x374>
 800649c:	080094e8 	.word	0x080094e8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	2203      	movs	r2, #3
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4013      	ands	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f003 0203 	and.w	r2, r3, #3
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80a2 	beq.w	8006626 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	4b56      	ldr	r3, [pc, #344]	; (8006640 <HAL_GPIO_Init+0x514>)
 80064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ea:	4a55      	ldr	r2, [pc, #340]	; (8006640 <HAL_GPIO_Init+0x514>)
 80064ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064f0:	6453      	str	r3, [r2, #68]	; 0x44
 80064f2:	4b53      	ldr	r3, [pc, #332]	; (8006640 <HAL_GPIO_Init+0x514>)
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064fe:	4a51      	ldr	r2, [pc, #324]	; (8006644 <HAL_GPIO_Init+0x518>)
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	089b      	lsrs	r3, r3, #2
 8006504:	3302      	adds	r3, #2
 8006506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800650a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	220f      	movs	r2, #15
 8006516:	fa02 f303 	lsl.w	r3, r2, r3
 800651a:	43db      	mvns	r3, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	4013      	ands	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a48      	ldr	r2, [pc, #288]	; (8006648 <HAL_GPIO_Init+0x51c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d019      	beq.n	800655e <HAL_GPIO_Init+0x432>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a47      	ldr	r2, [pc, #284]	; (800664c <HAL_GPIO_Init+0x520>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_GPIO_Init+0x42e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a46      	ldr	r2, [pc, #280]	; (8006650 <HAL_GPIO_Init+0x524>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00d      	beq.n	8006556 <HAL_GPIO_Init+0x42a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a45      	ldr	r2, [pc, #276]	; (8006654 <HAL_GPIO_Init+0x528>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d007      	beq.n	8006552 <HAL_GPIO_Init+0x426>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a44      	ldr	r2, [pc, #272]	; (8006658 <HAL_GPIO_Init+0x52c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d101      	bne.n	800654e <HAL_GPIO_Init+0x422>
 800654a:	2304      	movs	r3, #4
 800654c:	e008      	b.n	8006560 <HAL_GPIO_Init+0x434>
 800654e:	2307      	movs	r3, #7
 8006550:	e006      	b.n	8006560 <HAL_GPIO_Init+0x434>
 8006552:	2303      	movs	r3, #3
 8006554:	e004      	b.n	8006560 <HAL_GPIO_Init+0x434>
 8006556:	2302      	movs	r3, #2
 8006558:	e002      	b.n	8006560 <HAL_GPIO_Init+0x434>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <HAL_GPIO_Init+0x434>
 800655e:	2300      	movs	r3, #0
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	f002 0203 	and.w	r2, r2, #3
 8006566:	0092      	lsls	r2, r2, #2
 8006568:	4093      	lsls	r3, r2
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006570:	4934      	ldr	r1, [pc, #208]	; (8006644 <HAL_GPIO_Init+0x518>)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	089b      	lsrs	r3, r3, #2
 8006576:	3302      	adds	r3, #2
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800657e:	4b37      	ldr	r3, [pc, #220]	; (800665c <HAL_GPIO_Init+0x530>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	43db      	mvns	r3, r3
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	4013      	ands	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065a2:	4a2e      	ldr	r2, [pc, #184]	; (800665c <HAL_GPIO_Init+0x530>)
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065a8:	4b2c      	ldr	r3, [pc, #176]	; (800665c <HAL_GPIO_Init+0x530>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	43db      	mvns	r3, r3
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	4013      	ands	r3, r2
 80065b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065cc:	4a23      	ldr	r2, [pc, #140]	; (800665c <HAL_GPIO_Init+0x530>)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065d2:	4b22      	ldr	r3, [pc, #136]	; (800665c <HAL_GPIO_Init+0x530>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	43db      	mvns	r3, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4013      	ands	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065f6:	4a19      	ldr	r2, [pc, #100]	; (800665c <HAL_GPIO_Init+0x530>)
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065fc:	4b17      	ldr	r3, [pc, #92]	; (800665c <HAL_GPIO_Init+0x530>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	43db      	mvns	r3, r3
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	4013      	ands	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006620:	4a0e      	ldr	r2, [pc, #56]	; (800665c <HAL_GPIO_Init+0x530>)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3301      	adds	r3, #1
 800662a:	61fb      	str	r3, [r7, #28]
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	2b0f      	cmp	r3, #15
 8006630:	f67f adfe 	bls.w	8006230 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40023800 	.word	0x40023800
 8006644:	40013800 	.word	0x40013800
 8006648:	40020000 	.word	0x40020000
 800664c:	40020400 	.word	0x40020400
 8006650:	40020800 	.word	0x40020800
 8006654:	40020c00 	.word	0x40020c00
 8006658:	40021000 	.word	0x40021000
 800665c:	40013c00 	.word	0x40013c00

08006660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]
 800666c:	4613      	mov	r3, r2
 800666e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <HAL_GPIO_WritePin+0x20>
 8006676:	887b      	ldrh	r3, [r7, #2]
 8006678:	0c1b      	lsrs	r3, r3, #16
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <HAL_GPIO_WritePin+0x2a>
 8006680:	f240 119d 	movw	r1, #413	; 0x19d
 8006684:	480e      	ldr	r0, [pc, #56]	; (80066c0 <HAL_GPIO_WritePin+0x60>)
 8006686:	f7fe fbcc 	bl	8004e22 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800668a:	787b      	ldrb	r3, [r7, #1]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <HAL_GPIO_WritePin+0x40>
 8006690:	787b      	ldrb	r3, [r7, #1]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d004      	beq.n	80066a0 <HAL_GPIO_WritePin+0x40>
 8006696:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800669a:	4809      	ldr	r0, [pc, #36]	; (80066c0 <HAL_GPIO_WritePin+0x60>)
 800669c:	f7fe fbc1 	bl	8004e22 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80066a0:	787b      	ldrb	r3, [r7, #1]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066a6:	887a      	ldrh	r2, [r7, #2]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80066ac:	e003      	b.n	80066b6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80066ae:	887b      	ldrh	r3, [r7, #2]
 80066b0:	041a      	lsls	r2, r3, #16
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	619a      	str	r2, [r3, #24]
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	080094e8 	.word	0x080094e8

080066c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80066ce:	4b08      	ldr	r3, [pc, #32]	; (80066f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066d0:	695a      	ldr	r2, [r3, #20]
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066da:	4a05      	ldr	r2, [pc, #20]	; (80066f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fa fda4 	bl	8001230 <HAL_GPIO_EXTI_Callback>
  }
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40013c00 	.word	0x40013c00

080066f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e314      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b0f      	cmp	r3, #15
 800670c:	d903      	bls.n	8006716 <HAL_RCC_OscConfig+0x22>
 800670e:	21e6      	movs	r1, #230	; 0xe6
 8006710:	4897      	ldr	r0, [pc, #604]	; (8006970 <HAL_RCC_OscConfig+0x27c>)
 8006712:	f7fe fb86 	bl	8004e22 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 8088 	beq.w	8006834 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00d      	beq.n	8006748 <HAL_RCC_OscConfig+0x54>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006734:	d008      	beq.n	8006748 <HAL_RCC_OscConfig+0x54>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800673e:	d003      	beq.n	8006748 <HAL_RCC_OscConfig+0x54>
 8006740:	21eb      	movs	r1, #235	; 0xeb
 8006742:	488b      	ldr	r0, [pc, #556]	; (8006970 <HAL_RCC_OscConfig+0x27c>)
 8006744:	f7fe fb6d 	bl	8004e22 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006748:	4b8a      	ldr	r3, [pc, #552]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 030c 	and.w	r3, r3, #12
 8006750:	2b04      	cmp	r3, #4
 8006752:	d00c      	beq.n	800676e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006754:	4b87      	ldr	r3, [pc, #540]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800675c:	2b08      	cmp	r3, #8
 800675e:	d112      	bne.n	8006786 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006760:	4b84      	ldr	r3, [pc, #528]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800676c:	d10b      	bne.n	8006786 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800676e:	4b81      	ldr	r3, [pc, #516]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d05b      	beq.n	8006832 <HAL_RCC_OscConfig+0x13e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d157      	bne.n	8006832 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e2d4      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678e:	d106      	bne.n	800679e <HAL_RCC_OscConfig+0xaa>
 8006790:	4b78      	ldr	r3, [pc, #480]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a77      	ldr	r2, [pc, #476]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 8006796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	e01d      	b.n	80067da <HAL_RCC_OscConfig+0xe6>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067a6:	d10c      	bne.n	80067c2 <HAL_RCC_OscConfig+0xce>
 80067a8:	4b72      	ldr	r3, [pc, #456]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a71      	ldr	r2, [pc, #452]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80067ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	4b6f      	ldr	r3, [pc, #444]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a6e      	ldr	r2, [pc, #440]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80067ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	e00b      	b.n	80067da <HAL_RCC_OscConfig+0xe6>
 80067c2:	4b6c      	ldr	r3, [pc, #432]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a6b      	ldr	r2, [pc, #428]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80067c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	4b69      	ldr	r3, [pc, #420]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a68      	ldr	r2, [pc, #416]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80067d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d013      	beq.n	800680a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e2:	f7ff fb57 	bl	8005e94 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067ea:	f7ff fb53 	bl	8005e94 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b64      	cmp	r3, #100	; 0x64
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e299      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fc:	4b5d      	ldr	r3, [pc, #372]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCC_OscConfig+0xf6>
 8006808:	e014      	b.n	8006834 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680a:	f7ff fb43 	bl	8005e94 <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006812:	f7ff fb3f 	bl	8005e94 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b64      	cmp	r3, #100	; 0x64
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e285      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006824:	4b53      	ldr	r3, [pc, #332]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f0      	bne.n	8006812 <HAL_RCC_OscConfig+0x11e>
 8006830:	e000      	b.n	8006834 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006832:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d079      	beq.n	8006934 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <HAL_RCC_OscConfig+0x166>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d004      	beq.n	800685a <HAL_RCC_OscConfig+0x166>
 8006850:	f240 111d 	movw	r1, #285	; 0x11d
 8006854:	4846      	ldr	r0, [pc, #280]	; (8006970 <HAL_RCC_OscConfig+0x27c>)
 8006856:	f7fe fae4 	bl	8004e22 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b1f      	cmp	r3, #31
 8006860:	d904      	bls.n	800686c <HAL_RCC_OscConfig+0x178>
 8006862:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8006866:	4842      	ldr	r0, [pc, #264]	; (8006970 <HAL_RCC_OscConfig+0x27c>)
 8006868:	f7fe fadb 	bl	8004e22 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800686c:	4b41      	ldr	r3, [pc, #260]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 030c 	and.w	r3, r3, #12
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006878:	4b3e      	ldr	r3, [pc, #248]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006880:	2b08      	cmp	r3, #8
 8006882:	d11c      	bne.n	80068be <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006884:	4b3b      	ldr	r3, [pc, #236]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d116      	bne.n	80068be <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006890:	4b38      	ldr	r3, [pc, #224]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_RCC_OscConfig+0x1b4>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d001      	beq.n	80068a8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e243      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a8:	4b32      	ldr	r3, [pc, #200]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	492f      	ldr	r1, [pc, #188]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068bc:	e03a      	b.n	8006934 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d020      	beq.n	8006908 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068c6:	4b2c      	ldr	r3, [pc, #176]	; (8006978 <HAL_RCC_OscConfig+0x284>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068cc:	f7ff fae2 	bl	8005e94 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068d4:	f7ff fade 	bl	8005e94 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e224      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e6:	4b23      	ldr	r3, [pc, #140]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f0      	beq.n	80068d4 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f2:	4b20      	ldr	r3, [pc, #128]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	491c      	ldr	r1, [pc, #112]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]
 8006906:	e015      	b.n	8006934 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <HAL_RCC_OscConfig+0x284>)
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690e:	f7ff fac1 	bl	8005e94 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006916:	f7ff fabd 	bl	8005e94 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e203      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006928:	4b12      	ldr	r3, [pc, #72]	; (8006974 <HAL_RCC_OscConfig+0x280>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f0      	bne.n	8006916 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d045      	beq.n	80069cc <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d008      	beq.n	800695a <HAL_RCC_OscConfig+0x266>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d004      	beq.n	800695a <HAL_RCC_OscConfig+0x266>
 8006950:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006954:	4806      	ldr	r0, [pc, #24]	; (8006970 <HAL_RCC_OscConfig+0x27c>)
 8006956:	f7fe fa64 	bl	8004e22 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01e      	beq.n	80069a0 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006962:	4b06      	ldr	r3, [pc, #24]	; (800697c <HAL_RCC_OscConfig+0x288>)
 8006964:	2201      	movs	r2, #1
 8006966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006968:	f7ff fa94 	bl	8005e94 <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800696e:	e010      	b.n	8006992 <HAL_RCC_OscConfig+0x29e>
 8006970:	08009524 	.word	0x08009524
 8006974:	40023800 	.word	0x40023800
 8006978:	42470000 	.word	0x42470000
 800697c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006980:	f7ff fa88 	bl	8005e94 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e1ce      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006992:	4b5e      	ldr	r3, [pc, #376]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <HAL_RCC_OscConfig+0x28c>
 800699e:	e015      	b.n	80069cc <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069a0:	4b5b      	ldr	r3, [pc, #364]	; (8006b10 <HAL_RCC_OscConfig+0x41c>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069a6:	f7ff fa75 	bl	8005e94 <HAL_GetTick>
 80069aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ac:	e008      	b.n	80069c0 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ae:	f7ff fa71 	bl	8005e94 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d901      	bls.n	80069c0 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e1b7      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c0:	4b52      	ldr	r3, [pc, #328]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 80069c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1f0      	bne.n	80069ae <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80b0 	beq.w	8006b3a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069da:	2300      	movs	r3, #0
 80069dc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00c      	beq.n	8006a00 <HAL_RCC_OscConfig+0x30c>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d008      	beq.n	8006a00 <HAL_RCC_OscConfig+0x30c>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d004      	beq.n	8006a00 <HAL_RCC_OscConfig+0x30c>
 80069f6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80069fa:	4846      	ldr	r0, [pc, #280]	; (8006b14 <HAL_RCC_OscConfig+0x420>)
 80069fc:	f7fe fa11 	bl	8004e22 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a00:	4b42      	ldr	r3, [pc, #264]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10f      	bne.n	8006a2c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60bb      	str	r3, [r7, #8]
 8006a10:	4b3e      	ldr	r3, [pc, #248]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	4a3d      	ldr	r2, [pc, #244]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8006a1c:	4b3b      	ldr	r3, [pc, #236]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a24:	60bb      	str	r3, [r7, #8]
 8006a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2c:	4b3a      	ldr	r3, [pc, #232]	; (8006b18 <HAL_RCC_OscConfig+0x424>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d118      	bne.n	8006a6a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a38:	4b37      	ldr	r3, [pc, #220]	; (8006b18 <HAL_RCC_OscConfig+0x424>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a36      	ldr	r2, [pc, #216]	; (8006b18 <HAL_RCC_OscConfig+0x424>)
 8006a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a44:	f7ff fa26 	bl	8005e94 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a4c:	f7ff fa22 	bl	8005e94 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e168      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <HAL_RCC_OscConfig+0x424>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0f0      	beq.n	8006a4c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d106      	bne.n	8006a80 <HAL_RCC_OscConfig+0x38c>
 8006a72:	4b26      	ldr	r3, [pc, #152]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7e:	e01c      	b.n	8006aba <HAL_RCC_OscConfig+0x3c6>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b05      	cmp	r3, #5
 8006a86:	d10c      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x3ae>
 8006a88:	4b20      	ldr	r3, [pc, #128]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8c:	4a1f      	ldr	r2, [pc, #124]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006a8e:	f043 0304 	orr.w	r3, r3, #4
 8006a92:	6713      	str	r3, [r2, #112]	; 0x70
 8006a94:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a98:	4a1c      	ldr	r2, [pc, #112]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006aa0:	e00b      	b.n	8006aba <HAL_RCC_OscConfig+0x3c6>
 8006aa2:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa6:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	6713      	str	r3, [r2, #112]	; 0x70
 8006aae:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab2:	4a16      	ldr	r2, [pc, #88]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006ab4:	f023 0304 	bic.w	r3, r3, #4
 8006ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d015      	beq.n	8006aee <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac2:	f7ff f9e7 	bl	8005e94 <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ac8:	e00a      	b.n	8006ae0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aca:	f7ff f9e3 	bl	8005e94 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e127      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <HAL_RCC_OscConfig+0x418>)
 8006ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d0ee      	beq.n	8006aca <HAL_RCC_OscConfig+0x3d6>
 8006aec:	e01c      	b.n	8006b28 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aee:	f7ff f9d1 	bl	8005e94 <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af4:	e012      	b.n	8006b1c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006af6:	f7ff f9cd 	bl	8005e94 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d909      	bls.n	8006b1c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e111      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	42470e80 	.word	0x42470e80
 8006b14:	08009524 	.word	0x08009524
 8006b18:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b1c:	4b86      	ldr	r3, [pc, #536]	; (8006d38 <HAL_RCC_OscConfig+0x644>)
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e6      	bne.n	8006af6 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d105      	bne.n	8006b3a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b2e:	4b82      	ldr	r3, [pc, #520]	; (8006d38 <HAL_RCC_OscConfig+0x644>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	4a81      	ldr	r2, [pc, #516]	; (8006d38 <HAL_RCC_OscConfig+0x644>)
 8006b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00c      	beq.n	8006b5c <HAL_RCC_OscConfig+0x468>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d008      	beq.n	8006b5c <HAL_RCC_OscConfig+0x468>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d004      	beq.n	8006b5c <HAL_RCC_OscConfig+0x468>
 8006b52:	f240 11cd 	movw	r1, #461	; 0x1cd
 8006b56:	4879      	ldr	r0, [pc, #484]	; (8006d3c <HAL_RCC_OscConfig+0x648>)
 8006b58:	f7fe f963 	bl	8004e22 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 80e4 	beq.w	8006d2e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b66:	4b74      	ldr	r3, [pc, #464]	; (8006d38 <HAL_RCC_OscConfig+0x644>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	f000 80a5 	beq.w	8006cbe <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	f040 8089 	bne.w	8006c90 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <HAL_RCC_OscConfig+0x4a6>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b8e:	d004      	beq.n	8006b9a <HAL_RCC_OscConfig+0x4a6>
 8006b90:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8006b94:	4869      	ldr	r0, [pc, #420]	; (8006d3c <HAL_RCC_OscConfig+0x648>)
 8006b96:	f7fe f944 	bl	8004e22 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	2b3f      	cmp	r3, #63	; 0x3f
 8006ba0:	d904      	bls.n	8006bac <HAL_RCC_OscConfig+0x4b8>
 8006ba2:	f240 11d7 	movw	r1, #471	; 0x1d7
 8006ba6:	4865      	ldr	r0, [pc, #404]	; (8006d3c <HAL_RCC_OscConfig+0x648>)
 8006ba8:	f7fe f93b 	bl	8004e22 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	2b31      	cmp	r3, #49	; 0x31
 8006bb2:	d904      	bls.n	8006bbe <HAL_RCC_OscConfig+0x4ca>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006bbc:	d904      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x4d4>
 8006bbe:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8006bc2:	485e      	ldr	r0, [pc, #376]	; (8006d3c <HAL_RCC_OscConfig+0x648>)
 8006bc4:	f7fe f92d 	bl	8004e22 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d010      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x4fe>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d00c      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x4fe>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	2b06      	cmp	r3, #6
 8006bde:	d008      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x4fe>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d004      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x4fe>
 8006be8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006bec:	4853      	ldr	r0, [pc, #332]	; (8006d3c <HAL_RCC_OscConfig+0x648>)
 8006bee:	f7fe f918 	bl	8004e22 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d903      	bls.n	8006c02 <HAL_RCC_OscConfig+0x50e>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	2b0f      	cmp	r3, #15
 8006c00:	d904      	bls.n	8006c0c <HAL_RCC_OscConfig+0x518>
 8006c02:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006c06:	484d      	ldr	r0, [pc, #308]	; (8006d3c <HAL_RCC_OscConfig+0x648>)
 8006c08:	f7fe f90b 	bl	8004e22 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c0c:	4b4c      	ldr	r3, [pc, #304]	; (8006d40 <HAL_RCC_OscConfig+0x64c>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c12:	f7ff f93f 	bl	8005e94 <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c1a:	f7ff f93b 	bl	8005e94 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e081      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2c:	4b42      	ldr	r3, [pc, #264]	; (8006d38 <HAL_RCC_OscConfig+0x644>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1f0      	bne.n	8006c1a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	019b      	lsls	r3, r3, #6
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	3b01      	subs	r3, #1
 8006c52:	041b      	lsls	r3, r3, #16
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	061b      	lsls	r3, r3, #24
 8006c5c:	4936      	ldr	r1, [pc, #216]	; (8006d38 <HAL_RCC_OscConfig+0x644>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c62:	4b37      	ldr	r3, [pc, #220]	; (8006d40 <HAL_RCC_OscConfig+0x64c>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c68:	f7ff f914 	bl	8005e94 <HAL_GetTick>
 8006c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c70:	f7ff f910 	bl	8005e94 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e056      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c82:	4b2d      	ldr	r3, [pc, #180]	; (8006d38 <HAL_RCC_OscConfig+0x644>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0f0      	beq.n	8006c70 <HAL_RCC_OscConfig+0x57c>
 8006c8e:	e04e      	b.n	8006d2e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c90:	4b2b      	ldr	r3, [pc, #172]	; (8006d40 <HAL_RCC_OscConfig+0x64c>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c96:	f7ff f8fd 	bl	8005e94 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c9e:	f7ff f8f9 	bl	8005e94 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e03f      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb0:	4b21      	ldr	r3, [pc, #132]	; (8006d38 <HAL_RCC_OscConfig+0x644>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1f0      	bne.n	8006c9e <HAL_RCC_OscConfig+0x5aa>
 8006cbc:	e037      	b.n	8006d2e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d101      	bne.n	8006cca <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e032      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cca:	4b1b      	ldr	r3, [pc, #108]	; (8006d38 <HAL_RCC_OscConfig+0x644>)
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d028      	beq.n	8006d2a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d121      	bne.n	8006d2a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d11a      	bne.n	8006d2a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d111      	bne.n	8006d2a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	3b01      	subs	r3, #1
 8006d14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d107      	bne.n	8006d2a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d001      	beq.n	8006d2e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	08009524 	.word	0x08009524
 8006d40:	42470060 	.word	0x42470060

08006d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e174      	b.n	8007042 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x24>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b0f      	cmp	r3, #15
 8006d66:	d904      	bls.n	8006d72 <HAL_RCC_ClockConfig+0x2e>
 8006d68:	f240 215a 	movw	r1, #602	; 0x25a
 8006d6c:	487b      	ldr	r0, [pc, #492]	; (8006f5c <HAL_RCC_ClockConfig+0x218>)
 8006d6e:	f7fe f858 	bl	8004e22 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d019      	beq.n	8006dac <HAL_RCC_ClockConfig+0x68>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d016      	beq.n	8006dac <HAL_RCC_ClockConfig+0x68>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d013      	beq.n	8006dac <HAL_RCC_ClockConfig+0x68>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d010      	beq.n	8006dac <HAL_RCC_ClockConfig+0x68>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d00d      	beq.n	8006dac <HAL_RCC_ClockConfig+0x68>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	d00a      	beq.n	8006dac <HAL_RCC_ClockConfig+0x68>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b06      	cmp	r3, #6
 8006d9a:	d007      	beq.n	8006dac <HAL_RCC_ClockConfig+0x68>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b07      	cmp	r3, #7
 8006da0:	d004      	beq.n	8006dac <HAL_RCC_ClockConfig+0x68>
 8006da2:	f240 215b 	movw	r1, #603	; 0x25b
 8006da6:	486d      	ldr	r0, [pc, #436]	; (8006f5c <HAL_RCC_ClockConfig+0x218>)
 8006da8:	f7fe f83b 	bl	8004e22 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dac:	4b6c      	ldr	r3, [pc, #432]	; (8006f60 <HAL_RCC_ClockConfig+0x21c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d90c      	bls.n	8006dd4 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dba:	4b69      	ldr	r3, [pc, #420]	; (8006f60 <HAL_RCC_ClockConfig+0x21c>)
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc2:	4b67      	ldr	r3, [pc, #412]	; (8006f60 <HAL_RCC_ClockConfig+0x21c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d001      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e136      	b.n	8007042 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d049      	beq.n	8006e74 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dec:	4b5d      	ldr	r3, [pc, #372]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	4a5c      	ldr	r2, [pc, #368]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e04:	4b57      	ldr	r3, [pc, #348]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	4a56      	ldr	r2, [pc, #344]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d024      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x11e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b80      	cmp	r3, #128	; 0x80
 8006e1e:	d020      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x11e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	2b90      	cmp	r3, #144	; 0x90
 8006e26:	d01c      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x11e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2ba0      	cmp	r3, #160	; 0xa0
 8006e2e:	d018      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x11e>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2bb0      	cmp	r3, #176	; 0xb0
 8006e36:	d014      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x11e>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2bc0      	cmp	r3, #192	; 0xc0
 8006e3e:	d010      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x11e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2bd0      	cmp	r3, #208	; 0xd0
 8006e46:	d00c      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x11e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2be0      	cmp	r3, #224	; 0xe0
 8006e4e:	d008      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x11e>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	2bf0      	cmp	r3, #240	; 0xf0
 8006e56:	d004      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x11e>
 8006e58:	f240 217e 	movw	r1, #638	; 0x27e
 8006e5c:	483f      	ldr	r0, [pc, #252]	; (8006f5c <HAL_RCC_ClockConfig+0x218>)
 8006e5e:	f7fd ffe0 	bl	8004e22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e62:	4b40      	ldr	r3, [pc, #256]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	493d      	ldr	r1, [pc, #244]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d059      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d010      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x166>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d00c      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x166>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d008      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x166>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d004      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x166>
 8006ea0:	f240 2185 	movw	r1, #645	; 0x285
 8006ea4:	482d      	ldr	r0, [pc, #180]	; (8006f5c <HAL_RCC_ClockConfig+0x218>)
 8006ea6:	f7fd ffbc 	bl	8004e22 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d107      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eb2:	4b2c      	ldr	r3, [pc, #176]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d119      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e0bf      	b.n	8007042 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d003      	beq.n	8006ed2 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d107      	bne.n	8006ee2 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed2:	4b24      	ldr	r3, [pc, #144]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e0af      	b.n	8007042 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ee2:	4b20      	ldr	r3, [pc, #128]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e0a7      	b.n	8007042 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ef2:	4b1c      	ldr	r3, [pc, #112]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f023 0203 	bic.w	r2, r3, #3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	4919      	ldr	r1, [pc, #100]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f04:	f7fe ffc6 	bl	8005e94 <HAL_GetTick>
 8006f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f0a:	e00a      	b.n	8006f22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f0c:	f7fe ffc2 	bl	8005e94 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e08f      	b.n	8007042 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f22:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <HAL_RCC_ClockConfig+0x220>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 020c 	and.w	r2, r3, #12
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d1eb      	bne.n	8006f0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f34:	4b0a      	ldr	r3, [pc, #40]	; (8006f60 <HAL_RCC_ClockConfig+0x21c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d212      	bcs.n	8006f68 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f42:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <HAL_RCC_ClockConfig+0x21c>)
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	b2d2      	uxtb	r2, r2
 8006f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4a:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <HAL_RCC_ClockConfig+0x21c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d007      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e072      	b.n	8007042 <HAL_RCC_ClockConfig+0x2fe>
 8006f5c:	08009524 	.word	0x08009524
 8006f60:	40023c00 	.word	0x40023c00
 8006f64:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d025      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d018      	beq.n	8006fae <HAL_RCC_ClockConfig+0x26a>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f84:	d013      	beq.n	8006fae <HAL_RCC_ClockConfig+0x26a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f8e:	d00e      	beq.n	8006fae <HAL_RCC_ClockConfig+0x26a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006f98:	d009      	beq.n	8006fae <HAL_RCC_ClockConfig+0x26a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006fa2:	d004      	beq.n	8006fae <HAL_RCC_ClockConfig+0x26a>
 8006fa4:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006fa8:	4828      	ldr	r0, [pc, #160]	; (800704c <HAL_RCC_ClockConfig+0x308>)
 8006faa:	f7fd ff3a 	bl	8004e22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fae:	4b28      	ldr	r3, [pc, #160]	; (8007050 <HAL_RCC_ClockConfig+0x30c>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	4925      	ldr	r1, [pc, #148]	; (8007050 <HAL_RCC_ClockConfig+0x30c>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d026      	beq.n	800701a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d018      	beq.n	8007006 <HAL_RCC_ClockConfig+0x2c2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fdc:	d013      	beq.n	8007006 <HAL_RCC_ClockConfig+0x2c2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006fe6:	d00e      	beq.n	8007006 <HAL_RCC_ClockConfig+0x2c2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006ff0:	d009      	beq.n	8007006 <HAL_RCC_ClockConfig+0x2c2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006ffa:	d004      	beq.n	8007006 <HAL_RCC_ClockConfig+0x2c2>
 8006ffc:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007000:	4812      	ldr	r0, [pc, #72]	; (800704c <HAL_RCC_ClockConfig+0x308>)
 8007002:	f7fd ff0e 	bl	8004e22 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <HAL_RCC_ClockConfig+0x30c>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	490e      	ldr	r1, [pc, #56]	; (8007050 <HAL_RCC_ClockConfig+0x30c>)
 8007016:	4313      	orrs	r3, r2
 8007018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800701a:	f000 f821 	bl	8007060 <HAL_RCC_GetSysClockFreq>
 800701e:	4602      	mov	r2, r0
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <HAL_RCC_ClockConfig+0x30c>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	490a      	ldr	r1, [pc, #40]	; (8007054 <HAL_RCC_ClockConfig+0x310>)
 800702c:	5ccb      	ldrb	r3, [r1, r3]
 800702e:	fa22 f303 	lsr.w	r3, r2, r3
 8007032:	4a09      	ldr	r2, [pc, #36]	; (8007058 <HAL_RCC_ClockConfig+0x314>)
 8007034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <HAL_RCC_ClockConfig+0x318>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe fee6 	bl	8005e0c <HAL_InitTick>

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	08009524 	.word	0x08009524
 8007050:	40023800 	.word	0x40023800
 8007054:	0800a82c 	.word	0x0800a82c
 8007058:	20000048 	.word	0x20000048
 800705c:	2000004c 	.word	0x2000004c

08007060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007064:	b090      	sub	sp, #64	; 0x40
 8007066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	637b      	str	r3, [r7, #52]	; 0x34
 800706c:	2300      	movs	r3, #0
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007070:	2300      	movs	r3, #0
 8007072:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007078:	4b59      	ldr	r3, [pc, #356]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 030c 	and.w	r3, r3, #12
 8007080:	2b08      	cmp	r3, #8
 8007082:	d00d      	beq.n	80070a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007084:	2b08      	cmp	r3, #8
 8007086:	f200 80a1 	bhi.w	80071cc <HAL_RCC_GetSysClockFreq+0x16c>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_RCC_GetSysClockFreq+0x34>
 800708e:	2b04      	cmp	r3, #4
 8007090:	d003      	beq.n	800709a <HAL_RCC_GetSysClockFreq+0x3a>
 8007092:	e09b      	b.n	80071cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007094:	4b53      	ldr	r3, [pc, #332]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007096:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007098:	e09b      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800709a:	4b53      	ldr	r3, [pc, #332]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800709c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800709e:	e098      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070a0:	4b4f      	ldr	r3, [pc, #316]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070aa:	4b4d      	ldr	r3, [pc, #308]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d028      	beq.n	8007108 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070b6:	4b4a      	ldr	r3, [pc, #296]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	099b      	lsrs	r3, r3, #6
 80070bc:	2200      	movs	r2, #0
 80070be:	623b      	str	r3, [r7, #32]
 80070c0:	627a      	str	r2, [r7, #36]	; 0x24
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80070c8:	2100      	movs	r1, #0
 80070ca:	4b47      	ldr	r3, [pc, #284]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80070cc:	fb03 f201 	mul.w	r2, r3, r1
 80070d0:	2300      	movs	r3, #0
 80070d2:	fb00 f303 	mul.w	r3, r0, r3
 80070d6:	4413      	add	r3, r2
 80070d8:	4a43      	ldr	r2, [pc, #268]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80070da:	fba0 1202 	umull	r1, r2, r0, r2
 80070de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070e0:	460a      	mov	r2, r1
 80070e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80070e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e6:	4413      	add	r3, r2
 80070e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	2200      	movs	r2, #0
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	61fa      	str	r2, [r7, #28]
 80070f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80070fa:	f7f9 f8bd 	bl	8000278 <__aeabi_uldivmod>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4613      	mov	r3, r2
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007106:	e053      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007108:	4b35      	ldr	r3, [pc, #212]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	099b      	lsrs	r3, r3, #6
 800710e:	2200      	movs	r2, #0
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	617a      	str	r2, [r7, #20]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800711a:	f04f 0b00 	mov.w	fp, #0
 800711e:	4652      	mov	r2, sl
 8007120:	465b      	mov	r3, fp
 8007122:	f04f 0000 	mov.w	r0, #0
 8007126:	f04f 0100 	mov.w	r1, #0
 800712a:	0159      	lsls	r1, r3, #5
 800712c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007130:	0150      	lsls	r0, r2, #5
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	ebb2 080a 	subs.w	r8, r2, sl
 800713a:	eb63 090b 	sbc.w	r9, r3, fp
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800714a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800714e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007152:	ebb2 0408 	subs.w	r4, r2, r8
 8007156:	eb63 0509 	sbc.w	r5, r3, r9
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	f04f 0300 	mov.w	r3, #0
 8007162:	00eb      	lsls	r3, r5, #3
 8007164:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007168:	00e2      	lsls	r2, r4, #3
 800716a:	4614      	mov	r4, r2
 800716c:	461d      	mov	r5, r3
 800716e:	eb14 030a 	adds.w	r3, r4, sl
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	eb45 030b 	adc.w	r3, r5, fp
 8007178:	607b      	str	r3, [r7, #4]
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007186:	4629      	mov	r1, r5
 8007188:	028b      	lsls	r3, r1, #10
 800718a:	4621      	mov	r1, r4
 800718c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007190:	4621      	mov	r1, r4
 8007192:	028a      	lsls	r2, r1, #10
 8007194:	4610      	mov	r0, r2
 8007196:	4619      	mov	r1, r3
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	2200      	movs	r2, #0
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	60fa      	str	r2, [r7, #12]
 80071a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071a4:	f7f9 f868 	bl	8000278 <__aeabi_uldivmod>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4613      	mov	r3, r2
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	0c1b      	lsrs	r3, r3, #16
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	3301      	adds	r3, #1
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80071c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071ca:	e002      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80071ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3740      	adds	r7, #64	; 0x40
 80071d8:	46bd      	mov	sp, r7
 80071da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071de:	bf00      	nop
 80071e0:	40023800 	.word	0x40023800
 80071e4:	00f42400 	.word	0x00f42400
 80071e8:	017d7840 	.word	0x017d7840

080071ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071f0:	4b03      	ldr	r3, [pc, #12]	; (8007200 <HAL_RCC_GetHCLKFreq+0x14>)
 80071f2:	681b      	ldr	r3, [r3, #0]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20000048 	.word	0x20000048

08007204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007208:	f7ff fff0 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 800720c:	4602      	mov	r2, r0
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	0a9b      	lsrs	r3, r3, #10
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	4903      	ldr	r1, [pc, #12]	; (8007228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800721a:	5ccb      	ldrb	r3, [r1, r3]
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007220:	4618      	mov	r0, r3
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40023800 	.word	0x40023800
 8007228:	0800a83c 	.word	0x0800a83c

0800722c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007230:	f7ff ffdc 	bl	80071ec <HAL_RCC_GetHCLKFreq>
 8007234:	4602      	mov	r2, r0
 8007236:	4b05      	ldr	r3, [pc, #20]	; (800724c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	0b5b      	lsrs	r3, r3, #13
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	4903      	ldr	r1, [pc, #12]	; (8007250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007242:	5ccb      	ldrb	r3, [r1, r3]
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40023800 	.word	0x40023800
 8007250:	0800a83c 	.word	0x0800a83c

08007254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e18c      	b.n	8007580 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a75      	ldr	r2, [pc, #468]	; (8007440 <HAL_SPI_Init+0x1ec>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d018      	beq.n	80072a2 <HAL_SPI_Init+0x4e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a73      	ldr	r2, [pc, #460]	; (8007444 <HAL_SPI_Init+0x1f0>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d013      	beq.n	80072a2 <HAL_SPI_Init+0x4e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a72      	ldr	r2, [pc, #456]	; (8007448 <HAL_SPI_Init+0x1f4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00e      	beq.n	80072a2 <HAL_SPI_Init+0x4e>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a70      	ldr	r2, [pc, #448]	; (800744c <HAL_SPI_Init+0x1f8>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d009      	beq.n	80072a2 <HAL_SPI_Init+0x4e>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a6f      	ldr	r2, [pc, #444]	; (8007450 <HAL_SPI_Init+0x1fc>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d004      	beq.n	80072a2 <HAL_SPI_Init+0x4e>
 8007298:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800729c:	486d      	ldr	r0, [pc, #436]	; (8007454 <HAL_SPI_Init+0x200>)
 800729e:	f7fd fdc0 	bl	8004e22 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <HAL_SPI_Init+0x6a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072b2:	d004      	beq.n	80072be <HAL_SPI_Init+0x6a>
 80072b4:	f240 1141 	movw	r1, #321	; 0x141
 80072b8:	4866      	ldr	r0, [pc, #408]	; (8007454 <HAL_SPI_Init+0x200>)
 80072ba:	f7fd fdb2 	bl	8004e22 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00e      	beq.n	80072e4 <HAL_SPI_Init+0x90>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ce:	d009      	beq.n	80072e4 <HAL_SPI_Init+0x90>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d8:	d004      	beq.n	80072e4 <HAL_SPI_Init+0x90>
 80072da:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80072de:	485d      	ldr	r0, [pc, #372]	; (8007454 <HAL_SPI_Init+0x200>)
 80072e0:	f7fd fd9f 	bl	8004e22 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ec:	d008      	beq.n	8007300 <HAL_SPI_Init+0xac>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d004      	beq.n	8007300 <HAL_SPI_Init+0xac>
 80072f6:	f240 1143 	movw	r1, #323	; 0x143
 80072fa:	4856      	ldr	r0, [pc, #344]	; (8007454 <HAL_SPI_Init+0x200>)
 80072fc:	f7fd fd91 	bl	8004e22 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007308:	d00d      	beq.n	8007326 <HAL_SPI_Init+0xd2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <HAL_SPI_Init+0xd2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800731a:	d004      	beq.n	8007326 <HAL_SPI_Init+0xd2>
 800731c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007320:	484c      	ldr	r0, [pc, #304]	; (8007454 <HAL_SPI_Init+0x200>)
 8007322:	f7fd fd7e 	bl	8004e22 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d020      	beq.n	8007370 <HAL_SPI_Init+0x11c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	2b08      	cmp	r3, #8
 8007334:	d01c      	beq.n	8007370 <HAL_SPI_Init+0x11c>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	2b10      	cmp	r3, #16
 800733c:	d018      	beq.n	8007370 <HAL_SPI_Init+0x11c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	2b18      	cmp	r3, #24
 8007344:	d014      	beq.n	8007370 <HAL_SPI_Init+0x11c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	2b20      	cmp	r3, #32
 800734c:	d010      	beq.n	8007370 <HAL_SPI_Init+0x11c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	2b28      	cmp	r3, #40	; 0x28
 8007354:	d00c      	beq.n	8007370 <HAL_SPI_Init+0x11c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	2b30      	cmp	r3, #48	; 0x30
 800735c:	d008      	beq.n	8007370 <HAL_SPI_Init+0x11c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	2b38      	cmp	r3, #56	; 0x38
 8007364:	d004      	beq.n	8007370 <HAL_SPI_Init+0x11c>
 8007366:	f240 1145 	movw	r1, #325	; 0x145
 800736a:	483a      	ldr	r0, [pc, #232]	; (8007454 <HAL_SPI_Init+0x200>)
 800736c:	f7fd fd59 	bl	8004e22 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d008      	beq.n	800738a <HAL_SPI_Init+0x136>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	2b80      	cmp	r3, #128	; 0x80
 800737e:	d004      	beq.n	800738a <HAL_SPI_Init+0x136>
 8007380:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007384:	4833      	ldr	r0, [pc, #204]	; (8007454 <HAL_SPI_Init+0x200>)
 8007386:	f7fd fd4c 	bl	8004e22 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	d008      	beq.n	80073a4 <HAL_SPI_Init+0x150>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	2b10      	cmp	r3, #16
 8007398:	d004      	beq.n	80073a4 <HAL_SPI_Init+0x150>
 800739a:	f240 1147 	movw	r1, #327	; 0x147
 800739e:	482d      	ldr	r0, [pc, #180]	; (8007454 <HAL_SPI_Init+0x200>)
 80073a0:	f7fd fd3f 	bl	8004e22 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d155      	bne.n	8007458 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d008      	beq.n	80073c6 <HAL_SPI_Init+0x172>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d004      	beq.n	80073c6 <HAL_SPI_Init+0x172>
 80073bc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80073c0:	4824      	ldr	r0, [pc, #144]	; (8007454 <HAL_SPI_Init+0x200>)
 80073c2:	f7fd fd2e 	bl	8004e22 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d008      	beq.n	80073e0 <HAL_SPI_Init+0x18c>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d004      	beq.n	80073e0 <HAL_SPI_Init+0x18c>
 80073d6:	f240 114b 	movw	r1, #331	; 0x14b
 80073da:	481e      	ldr	r0, [pc, #120]	; (8007454 <HAL_SPI_Init+0x200>)
 80073dc:	f7fd fd21 	bl	8004e22 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073e8:	d125      	bne.n	8007436 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d05d      	beq.n	80074ae <HAL_SPI_Init+0x25a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	d059      	beq.n	80074ae <HAL_SPI_Init+0x25a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	2b10      	cmp	r3, #16
 8007400:	d055      	beq.n	80074ae <HAL_SPI_Init+0x25a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	2b18      	cmp	r3, #24
 8007408:	d051      	beq.n	80074ae <HAL_SPI_Init+0x25a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	2b20      	cmp	r3, #32
 8007410:	d04d      	beq.n	80074ae <HAL_SPI_Init+0x25a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	2b28      	cmp	r3, #40	; 0x28
 8007418:	d049      	beq.n	80074ae <HAL_SPI_Init+0x25a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	2b30      	cmp	r3, #48	; 0x30
 8007420:	d045      	beq.n	80074ae <HAL_SPI_Init+0x25a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	2b38      	cmp	r3, #56	; 0x38
 8007428:	d041      	beq.n	80074ae <HAL_SPI_Init+0x25a>
 800742a:	f240 114f 	movw	r1, #335	; 0x14f
 800742e:	4809      	ldr	r0, [pc, #36]	; (8007454 <HAL_SPI_Init+0x200>)
 8007430:	f7fd fcf7 	bl	8004e22 <assert_failed>
 8007434:	e03b      	b.n	80074ae <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	61da      	str	r2, [r3, #28]
 800743c:	e037      	b.n	80074ae <HAL_SPI_Init+0x25a>
 800743e:	bf00      	nop
 8007440:	40013000 	.word	0x40013000
 8007444:	40003800 	.word	0x40003800
 8007448:	40003c00 	.word	0x40003c00
 800744c:	40013400 	.word	0x40013400
 8007450:	40015000 	.word	0x40015000
 8007454:	0800955c 	.word	0x0800955c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d020      	beq.n	80074a2 <HAL_SPI_Init+0x24e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	2b08      	cmp	r3, #8
 8007466:	d01c      	beq.n	80074a2 <HAL_SPI_Init+0x24e>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	2b10      	cmp	r3, #16
 800746e:	d018      	beq.n	80074a2 <HAL_SPI_Init+0x24e>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	2b18      	cmp	r3, #24
 8007476:	d014      	beq.n	80074a2 <HAL_SPI_Init+0x24e>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	2b20      	cmp	r3, #32
 800747e:	d010      	beq.n	80074a2 <HAL_SPI_Init+0x24e>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	2b28      	cmp	r3, #40	; 0x28
 8007486:	d00c      	beq.n	80074a2 <HAL_SPI_Init+0x24e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	2b30      	cmp	r3, #48	; 0x30
 800748e:	d008      	beq.n	80074a2 <HAL_SPI_Init+0x24e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	2b38      	cmp	r3, #56	; 0x38
 8007496:	d004      	beq.n	80074a2 <HAL_SPI_Init+0x24e>
 8007498:	f240 1159 	movw	r1, #345	; 0x159
 800749c:	483a      	ldr	r0, [pc, #232]	; (8007588 <HAL_SPI_Init+0x334>)
 800749e:	f7fd fcc0 	bl	8004e22 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7fe fb41 	bl	8005b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2202      	movs	r2, #2
 80074d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007532:	ea42 0103 	orr.w	r1, r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	0c1b      	lsrs	r3, r3, #16
 800754c:	f003 0104 	and.w	r1, r3, #4
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	f003 0210 	and.w	r2, r3, #16
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	69da      	ldr	r2, [r3, #28]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800756e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	0800955c 	.word	0x0800955c

0800758c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08c      	sub	sp, #48	; 0x30
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800759a:	2301      	movs	r3, #1
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <HAL_SPI_TransmitReceive+0x2a>
 80075ac:	f240 417c 	movw	r1, #1148	; 0x47c
 80075b0:	4884      	ldr	r0, [pc, #528]	; (80077c4 <HAL_SPI_TransmitReceive+0x238>)
 80075b2:	f7fd fc36 	bl	8004e22 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_SPI_TransmitReceive+0x38>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e18d      	b.n	80078e0 <HAL_SPI_TransmitReceive+0x354>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075cc:	f7fe fc62 	bl	8005e94 <HAL_GetTick>
 80075d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80075e2:	887b      	ldrh	r3, [r7, #2]
 80075e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d00f      	beq.n	800760e <HAL_SPI_TransmitReceive+0x82>
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075f4:	d107      	bne.n	8007606 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <HAL_SPI_TransmitReceive+0x7a>
 80075fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007602:	2b04      	cmp	r3, #4
 8007604:	d003      	beq.n	800760e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8007606:	2302      	movs	r3, #2
 8007608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800760c:	e15e      	b.n	80078cc <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <HAL_SPI_TransmitReceive+0x94>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <HAL_SPI_TransmitReceive+0x94>
 800761a:	887b      	ldrh	r3, [r7, #2]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d103      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007626:	e151      	b.n	80078cc <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b04      	cmp	r3, #4
 8007632:	d003      	beq.n	800763c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2205      	movs	r2, #5
 8007638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	887a      	ldrh	r2, [r7, #2]
 800764c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	887a      	ldrh	r2, [r7, #2]
 8007652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	887a      	ldrh	r2, [r7, #2]
 800765e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	887a      	ldrh	r2, [r7, #2]
 8007664:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d007      	beq.n	8007690 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800768e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007698:	d178      	bne.n	800778c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_SPI_TransmitReceive+0x11c>
 80076a2:	8b7b      	ldrh	r3, [r7, #26]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d166      	bne.n	8007776 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	881a      	ldrh	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b8:	1c9a      	adds	r2, r3, #2
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076cc:	e053      	b.n	8007776 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d11b      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x188>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d016      	beq.n	8007714 <HAL_SPI_TransmitReceive+0x188>
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d113      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f0:	881a      	ldrh	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	1c9a      	adds	r2, r3, #2
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007706:	b29b      	uxth	r3, r3
 8007708:	3b01      	subs	r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b01      	cmp	r3, #1
 8007720:	d119      	bne.n	8007756 <HAL_SPI_TransmitReceive+0x1ca>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007726:	b29b      	uxth	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d014      	beq.n	8007756 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	b292      	uxth	r2, r2
 8007738:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	1c9a      	adds	r2, r3, #2
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007752:	2301      	movs	r3, #1
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007756:	f7fe fb9d 	bl	8005e94 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007762:	429a      	cmp	r2, r3
 8007764:	d807      	bhi.n	8007776 <HAL_SPI_TransmitReceive+0x1ea>
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d003      	beq.n	8007776 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007774:	e0aa      	b.n	80078cc <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1a6      	bne.n	80076ce <HAL_SPI_TransmitReceive+0x142>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1a1      	bne.n	80076ce <HAL_SPI_TransmitReceive+0x142>
 800778a:	e07f      	b.n	800788c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_SPI_TransmitReceive+0x20e>
 8007794:	8b7b      	ldrh	r3, [r7, #26]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d16e      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	330c      	adds	r3, #12
 80077a4:	7812      	ldrb	r2, [r2, #0]
 80077a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077c0:	e05a      	b.n	8007878 <HAL_SPI_TransmitReceive+0x2ec>
 80077c2:	bf00      	nop
 80077c4:	0800955c 	.word	0x0800955c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d11c      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x284>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077da:	b29b      	uxth	r3, r3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d017      	beq.n	8007810 <HAL_SPI_TransmitReceive+0x284>
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d114      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	7812      	ldrb	r2, [r2, #0]
 80077f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b01      	cmp	r3, #1
 800781c:	d119      	bne.n	8007852 <HAL_SPI_TransmitReceive+0x2c6>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007822:	b29b      	uxth	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d014      	beq.n	8007852 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800784e:	2301      	movs	r3, #1
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007852:	f7fe fb1f 	bl	8005e94 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800785e:	429a      	cmp	r2, r3
 8007860:	d803      	bhi.n	800786a <HAL_SPI_TransmitReceive+0x2de>
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d102      	bne.n	8007870 <HAL_SPI_TransmitReceive+0x2e4>
 800786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786c:	2b00      	cmp	r3, #0
 800786e:	d103      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007876:	e029      	b.n	80078cc <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1a2      	bne.n	80077c8 <HAL_SPI_TransmitReceive+0x23c>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007886:	b29b      	uxth	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d19d      	bne.n	80077c8 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800788c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f8b1 	bl	80079f8 <SPI_EndRxTxTransaction>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d006      	beq.n	80078aa <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2220      	movs	r2, #32
 80078a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80078a8:	e010      	b.n	80078cc <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10b      	bne.n	80078ca <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	e000      	b.n	80078cc <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80078ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3730      	adds	r7, #48	; 0x30
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078f8:	f7fe facc 	bl	8005e94 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4413      	add	r3, r2
 8007906:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007908:	f7fe fac4 	bl	8005e94 <HAL_GetTick>
 800790c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800790e:	4b39      	ldr	r3, [pc, #228]	; (80079f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	015b      	lsls	r3, r3, #5
 8007914:	0d1b      	lsrs	r3, r3, #20
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	fb02 f303 	mul.w	r3, r2, r3
 800791c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800791e:	e054      	b.n	80079ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007926:	d050      	beq.n	80079ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007928:	f7fe fab4 	bl	8005e94 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	429a      	cmp	r2, r3
 8007936:	d902      	bls.n	800793e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d13d      	bne.n	80079ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800794c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007956:	d111      	bne.n	800797c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007960:	d004      	beq.n	800796c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796a:	d107      	bne.n	800797c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007984:	d10f      	bne.n	80079a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e017      	b.n	80079ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4013      	ands	r3, r2
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	bf0c      	ite	eq
 80079da:	2301      	moveq	r3, #1
 80079dc:	2300      	movne	r3, #0
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d19b      	bne.n	8007920 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20000048 	.word	0x20000048

080079f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a04:	4b1b      	ldr	r3, [pc, #108]	; (8007a74 <SPI_EndRxTxTransaction+0x7c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a1b      	ldr	r2, [pc, #108]	; (8007a78 <SPI_EndRxTxTransaction+0x80>)
 8007a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0e:	0d5b      	lsrs	r3, r3, #21
 8007a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a14:	fb02 f303 	mul.w	r3, r2, r3
 8007a18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a22:	d112      	bne.n	8007a4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2180      	movs	r1, #128	; 0x80
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff ff5a 	bl	80078e8 <SPI_WaitFlagStateUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d016      	beq.n	8007a68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f043 0220 	orr.w	r2, r3, #32
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e00f      	b.n	8007a6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a60:	2b80      	cmp	r3, #128	; 0x80
 8007a62:	d0f2      	beq.n	8007a4a <SPI_EndRxTxTransaction+0x52>
 8007a64:	e000      	b.n	8007a68 <SPI_EndRxTxTransaction+0x70>
        break;
 8007a66:	bf00      	nop
  }

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20000048 	.word	0x20000048
 8007a78:	165e9f81 	.word	0x165e9f81

08007a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a3d      	ldr	r2, [pc, #244]	; (8007b80 <HAL_TIM_Base_Start_IT+0x104>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d027      	beq.n	8007ade <HAL_TIM_Base_Start_IT+0x62>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a96:	d022      	beq.n	8007ade <HAL_TIM_Base_Start_IT+0x62>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a39      	ldr	r2, [pc, #228]	; (8007b84 <HAL_TIM_Base_Start_IT+0x108>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d01d      	beq.n	8007ade <HAL_TIM_Base_Start_IT+0x62>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a38      	ldr	r2, [pc, #224]	; (8007b88 <HAL_TIM_Base_Start_IT+0x10c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d018      	beq.n	8007ade <HAL_TIM_Base_Start_IT+0x62>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a36      	ldr	r2, [pc, #216]	; (8007b8c <HAL_TIM_Base_Start_IT+0x110>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d013      	beq.n	8007ade <HAL_TIM_Base_Start_IT+0x62>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a35      	ldr	r2, [pc, #212]	; (8007b90 <HAL_TIM_Base_Start_IT+0x114>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00e      	beq.n	8007ade <HAL_TIM_Base_Start_IT+0x62>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a33      	ldr	r2, [pc, #204]	; (8007b94 <HAL_TIM_Base_Start_IT+0x118>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d009      	beq.n	8007ade <HAL_TIM_Base_Start_IT+0x62>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a32      	ldr	r2, [pc, #200]	; (8007b98 <HAL_TIM_Base_Start_IT+0x11c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d004      	beq.n	8007ade <HAL_TIM_Base_Start_IT+0x62>
 8007ad4:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007ad8:	4830      	ldr	r0, [pc, #192]	; (8007b9c <HAL_TIM_Base_Start_IT+0x120>)
 8007ada:	f7fd f9a2 	bl	8004e22 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d001      	beq.n	8007aee <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e044      	b.n	8007b78 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0201 	orr.w	r2, r2, #1
 8007b04:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1d      	ldr	r2, [pc, #116]	; (8007b80 <HAL_TIM_Base_Start_IT+0x104>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d018      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0xc6>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b18:	d013      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0xc6>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a19      	ldr	r2, [pc, #100]	; (8007b84 <HAL_TIM_Base_Start_IT+0x108>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00e      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0xc6>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a17      	ldr	r2, [pc, #92]	; (8007b88 <HAL_TIM_Base_Start_IT+0x10c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d009      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0xc6>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a16      	ldr	r2, [pc, #88]	; (8007b8c <HAL_TIM_Base_Start_IT+0x110>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d004      	beq.n	8007b42 <HAL_TIM_Base_Start_IT+0xc6>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a14      	ldr	r2, [pc, #80]	; (8007b90 <HAL_TIM_Base_Start_IT+0x114>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d111      	bne.n	8007b66 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b06      	cmp	r3, #6
 8007b52:	d010      	beq.n	8007b76 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0201 	orr.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b64:	e007      	b.n	8007b76 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 0201 	orr.w	r2, r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40000400 	.word	0x40000400
 8007b88:	40000800 	.word	0x40000800
 8007b8c:	40000c00 	.word	0x40000c00
 8007b90:	40014000 	.word	0x40014000
 8007b94:	40014400 	.word	0x40014400
 8007b98:	40014800 	.word	0x40014800
 8007b9c:	08009594 	.word	0x08009594

08007ba0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e0a7      	b.n	8007d02 <HAL_TIM_OC_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a55      	ldr	r2, [pc, #340]	; (8007d0c <HAL_TIM_OC_Init+0x16c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d027      	beq.n	8007c0c <HAL_TIM_OC_Init+0x6c>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc4:	d022      	beq.n	8007c0c <HAL_TIM_OC_Init+0x6c>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a51      	ldr	r2, [pc, #324]	; (8007d10 <HAL_TIM_OC_Init+0x170>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d01d      	beq.n	8007c0c <HAL_TIM_OC_Init+0x6c>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a4f      	ldr	r2, [pc, #316]	; (8007d14 <HAL_TIM_OC_Init+0x174>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d018      	beq.n	8007c0c <HAL_TIM_OC_Init+0x6c>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a4e      	ldr	r2, [pc, #312]	; (8007d18 <HAL_TIM_OC_Init+0x178>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d013      	beq.n	8007c0c <HAL_TIM_OC_Init+0x6c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a4c      	ldr	r2, [pc, #304]	; (8007d1c <HAL_TIM_OC_Init+0x17c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00e      	beq.n	8007c0c <HAL_TIM_OC_Init+0x6c>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a4b      	ldr	r2, [pc, #300]	; (8007d20 <HAL_TIM_OC_Init+0x180>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <HAL_TIM_OC_Init+0x6c>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a49      	ldr	r2, [pc, #292]	; (8007d24 <HAL_TIM_OC_Init+0x184>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <HAL_TIM_OC_Init+0x6c>
 8007c02:	f240 2192 	movw	r1, #658	; 0x292
 8007c06:	4848      	ldr	r0, [pc, #288]	; (8007d28 <HAL_TIM_OC_Init+0x188>)
 8007c08:	f7fd f90b 	bl	8004e22 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d014      	beq.n	8007c3e <HAL_TIM_OC_Init+0x9e>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	2b10      	cmp	r3, #16
 8007c1a:	d010      	beq.n	8007c3e <HAL_TIM_OC_Init+0x9e>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	2b20      	cmp	r3, #32
 8007c22:	d00c      	beq.n	8007c3e <HAL_TIM_OC_Init+0x9e>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b40      	cmp	r3, #64	; 0x40
 8007c2a:	d008      	beq.n	8007c3e <HAL_TIM_OC_Init+0x9e>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b60      	cmp	r3, #96	; 0x60
 8007c32:	d004      	beq.n	8007c3e <HAL_TIM_OC_Init+0x9e>
 8007c34:	f240 2193 	movw	r1, #659	; 0x293
 8007c38:	483b      	ldr	r0, [pc, #236]	; (8007d28 <HAL_TIM_OC_Init+0x188>)
 8007c3a:	f7fd f8f2 	bl	8004e22 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <HAL_TIM_OC_Init+0xc4>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4e:	d009      	beq.n	8007c64 <HAL_TIM_OC_Init+0xc4>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c58:	d004      	beq.n	8007c64 <HAL_TIM_OC_Init+0xc4>
 8007c5a:	f44f 7125 	mov.w	r1, #660	; 0x294
 8007c5e:	4832      	ldr	r0, [pc, #200]	; (8007d28 <HAL_TIM_OC_Init+0x188>)
 8007c60:	f7fd f8df 	bl	8004e22 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d008      	beq.n	8007c7e <HAL_TIM_OC_Init+0xde>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	2b80      	cmp	r3, #128	; 0x80
 8007c72:	d004      	beq.n	8007c7e <HAL_TIM_OC_Init+0xde>
 8007c74:	f240 2195 	movw	r1, #661	; 0x295
 8007c78:	482b      	ldr	r0, [pc, #172]	; (8007d28 <HAL_TIM_OC_Init+0x188>)
 8007c7a:	f7fd f8d2 	bl	8004e22 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d106      	bne.n	8007c98 <HAL_TIM_OC_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7fd ffa4 	bl	8005be0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f000 faa4 	bl	80081f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	40000400 	.word	0x40000400
 8007d14:	40000800 	.word	0x40000800
 8007d18:	40000c00 	.word	0x40000c00
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40014400 	.word	0x40014400
 8007d24:	40014800 	.word	0x40014800
 8007d28:	08009594 	.word	0x08009594

08007d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d122      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d11b      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0202 	mvn.w	r2, #2
 8007d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa24 	bl	80081bc <HAL_TIM_IC_CaptureCallback>
 8007d74:	e005      	b.n	8007d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa16 	bl	80081a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fa27 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d122      	bne.n	8007ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d11b      	bne.n	8007ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0204 	mvn.w	r2, #4
 8007dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2202      	movs	r2, #2
 8007db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f9fa 	bl	80081bc <HAL_TIM_IC_CaptureCallback>
 8007dc8:	e005      	b.n	8007dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f9ec 	bl	80081a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f9fd 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b08      	cmp	r3, #8
 8007de8:	d122      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d11b      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0208 	mvn.w	r2, #8
 8007e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2204      	movs	r2, #4
 8007e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f9d0 	bl	80081bc <HAL_TIM_IC_CaptureCallback>
 8007e1c:	e005      	b.n	8007e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f9c2 	bl	80081a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f9d3 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	2b10      	cmp	r3, #16
 8007e3c:	d122      	bne.n	8007e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d11b      	bne.n	8007e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0210 	mvn.w	r2, #16
 8007e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2208      	movs	r2, #8
 8007e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f9a6 	bl	80081bc <HAL_TIM_IC_CaptureCallback>
 8007e70:	e005      	b.n	8007e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f998 	bl	80081a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f9a9 	bl	80081d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d10e      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d107      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f06f 0201 	mvn.w	r2, #1
 8007ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7f9 faa6 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eba:	2b80      	cmp	r3, #128	; 0x80
 8007ebc:	d10e      	bne.n	8007edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec8:	2b80      	cmp	r3, #128	; 0x80
 8007eca:	d107      	bne.n	8007edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fcec 	bl	80088b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee6:	2b40      	cmp	r3, #64	; 0x40
 8007ee8:	d10e      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef4:	2b40      	cmp	r3, #64	; 0x40
 8007ef6:	d107      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f96e 	bl	80081e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	d10e      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d107      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0220 	mvn.w	r2, #32
 8007f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fcb6 	bl	80088a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d010      	beq.n	8007f74 <HAL_TIM_OC_ConfigChannel+0x38>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	d00d      	beq.n	8007f74 <HAL_TIM_OC_ConfigChannel+0x38>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d00a      	beq.n	8007f74 <HAL_TIM_OC_ConfigChannel+0x38>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b0c      	cmp	r3, #12
 8007f62:	d007      	beq.n	8007f74 <HAL_TIM_OC_ConfigChannel+0x38>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b3c      	cmp	r3, #60	; 0x3c
 8007f68:	d004      	beq.n	8007f74 <HAL_TIM_OC_ConfigChannel+0x38>
 8007f6a:	f640 71c5 	movw	r1, #4037	; 0xfc5
 8007f6e:	4886      	ldr	r0, [pc, #536]	; (8008188 <HAL_TIM_OC_ConfigChannel+0x24c>)
 8007f70:	f7fc ff57 	bl	8004e22 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d018      	beq.n	8007fae <HAL_TIM_OC_ConfigChannel+0x72>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b10      	cmp	r3, #16
 8007f82:	d014      	beq.n	8007fae <HAL_TIM_OC_ConfigChannel+0x72>
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d010      	beq.n	8007fae <HAL_TIM_OC_ConfigChannel+0x72>
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b30      	cmp	r3, #48	; 0x30
 8007f92:	d00c      	beq.n	8007fae <HAL_TIM_OC_ConfigChannel+0x72>
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b50      	cmp	r3, #80	; 0x50
 8007f9a:	d008      	beq.n	8007fae <HAL_TIM_OC_ConfigChannel+0x72>
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b40      	cmp	r3, #64	; 0x40
 8007fa2:	d004      	beq.n	8007fae <HAL_TIM_OC_ConfigChannel+0x72>
 8007fa4:	f640 71c6 	movw	r1, #4038	; 0xfc6
 8007fa8:	4877      	ldr	r0, [pc, #476]	; (8008188 <HAL_TIM_OC_ConfigChannel+0x24c>)
 8007faa:	f7fc ff3a 	bl	8004e22 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <HAL_TIM_OC_ConfigChannel+0x8c>
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_TIM_OC_ConfigChannel+0x8c>
 8007fbe:	f640 71c7 	movw	r1, #4039	; 0xfc7
 8007fc2:	4871      	ldr	r0, [pc, #452]	; (8008188 <HAL_TIM_OC_ConfigChannel+0x24c>)
 8007fc4:	f7fc ff2d 	bl	8004e22 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <HAL_TIM_OC_ConfigChannel+0x9a>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e0d4      	b.n	8008180 <HAL_TIM_OC_ConfigChannel+0x244>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b0c      	cmp	r3, #12
 8007fe2:	f200 80c5 	bhi.w	8008170 <HAL_TIM_OC_ConfigChannel+0x234>
 8007fe6:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <HAL_TIM_OC_ConfigChannel+0xb0>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	08008021 	.word	0x08008021
 8007ff0:	08008171 	.word	0x08008171
 8007ff4:	08008171 	.word	0x08008171
 8007ff8:	08008171 	.word	0x08008171
 8007ffc:	08008089 	.word	0x08008089
 8008000:	08008171 	.word	0x08008171
 8008004:	08008171 	.word	0x08008171
 8008008:	08008171 	.word	0x08008171
 800800c:	080080dd 	.word	0x080080dd
 8008010:	08008171 	.word	0x08008171
 8008014:	08008171 	.word	0x08008171
 8008018:	08008171 	.word	0x08008171
 800801c:	08008127 	.word	0x08008127
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a59      	ldr	r2, [pc, #356]	; (800818c <HAL_TIM_OC_ConfigChannel+0x250>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d027      	beq.n	800807a <HAL_TIM_OC_ConfigChannel+0x13e>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008032:	d022      	beq.n	800807a <HAL_TIM_OC_ConfigChannel+0x13e>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a55      	ldr	r2, [pc, #340]	; (8008190 <HAL_TIM_OC_ConfigChannel+0x254>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d01d      	beq.n	800807a <HAL_TIM_OC_ConfigChannel+0x13e>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a54      	ldr	r2, [pc, #336]	; (8008194 <HAL_TIM_OC_ConfigChannel+0x258>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d018      	beq.n	800807a <HAL_TIM_OC_ConfigChannel+0x13e>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a52      	ldr	r2, [pc, #328]	; (8008198 <HAL_TIM_OC_ConfigChannel+0x25c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d013      	beq.n	800807a <HAL_TIM_OC_ConfigChannel+0x13e>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a51      	ldr	r2, [pc, #324]	; (800819c <HAL_TIM_OC_ConfigChannel+0x260>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00e      	beq.n	800807a <HAL_TIM_OC_ConfigChannel+0x13e>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a4f      	ldr	r2, [pc, #316]	; (80081a0 <HAL_TIM_OC_ConfigChannel+0x264>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d009      	beq.n	800807a <HAL_TIM_OC_ConfigChannel+0x13e>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a4e      	ldr	r2, [pc, #312]	; (80081a4 <HAL_TIM_OC_ConfigChannel+0x268>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d004      	beq.n	800807a <HAL_TIM_OC_ConfigChannel+0x13e>
 8008070:	f640 71d1 	movw	r1, #4049	; 0xfd1
 8008074:	4844      	ldr	r0, [pc, #272]	; (8008188 <HAL_TIM_OC_ConfigChannel+0x24c>)
 8008076:	f7fc fed4 	bl	8004e22 <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f939 	bl	80082f8 <TIM_OC1_SetConfig>
      break;
 8008086:	e076      	b.n	8008176 <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a3f      	ldr	r2, [pc, #252]	; (800818c <HAL_TIM_OC_ConfigChannel+0x250>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d01d      	beq.n	80080ce <HAL_TIM_OC_ConfigChannel+0x192>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800809a:	d018      	beq.n	80080ce <HAL_TIM_OC_ConfigChannel+0x192>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a3b      	ldr	r2, [pc, #236]	; (8008190 <HAL_TIM_OC_ConfigChannel+0x254>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d013      	beq.n	80080ce <HAL_TIM_OC_ConfigChannel+0x192>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a3a      	ldr	r2, [pc, #232]	; (8008194 <HAL_TIM_OC_ConfigChannel+0x258>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00e      	beq.n	80080ce <HAL_TIM_OC_ConfigChannel+0x192>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a38      	ldr	r2, [pc, #224]	; (8008198 <HAL_TIM_OC_ConfigChannel+0x25c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d009      	beq.n	80080ce <HAL_TIM_OC_ConfigChannel+0x192>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a37      	ldr	r2, [pc, #220]	; (800819c <HAL_TIM_OC_ConfigChannel+0x260>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d004      	beq.n	80080ce <HAL_TIM_OC_ConfigChannel+0x192>
 80080c4:	f640 71db 	movw	r1, #4059	; 0xfdb
 80080c8:	482f      	ldr	r0, [pc, #188]	; (8008188 <HAL_TIM_OC_ConfigChannel+0x24c>)
 80080ca:	f7fc feaa 	bl	8004e22 <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 f99f 	bl	8008418 <TIM_OC2_SetConfig>
      break;
 80080da:	e04c      	b.n	8008176 <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a2a      	ldr	r2, [pc, #168]	; (800818c <HAL_TIM_OC_ConfigChannel+0x250>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d018      	beq.n	8008118 <HAL_TIM_OC_ConfigChannel+0x1dc>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ee:	d013      	beq.n	8008118 <HAL_TIM_OC_ConfigChannel+0x1dc>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a26      	ldr	r2, [pc, #152]	; (8008190 <HAL_TIM_OC_ConfigChannel+0x254>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d00e      	beq.n	8008118 <HAL_TIM_OC_ConfigChannel+0x1dc>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a25      	ldr	r2, [pc, #148]	; (8008194 <HAL_TIM_OC_ConfigChannel+0x258>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d009      	beq.n	8008118 <HAL_TIM_OC_ConfigChannel+0x1dc>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a23      	ldr	r2, [pc, #140]	; (8008198 <HAL_TIM_OC_ConfigChannel+0x25c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d004      	beq.n	8008118 <HAL_TIM_OC_ConfigChannel+0x1dc>
 800810e:	f640 71e5 	movw	r1, #4069	; 0xfe5
 8008112:	481d      	ldr	r0, [pc, #116]	; (8008188 <HAL_TIM_OC_ConfigChannel+0x24c>)
 8008114:	f7fc fe85 	bl	8004e22 <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fa0e 	bl	8008540 <TIM_OC3_SetConfig>
      break;
 8008124:	e027      	b.n	8008176 <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a18      	ldr	r2, [pc, #96]	; (800818c <HAL_TIM_OC_ConfigChannel+0x250>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d018      	beq.n	8008162 <HAL_TIM_OC_ConfigChannel+0x226>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008138:	d013      	beq.n	8008162 <HAL_TIM_OC_ConfigChannel+0x226>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a14      	ldr	r2, [pc, #80]	; (8008190 <HAL_TIM_OC_ConfigChannel+0x254>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d00e      	beq.n	8008162 <HAL_TIM_OC_ConfigChannel+0x226>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a12      	ldr	r2, [pc, #72]	; (8008194 <HAL_TIM_OC_ConfigChannel+0x258>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d009      	beq.n	8008162 <HAL_TIM_OC_ConfigChannel+0x226>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a11      	ldr	r2, [pc, #68]	; (8008198 <HAL_TIM_OC_ConfigChannel+0x25c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d004      	beq.n	8008162 <HAL_TIM_OC_ConfigChannel+0x226>
 8008158:	f640 71ef 	movw	r1, #4079	; 0xfef
 800815c:	480a      	ldr	r0, [pc, #40]	; (8008188 <HAL_TIM_OC_ConfigChannel+0x24c>)
 800815e:	f7fc fe60 	bl	8004e22 <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fa7d 	bl	8008668 <TIM_OC4_SetConfig>
      break;
 800816e:	e002      	b.n	8008176 <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    default:
      status = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	75fb      	strb	r3, [r7, #23]
      break;
 8008174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800817e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	08009594 	.word	0x08009594
 800818c:	40010000 	.word	0x40010000
 8008190:	40000400 	.word	0x40000400
 8008194:	40000800 	.word	0x40000800
 8008198:	40000c00 	.word	0x40000c00
 800819c:	40014000 	.word	0x40014000
 80081a0:	40014400 	.word	0x40014400
 80081a4:	40014800 	.word	0x40014800

080081a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a34      	ldr	r2, [pc, #208]	; (80082dc <TIM_Base_SetConfig+0xe4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00f      	beq.n	8008230 <TIM_Base_SetConfig+0x38>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008216:	d00b      	beq.n	8008230 <TIM_Base_SetConfig+0x38>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a31      	ldr	r2, [pc, #196]	; (80082e0 <TIM_Base_SetConfig+0xe8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d007      	beq.n	8008230 <TIM_Base_SetConfig+0x38>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a30      	ldr	r2, [pc, #192]	; (80082e4 <TIM_Base_SetConfig+0xec>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <TIM_Base_SetConfig+0x38>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a2f      	ldr	r2, [pc, #188]	; (80082e8 <TIM_Base_SetConfig+0xf0>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d108      	bne.n	8008242 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a25      	ldr	r2, [pc, #148]	; (80082dc <TIM_Base_SetConfig+0xe4>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d01b      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008250:	d017      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a22      	ldr	r2, [pc, #136]	; (80082e0 <TIM_Base_SetConfig+0xe8>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a21      	ldr	r2, [pc, #132]	; (80082e4 <TIM_Base_SetConfig+0xec>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00f      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a20      	ldr	r2, [pc, #128]	; (80082e8 <TIM_Base_SetConfig+0xf0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00b      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a1f      	ldr	r2, [pc, #124]	; (80082ec <TIM_Base_SetConfig+0xf4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d007      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <TIM_Base_SetConfig+0xf8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d003      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <TIM_Base_SetConfig+0xfc>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d108      	bne.n	8008294 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a08      	ldr	r2, [pc, #32]	; (80082dc <TIM_Base_SetConfig+0xe4>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d103      	bne.n	80082c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	615a      	str	r2, [r3, #20]
}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40010000 	.word	0x40010000
 80082e0:	40000400 	.word	0x40000400
 80082e4:	40000800 	.word	0x40000800
 80082e8:	40000c00 	.word	0x40000c00
 80082ec:	40014000 	.word	0x40014000
 80082f0:	40014400 	.word	0x40014400
 80082f4:	40014800 	.word	0x40014800

080082f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f023 0201 	bic.w	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f023 0303 	bic.w	r3, r3, #3
 800832e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f023 0302 	bic.w	r3, r3, #2
 8008340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	4313      	orrs	r3, r2
 800834a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a30      	ldr	r2, [pc, #192]	; (8008410 <TIM_OC1_SetConfig+0x118>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d119      	bne.n	8008388 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d008      	beq.n	800836e <TIM_OC1_SetConfig+0x76>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b08      	cmp	r3, #8
 8008362:	d004      	beq.n	800836e <TIM_OC1_SetConfig+0x76>
 8008364:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 8008368:	482a      	ldr	r0, [pc, #168]	; (8008414 <TIM_OC1_SetConfig+0x11c>)
 800836a:	f7fc fd5a 	bl	8004e22 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f023 0308 	bic.w	r3, r3, #8
 8008374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	4313      	orrs	r3, r2
 800837e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f023 0304 	bic.w	r3, r3, #4
 8008386:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a21      	ldr	r2, [pc, #132]	; (8008410 <TIM_OC1_SetConfig+0x118>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d12d      	bne.n	80083ec <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008398:	d008      	beq.n	80083ac <TIM_OC1_SetConfig+0xb4>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <TIM_OC1_SetConfig+0xb4>
 80083a2:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 80083a6:	481b      	ldr	r0, [pc, #108]	; (8008414 <TIM_OC1_SetConfig+0x11c>)
 80083a8:	f7fc fd3b 	bl	8004e22 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b4:	d008      	beq.n	80083c8 <TIM_OC1_SetConfig+0xd0>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <TIM_OC1_SetConfig+0xd0>
 80083be:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 80083c2:	4814      	ldr	r0, [pc, #80]	; (8008414 <TIM_OC1_SetConfig+0x11c>)
 80083c4:	f7fc fd2d 	bl	8004e22 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4313      	orrs	r3, r2
 80083e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	621a      	str	r2, [r3, #32]
}
 8008406:	bf00      	nop
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40010000 	.word	0x40010000
 8008414:	08009594 	.word	0x08009594

08008418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	f023 0210 	bic.w	r2, r3, #16
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800844e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	021b      	lsls	r3, r3, #8
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	4313      	orrs	r3, r2
 800845a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f023 0320 	bic.w	r3, r3, #32
 8008462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	011b      	lsls	r3, r3, #4
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	4313      	orrs	r3, r2
 800846e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a31      	ldr	r2, [pc, #196]	; (8008538 <TIM_OC2_SetConfig+0x120>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d11a      	bne.n	80084ae <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d008      	beq.n	8008492 <TIM_OC2_SetConfig+0x7a>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	2b08      	cmp	r3, #8
 8008486:	d004      	beq.n	8008492 <TIM_OC2_SetConfig+0x7a>
 8008488:	f641 3112 	movw	r1, #6930	; 0x1b12
 800848c:	482b      	ldr	r0, [pc, #172]	; (800853c <TIM_OC2_SetConfig+0x124>)
 800848e:	f7fc fcc8 	bl	8004e22 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a21      	ldr	r2, [pc, #132]	; (8008538 <TIM_OC2_SetConfig+0x120>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d12f      	bne.n	8008516 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084be:	d008      	beq.n	80084d2 <TIM_OC2_SetConfig+0xba>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d004      	beq.n	80084d2 <TIM_OC2_SetConfig+0xba>
 80084c8:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 80084cc:	481b      	ldr	r0, [pc, #108]	; (800853c <TIM_OC2_SetConfig+0x124>)
 80084ce:	f7fc fca8 	bl	8004e22 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084da:	d008      	beq.n	80084ee <TIM_OC2_SetConfig+0xd6>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <TIM_OC2_SetConfig+0xd6>
 80084e4:	f641 3121 	movw	r1, #6945	; 0x1b21
 80084e8:	4814      	ldr	r0, [pc, #80]	; (800853c <TIM_OC2_SetConfig+0x124>)
 80084ea:	f7fc fc9a 	bl	8004e22 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	621a      	str	r2, [r3, #32]
}
 8008530:	bf00      	nop
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	40010000 	.word	0x40010000
 800853c:	08009594 	.word	0x08009594

08008540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0303 	bic.w	r3, r3, #3
 8008576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	021b      	lsls	r3, r3, #8
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	4313      	orrs	r3, r2
 8008594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a31      	ldr	r2, [pc, #196]	; (8008660 <TIM_OC3_SetConfig+0x120>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d11a      	bne.n	80085d4 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d008      	beq.n	80085b8 <TIM_OC3_SetConfig+0x78>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d004      	beq.n	80085b8 <TIM_OC3_SetConfig+0x78>
 80085ae:	f641 315d 	movw	r1, #7005	; 0x1b5d
 80085b2:	482c      	ldr	r0, [pc, #176]	; (8008664 <TIM_OC3_SetConfig+0x124>)
 80085b4:	f7fc fc35 	bl	8004e22 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	021b      	lsls	r3, r3, #8
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a22      	ldr	r2, [pc, #136]	; (8008660 <TIM_OC3_SetConfig+0x120>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d12f      	bne.n	800863c <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e4:	d008      	beq.n	80085f8 <TIM_OC3_SetConfig+0xb8>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <TIM_OC3_SetConfig+0xb8>
 80085ee:	f641 316a 	movw	r1, #7018	; 0x1b6a
 80085f2:	481c      	ldr	r0, [pc, #112]	; (8008664 <TIM_OC3_SetConfig+0x124>)
 80085f4:	f7fc fc15 	bl	8004e22 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008600:	d008      	beq.n	8008614 <TIM_OC3_SetConfig+0xd4>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <TIM_OC3_SetConfig+0xd4>
 800860a:	f641 316b 	movw	r1, #7019	; 0x1b6b
 800860e:	4815      	ldr	r0, [pc, #84]	; (8008664 <TIM_OC3_SetConfig+0x124>)
 8008610:	f7fc fc07 	bl	8004e22 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800861a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	011b      	lsls	r3, r3, #4
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4313      	orrs	r3, r2
 800862e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	4313      	orrs	r3, r2
 800863a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	40010000 	.word	0x40010000
 8008664:	08009594 	.word	0x08009594

08008668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	031b      	lsls	r3, r3, #12
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4313      	orrs	r3, r2
 80086be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a16      	ldr	r2, [pc, #88]	; (800871c <TIM_OC4_SetConfig+0xb4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d117      	bne.n	80086f8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d0:	d008      	beq.n	80086e4 <TIM_OC4_SetConfig+0x7c>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d004      	beq.n	80086e4 <TIM_OC4_SetConfig+0x7c>
 80086da:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 80086de:	4810      	ldr	r0, [pc, #64]	; (8008720 <TIM_OC4_SetConfig+0xb8>)
 80086e0:	f7fc fb9f 	bl	8004e22 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	019b      	lsls	r3, r3, #6
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	621a      	str	r2, [r3, #32]
}
 8008712:	bf00      	nop
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	40010000 	.word	0x40010000
 8008720:	08009594 	.word	0x08009594

08008724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a55      	ldr	r2, [pc, #340]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d018      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008740:	d013      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a51      	ldr	r2, [pc, #324]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d00e      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a4f      	ldr	r2, [pc, #316]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d009      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a4e      	ldr	r2, [pc, #312]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d004      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8008760:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8008764:	484c      	ldr	r0, [pc, #304]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008766:	f7fc fb5c 	bl	8004e22 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d020      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b10      	cmp	r3, #16
 8008778:	d01c      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b20      	cmp	r3, #32
 8008780:	d018      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b30      	cmp	r3, #48	; 0x30
 8008788:	d014      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b40      	cmp	r3, #64	; 0x40
 8008790:	d010      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b50      	cmp	r3, #80	; 0x50
 8008798:	d00c      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b60      	cmp	r3, #96	; 0x60
 80087a0:	d008      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b70      	cmp	r3, #112	; 0x70
 80087a8:	d004      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80087aa:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80087ae:	483a      	ldr	r0, [pc, #232]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80087b0:	f7fc fb37 	bl	8004e22 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2b80      	cmp	r3, #128	; 0x80
 80087ba:	d008      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80087c4:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80087c8:	4833      	ldr	r0, [pc, #204]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80087ca:	f7fc fb2a 	bl	8004e22 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80087d8:	2302      	movs	r3, #2
 80087da:	e050      	b.n	800887e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a1b      	ldr	r2, [pc, #108]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d018      	beq.n	8008852 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008828:	d013      	beq.n	8008852 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a17      	ldr	r2, [pc, #92]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d00e      	beq.n	8008852 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a15      	ldr	r2, [pc, #84]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d009      	beq.n	8008852 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a14      	ldr	r2, [pc, #80]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d004      	beq.n	8008852 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a13      	ldr	r2, [pc, #76]	; (800889c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d10c      	bne.n	800886c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	4313      	orrs	r3, r2
 8008862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	40010000 	.word	0x40010000
 800888c:	40000400 	.word	0x40000400
 8008890:	40000800 	.word	0x40000800
 8008894:	40000c00 	.word	0x40000c00
 8008898:	080095cc 	.word	0x080095cc
 800889c:	40014000 	.word	0x40014000

080088a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e0a0      	b.n	8008a1c <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d02c      	beq.n	800893c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a4f      	ldr	r2, [pc, #316]	; (8008a24 <HAL_UART_Init+0x15c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d00e      	beq.n	800890a <HAL_UART_Init+0x42>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a4d      	ldr	r2, [pc, #308]	; (8008a28 <HAL_UART_Init+0x160>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d009      	beq.n	800890a <HAL_UART_Init+0x42>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a4c      	ldr	r2, [pc, #304]	; (8008a2c <HAL_UART_Init+0x164>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d004      	beq.n	800890a <HAL_UART_Init+0x42>
 8008900:	f240 1173 	movw	r1, #371	; 0x173
 8008904:	484a      	ldr	r0, [pc, #296]	; (8008a30 <HAL_UART_Init+0x168>)
 8008906:	f7fc fa8c 	bl	8004e22 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d028      	beq.n	8008964 <HAL_UART_Init+0x9c>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800891a:	d023      	beq.n	8008964 <HAL_UART_Init+0x9c>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008924:	d01e      	beq.n	8008964 <HAL_UART_Init+0x9c>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800892e:	d019      	beq.n	8008964 <HAL_UART_Init+0x9c>
 8008930:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8008934:	483e      	ldr	r0, [pc, #248]	; (8008a30 <HAL_UART_Init+0x168>)
 8008936:	f7fc fa74 	bl	8004e22 <assert_failed>
 800893a:	e013      	b.n	8008964 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a38      	ldr	r2, [pc, #224]	; (8008a24 <HAL_UART_Init+0x15c>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d00e      	beq.n	8008964 <HAL_UART_Init+0x9c>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a37      	ldr	r2, [pc, #220]	; (8008a28 <HAL_UART_Init+0x160>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d009      	beq.n	8008964 <HAL_UART_Init+0x9c>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a35      	ldr	r2, [pc, #212]	; (8008a2c <HAL_UART_Init+0x164>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d004      	beq.n	8008964 <HAL_UART_Init+0x9c>
 800895a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800895e:	4834      	ldr	r0, [pc, #208]	; (8008a30 <HAL_UART_Init+0x168>)
 8008960:	f7fc fa5f 	bl	8004e22 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d009      	beq.n	8008980 <HAL_UART_Init+0xb8>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008974:	d004      	beq.n	8008980 <HAL_UART_Init+0xb8>
 8008976:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800897a:	482d      	ldr	r0, [pc, #180]	; (8008a30 <HAL_UART_Init+0x168>)
 800897c:	f7fc fa51 	bl	8004e22 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	69db      	ldr	r3, [r3, #28]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d009      	beq.n	800899c <HAL_UART_Init+0xd4>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008990:	d004      	beq.n	800899c <HAL_UART_Init+0xd4>
 8008992:	f240 117b 	movw	r1, #379	; 0x17b
 8008996:	4826      	ldr	r0, [pc, #152]	; (8008a30 <HAL_UART_Init+0x168>)
 8008998:	f7fc fa43 	bl	8004e22 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d106      	bne.n	80089b6 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7fd f93d 	bl	8005c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2224      	movs	r2, #36	; 0x24
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f930 	bl	8008c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	691a      	ldr	r2, [r3, #16]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695a      	ldr	r2, [r3, #20]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	40011000 	.word	0x40011000
 8008a28:	40004400 	.word	0x40004400
 8008a2c:	40011400 	.word	0x40011400
 8008a30:	08009608 	.word	0x08009608

08008a34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08a      	sub	sp, #40	; 0x28
 8008a38:	af02      	add	r7, sp, #8
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	4613      	mov	r3, r2
 8008a42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d17c      	bne.n	8008b4e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <HAL_UART_Transmit+0x2c>
 8008a5a:	88fb      	ldrh	r3, [r7, #6]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e075      	b.n	8008b50 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d101      	bne.n	8008a72 <HAL_UART_Transmit+0x3e>
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e06e      	b.n	8008b50 <HAL_UART_Transmit+0x11c>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2221      	movs	r2, #33	; 0x21
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a88:	f7fd fa04 	bl	8005e94 <HAL_GetTick>
 8008a8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	88fa      	ldrh	r2, [r7, #6]
 8008a92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	88fa      	ldrh	r2, [r7, #6]
 8008a98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aa2:	d108      	bne.n	8008ab6 <HAL_UART_Transmit+0x82>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d104      	bne.n	8008ab6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	61bb      	str	r3, [r7, #24]
 8008ab4:	e003      	b.n	8008abe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008ac6:	e02a      	b.n	8008b1e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2180      	movs	r1, #128	; 0x80
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 f840 	bl	8008b58 <UART_WaitOnFlagUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e036      	b.n	8008b50 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10b      	bne.n	8008b00 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008af6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	3302      	adds	r3, #2
 8008afc:	61bb      	str	r3, [r7, #24]
 8008afe:	e007      	b.n	8008b10 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	3b01      	subs	r3, #1
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1cf      	bne.n	8008ac8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2140      	movs	r1, #64	; 0x40
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 f810 	bl	8008b58 <UART_WaitOnFlagUntilTimeout>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e006      	b.n	8008b50 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e000      	b.n	8008b50 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b4e:	2302      	movs	r3, #2
  }
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3720      	adds	r7, #32
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b090      	sub	sp, #64	; 0x40
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	4613      	mov	r3, r2
 8008b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b68:	e050      	b.n	8008c0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b70:	d04c      	beq.n	8008c0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d007      	beq.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b78:	f7fd f98c 	bl	8005e94 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d241      	bcs.n	8008c0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ba8:	637a      	str	r2, [r7, #52]	; 0x34
 8008baa:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e5      	bne.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3314      	adds	r3, #20
 8008bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	613b      	str	r3, [r7, #16]
   return(result);
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f023 0301 	bic.w	r3, r3, #1
 8008bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3314      	adds	r3, #20
 8008bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bdc:	623a      	str	r2, [r7, #32]
 8008bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	69f9      	ldr	r1, [r7, #28]
 8008be2:	6a3a      	ldr	r2, [r7, #32]
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e5      	bne.n	8008bbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e00f      	b.n	8008c2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	4013      	ands	r3, r2
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	bf0c      	ite	eq
 8008c1c:	2301      	moveq	r3, #1
 8008c1e:	2300      	movne	r3, #0
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	461a      	mov	r2, r3
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d09f      	beq.n	8008b6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3740      	adds	r7, #64	; 0x40
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c38:	b0c0      	sub	sp, #256	; 0x100
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	4bcf      	ldr	r3, [pc, #828]	; (8008f84 <UART_SetConfig+0x350>)
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d904      	bls.n	8008c56 <UART_SetConfig+0x22>
 8008c4c:	f640 6161 	movw	r1, #3681	; 0xe61
 8008c50:	48cd      	ldr	r0, [pc, #820]	; (8008f88 <UART_SetConfig+0x354>)
 8008c52:	f7fc f8e6 	bl	8004e22 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00a      	beq.n	8008c76 <UART_SetConfig+0x42>
 8008c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c6a:	d004      	beq.n	8008c76 <UART_SetConfig+0x42>
 8008c6c:	f640 6162 	movw	r1, #3682	; 0xe62
 8008c70:	48c5      	ldr	r0, [pc, #788]	; (8008f88 <UART_SetConfig+0x354>)
 8008c72:	f7fc f8d6 	bl	8004e22 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d010      	beq.n	8008ca2 <UART_SetConfig+0x6e>
 8008c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c8a:	d00a      	beq.n	8008ca2 <UART_SetConfig+0x6e>
 8008c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c96:	d004      	beq.n	8008ca2 <UART_SetConfig+0x6e>
 8008c98:	f640 6163 	movw	r1, #3683	; 0xe63
 8008c9c:	48ba      	ldr	r0, [pc, #744]	; (8008f88 <UART_SetConfig+0x354>)
 8008c9e:	f7fc f8c0 	bl	8004e22 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca6:	695a      	ldr	r2, [r3, #20]
 8008ca8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008cac:	4013      	ands	r3, r2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <UART_SetConfig+0x88>
 8008cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d104      	bne.n	8008cc6 <UART_SetConfig+0x92>
 8008cbc:	f640 6164 	movw	r1, #3684	; 0xe64
 8008cc0:	48b1      	ldr	r0, [pc, #708]	; (8008f88 <UART_SetConfig+0x354>)
 8008cc2:	f7fc f8ae 	bl	8004e22 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd6:	68d9      	ldr	r1, [r3, #12]
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	ea40 0301 	orr.w	r3, r0, r1
 8008ce2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d12:	f021 010c 	bic.w	r1, r1, #12
 8008d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d20:	430b      	orrs	r3, r1
 8008d22:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d34:	6999      	ldr	r1, [r3, #24]
 8008d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	ea40 0301 	orr.w	r3, r0, r1
 8008d40:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	4b90      	ldr	r3, [pc, #576]	; (8008f8c <UART_SetConfig+0x358>)
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d005      	beq.n	8008d5a <UART_SetConfig+0x126>
 8008d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	4b8e      	ldr	r3, [pc, #568]	; (8008f90 <UART_SetConfig+0x35c>)
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d104      	bne.n	8008d64 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d5a:	f7fe fa67 	bl	800722c <HAL_RCC_GetPCLK2Freq>
 8008d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d62:	e003      	b.n	8008d6c <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d64:	f7fe fa4e 	bl	8007204 <HAL_RCC_GetPCLK1Freq>
 8008d68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d76:	f040 810f 	bne.w	8008f98 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d84:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d88:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	462b      	mov	r3, r5
 8008d90:	1891      	adds	r1, r2, r2
 8008d92:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d94:	415b      	adcs	r3, r3
 8008d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	eb12 0801 	adds.w	r8, r2, r1
 8008da2:	4629      	mov	r1, r5
 8008da4:	eb43 0901 	adc.w	r9, r3, r1
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008db4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008db8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008dbc:	4690      	mov	r8, r2
 8008dbe:	4699      	mov	r9, r3
 8008dc0:	4623      	mov	r3, r4
 8008dc2:	eb18 0303 	adds.w	r3, r8, r3
 8008dc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008dca:	462b      	mov	r3, r5
 8008dcc:	eb49 0303 	adc.w	r3, r9, r3
 8008dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008de0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008de4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008de8:	460b      	mov	r3, r1
 8008dea:	18db      	adds	r3, r3, r3
 8008dec:	653b      	str	r3, [r7, #80]	; 0x50
 8008dee:	4613      	mov	r3, r2
 8008df0:	eb42 0303 	adc.w	r3, r2, r3
 8008df4:	657b      	str	r3, [r7, #84]	; 0x54
 8008df6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008dfa:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008dfe:	f7f7 fa3b 	bl	8000278 <__aeabi_uldivmod>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4b63      	ldr	r3, [pc, #396]	; (8008f94 <UART_SetConfig+0x360>)
 8008e08:	fba3 2302 	umull	r2, r3, r3, r2
 8008e0c:	095b      	lsrs	r3, r3, #5
 8008e0e:	011c      	lsls	r4, r3, #4
 8008e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e1a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e1e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e22:	4642      	mov	r2, r8
 8008e24:	464b      	mov	r3, r9
 8008e26:	1891      	adds	r1, r2, r2
 8008e28:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e2a:	415b      	adcs	r3, r3
 8008e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e32:	4641      	mov	r1, r8
 8008e34:	eb12 0a01 	adds.w	sl, r2, r1
 8008e38:	4649      	mov	r1, r9
 8008e3a:	eb43 0b01 	adc.w	fp, r3, r1
 8008e3e:	f04f 0200 	mov.w	r2, #0
 8008e42:	f04f 0300 	mov.w	r3, #0
 8008e46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e52:	4692      	mov	sl, r2
 8008e54:	469b      	mov	fp, r3
 8008e56:	4643      	mov	r3, r8
 8008e58:	eb1a 0303 	adds.w	r3, sl, r3
 8008e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e60:	464b      	mov	r3, r9
 8008e62:	eb4b 0303 	adc.w	r3, fp, r3
 8008e66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e76:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	18db      	adds	r3, r3, r3
 8008e82:	643b      	str	r3, [r7, #64]	; 0x40
 8008e84:	4613      	mov	r3, r2
 8008e86:	eb42 0303 	adc.w	r3, r2, r3
 8008e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e90:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e94:	f7f7 f9f0 	bl	8000278 <__aeabi_uldivmod>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4b3d      	ldr	r3, [pc, #244]	; (8008f94 <UART_SetConfig+0x360>)
 8008ea0:	fba3 2301 	umull	r2, r3, r3, r1
 8008ea4:	095b      	lsrs	r3, r3, #5
 8008ea6:	2264      	movs	r2, #100	; 0x64
 8008ea8:	fb02 f303 	mul.w	r3, r2, r3
 8008eac:	1acb      	subs	r3, r1, r3
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008eb4:	4b37      	ldr	r3, [pc, #220]	; (8008f94 <UART_SetConfig+0x360>)
 8008eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8008eba:	095b      	lsrs	r3, r3, #5
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ec2:	441c      	add	r4, r3
 8008ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ece:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ed2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	464b      	mov	r3, r9
 8008eda:	1891      	adds	r1, r2, r2
 8008edc:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ede:	415b      	adcs	r3, r3
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ee6:	4641      	mov	r1, r8
 8008ee8:	1851      	adds	r1, r2, r1
 8008eea:	6339      	str	r1, [r7, #48]	; 0x30
 8008eec:	4649      	mov	r1, r9
 8008eee:	414b      	adcs	r3, r1
 8008ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef2:	f04f 0200 	mov.w	r2, #0
 8008ef6:	f04f 0300 	mov.w	r3, #0
 8008efa:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008efe:	4659      	mov	r1, fp
 8008f00:	00cb      	lsls	r3, r1, #3
 8008f02:	4651      	mov	r1, sl
 8008f04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f08:	4651      	mov	r1, sl
 8008f0a:	00ca      	lsls	r2, r1, #3
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4603      	mov	r3, r0
 8008f12:	4642      	mov	r2, r8
 8008f14:	189b      	adds	r3, r3, r2
 8008f16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	460a      	mov	r2, r1
 8008f1e:	eb42 0303 	adc.w	r3, r2, r3
 8008f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f32:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	18db      	adds	r3, r3, r3
 8008f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f40:	4613      	mov	r3, r2
 8008f42:	eb42 0303 	adc.w	r3, r2, r3
 8008f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f4c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f50:	f7f7 f992 	bl	8000278 <__aeabi_uldivmod>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <UART_SetConfig+0x360>)
 8008f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8008f5e:	095b      	lsrs	r3, r3, #5
 8008f60:	2164      	movs	r1, #100	; 0x64
 8008f62:	fb01 f303 	mul.w	r3, r1, r3
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	00db      	lsls	r3, r3, #3
 8008f6a:	3332      	adds	r3, #50	; 0x32
 8008f6c:	4a09      	ldr	r2, [pc, #36]	; (8008f94 <UART_SetConfig+0x360>)
 8008f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f72:	095b      	lsrs	r3, r3, #5
 8008f74:	f003 0207 	and.w	r2, r3, #7
 8008f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4422      	add	r2, r4
 8008f80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f82:	e108      	b.n	8009196 <UART_SetConfig+0x562>
 8008f84:	00a037a0 	.word	0x00a037a0
 8008f88:	08009608 	.word	0x08009608
 8008f8c:	40011000 	.word	0x40011000
 8008f90:	40011400 	.word	0x40011400
 8008f94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008fa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008fa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008faa:	4642      	mov	r2, r8
 8008fac:	464b      	mov	r3, r9
 8008fae:	1891      	adds	r1, r2, r2
 8008fb0:	6239      	str	r1, [r7, #32]
 8008fb2:	415b      	adcs	r3, r3
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fba:	4641      	mov	r1, r8
 8008fbc:	1854      	adds	r4, r2, r1
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	eb43 0501 	adc.w	r5, r3, r1
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	f04f 0300 	mov.w	r3, #0
 8008fcc:	00eb      	lsls	r3, r5, #3
 8008fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fd2:	00e2      	lsls	r2, r4, #3
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	461d      	mov	r5, r3
 8008fd8:	4643      	mov	r3, r8
 8008fda:	18e3      	adds	r3, r4, r3
 8008fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	eb45 0303 	adc.w	r3, r5, r3
 8008fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ffa:	f04f 0200 	mov.w	r2, #0
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009006:	4629      	mov	r1, r5
 8009008:	008b      	lsls	r3, r1, #2
 800900a:	4621      	mov	r1, r4
 800900c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009010:	4621      	mov	r1, r4
 8009012:	008a      	lsls	r2, r1, #2
 8009014:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009018:	f7f7 f92e 	bl	8000278 <__aeabi_uldivmod>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4b60      	ldr	r3, [pc, #384]	; (80091a4 <UART_SetConfig+0x570>)
 8009022:	fba3 2302 	umull	r2, r3, r3, r2
 8009026:	095b      	lsrs	r3, r3, #5
 8009028:	011c      	lsls	r4, r3, #4
 800902a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800902e:	2200      	movs	r2, #0
 8009030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009034:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009038:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800903c:	4642      	mov	r2, r8
 800903e:	464b      	mov	r3, r9
 8009040:	1891      	adds	r1, r2, r2
 8009042:	61b9      	str	r1, [r7, #24]
 8009044:	415b      	adcs	r3, r3
 8009046:	61fb      	str	r3, [r7, #28]
 8009048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800904c:	4641      	mov	r1, r8
 800904e:	1851      	adds	r1, r2, r1
 8009050:	6139      	str	r1, [r7, #16]
 8009052:	4649      	mov	r1, r9
 8009054:	414b      	adcs	r3, r1
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009064:	4659      	mov	r1, fp
 8009066:	00cb      	lsls	r3, r1, #3
 8009068:	4651      	mov	r1, sl
 800906a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800906e:	4651      	mov	r1, sl
 8009070:	00ca      	lsls	r2, r1, #3
 8009072:	4610      	mov	r0, r2
 8009074:	4619      	mov	r1, r3
 8009076:	4603      	mov	r3, r0
 8009078:	4642      	mov	r2, r8
 800907a:	189b      	adds	r3, r3, r2
 800907c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009080:	464b      	mov	r3, r9
 8009082:	460a      	mov	r2, r1
 8009084:	eb42 0303 	adc.w	r3, r2, r3
 8009088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800908c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	67bb      	str	r3, [r7, #120]	; 0x78
 8009096:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009098:	f04f 0200 	mov.w	r2, #0
 800909c:	f04f 0300 	mov.w	r3, #0
 80090a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80090a4:	4649      	mov	r1, r9
 80090a6:	008b      	lsls	r3, r1, #2
 80090a8:	4641      	mov	r1, r8
 80090aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090ae:	4641      	mov	r1, r8
 80090b0:	008a      	lsls	r2, r1, #2
 80090b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80090b6:	f7f7 f8df 	bl	8000278 <__aeabi_uldivmod>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4b39      	ldr	r3, [pc, #228]	; (80091a4 <UART_SetConfig+0x570>)
 80090c0:	fba3 1302 	umull	r1, r3, r3, r2
 80090c4:	095b      	lsrs	r3, r3, #5
 80090c6:	2164      	movs	r1, #100	; 0x64
 80090c8:	fb01 f303 	mul.w	r3, r1, r3
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	3332      	adds	r3, #50	; 0x32
 80090d2:	4a34      	ldr	r2, [pc, #208]	; (80091a4 <UART_SetConfig+0x570>)
 80090d4:	fba2 2303 	umull	r2, r3, r2, r3
 80090d8:	095b      	lsrs	r3, r3, #5
 80090da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090de:	441c      	add	r4, r3
 80090e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090e4:	2200      	movs	r2, #0
 80090e6:	673b      	str	r3, [r7, #112]	; 0x70
 80090e8:	677a      	str	r2, [r7, #116]	; 0x74
 80090ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80090ee:	4642      	mov	r2, r8
 80090f0:	464b      	mov	r3, r9
 80090f2:	1891      	adds	r1, r2, r2
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	415b      	adcs	r3, r3
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090fe:	4641      	mov	r1, r8
 8009100:	1851      	adds	r1, r2, r1
 8009102:	6039      	str	r1, [r7, #0]
 8009104:	4649      	mov	r1, r9
 8009106:	414b      	adcs	r3, r1
 8009108:	607b      	str	r3, [r7, #4]
 800910a:	f04f 0200 	mov.w	r2, #0
 800910e:	f04f 0300 	mov.w	r3, #0
 8009112:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009116:	4659      	mov	r1, fp
 8009118:	00cb      	lsls	r3, r1, #3
 800911a:	4651      	mov	r1, sl
 800911c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009120:	4651      	mov	r1, sl
 8009122:	00ca      	lsls	r2, r1, #3
 8009124:	4610      	mov	r0, r2
 8009126:	4619      	mov	r1, r3
 8009128:	4603      	mov	r3, r0
 800912a:	4642      	mov	r2, r8
 800912c:	189b      	adds	r3, r3, r2
 800912e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009130:	464b      	mov	r3, r9
 8009132:	460a      	mov	r2, r1
 8009134:	eb42 0303 	adc.w	r3, r2, r3
 8009138:	66fb      	str	r3, [r7, #108]	; 0x6c
 800913a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	663b      	str	r3, [r7, #96]	; 0x60
 8009144:	667a      	str	r2, [r7, #100]	; 0x64
 8009146:	f04f 0200 	mov.w	r2, #0
 800914a:	f04f 0300 	mov.w	r3, #0
 800914e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009152:	4649      	mov	r1, r9
 8009154:	008b      	lsls	r3, r1, #2
 8009156:	4641      	mov	r1, r8
 8009158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800915c:	4641      	mov	r1, r8
 800915e:	008a      	lsls	r2, r1, #2
 8009160:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009164:	f7f7 f888 	bl	8000278 <__aeabi_uldivmod>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <UART_SetConfig+0x570>)
 800916e:	fba3 1302 	umull	r1, r3, r3, r2
 8009172:	095b      	lsrs	r3, r3, #5
 8009174:	2164      	movs	r1, #100	; 0x64
 8009176:	fb01 f303 	mul.w	r3, r1, r3
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	011b      	lsls	r3, r3, #4
 800917e:	3332      	adds	r3, #50	; 0x32
 8009180:	4a08      	ldr	r2, [pc, #32]	; (80091a4 <UART_SetConfig+0x570>)
 8009182:	fba2 2303 	umull	r2, r3, r2, r3
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	f003 020f 	and.w	r2, r3, #15
 800918c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4422      	add	r2, r4
 8009194:	609a      	str	r2, [r3, #8]
}
 8009196:	bf00      	nop
 8009198:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800919c:	46bd      	mov	sp, r7
 800919e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091a2:	bf00      	nop
 80091a4:	51eb851f 	.word	0x51eb851f

080091a8 <__libc_init_array>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	4d0d      	ldr	r5, [pc, #52]	; (80091e0 <__libc_init_array+0x38>)
 80091ac:	4c0d      	ldr	r4, [pc, #52]	; (80091e4 <__libc_init_array+0x3c>)
 80091ae:	1b64      	subs	r4, r4, r5
 80091b0:	10a4      	asrs	r4, r4, #2
 80091b2:	2600      	movs	r6, #0
 80091b4:	42a6      	cmp	r6, r4
 80091b6:	d109      	bne.n	80091cc <__libc_init_array+0x24>
 80091b8:	4d0b      	ldr	r5, [pc, #44]	; (80091e8 <__libc_init_array+0x40>)
 80091ba:	4c0c      	ldr	r4, [pc, #48]	; (80091ec <__libc_init_array+0x44>)
 80091bc:	f000 f82e 	bl	800921c <_init>
 80091c0:	1b64      	subs	r4, r4, r5
 80091c2:	10a4      	asrs	r4, r4, #2
 80091c4:	2600      	movs	r6, #0
 80091c6:	42a6      	cmp	r6, r4
 80091c8:	d105      	bne.n	80091d6 <__libc_init_array+0x2e>
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
 80091cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d0:	4798      	blx	r3
 80091d2:	3601      	adds	r6, #1
 80091d4:	e7ee      	b.n	80091b4 <__libc_init_array+0xc>
 80091d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091da:	4798      	blx	r3
 80091dc:	3601      	adds	r6, #1
 80091de:	e7f2      	b.n	80091c6 <__libc_init_array+0x1e>
 80091e0:	0800a84c 	.word	0x0800a84c
 80091e4:	0800a84c 	.word	0x0800a84c
 80091e8:	0800a84c 	.word	0x0800a84c
 80091ec:	0800a850 	.word	0x0800a850

080091f0 <memcpy>:
 80091f0:	440a      	add	r2, r1
 80091f2:	4291      	cmp	r1, r2
 80091f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091f8:	d100      	bne.n	80091fc <memcpy+0xc>
 80091fa:	4770      	bx	lr
 80091fc:	b510      	push	{r4, lr}
 80091fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009206:	4291      	cmp	r1, r2
 8009208:	d1f9      	bne.n	80091fe <memcpy+0xe>
 800920a:	bd10      	pop	{r4, pc}

0800920c <memset>:
 800920c:	4402      	add	r2, r0
 800920e:	4603      	mov	r3, r0
 8009210:	4293      	cmp	r3, r2
 8009212:	d100      	bne.n	8009216 <memset+0xa>
 8009214:	4770      	bx	lr
 8009216:	f803 1b01 	strb.w	r1, [r3], #1
 800921a:	e7f9      	b.n	8009210 <memset+0x4>

0800921c <_init>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	bf00      	nop
 8009220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009222:	bc08      	pop	{r3}
 8009224:	469e      	mov	lr, r3
 8009226:	4770      	bx	lr

08009228 <_fini>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	bf00      	nop
 800922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922e:	bc08      	pop	{r3}
 8009230:	469e      	mov	lr, r3
 8009232:	4770      	bx	lr
